"use strict";(self.webpackChunk_ethdebug_format_web=self.webpackChunk_ethdebug_format_web||[]).push([[8263],{61634:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var s=n(52322),i=n(45392);const r={sidebar_position:2},o="Essential type definitions",a={id:"implementation-guides/pointers/types/types",title:"Essential type definitions",description:"This reference implementation uses a few fundamental types/interfaces for",source:"@site/docs/implementation-guides/pointers/types/types.mdx",sourceDirName:"implementation-guides/pointers/types",slug:"/implementation-guides/pointers/types/",permalink:"/format/docs/implementation-guides/pointers/types/",draft:!1,unlisted:!1,editUrl:"https://github.com/ethdebug/format/tree/main/packages/web/docs/implementation-guides/pointers/types/types.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Overview",permalink:"/format/docs/implementation-guides/pointers/overview"},next:{title:"Pointer types",permalink:"/format/docs/implementation-guides/pointers/types/pointer-types"}},p={},d=[];function c(e){const t={a:"a",h1:"h1",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"essential-type-definitions",children:"Essential type definitions"}),"\n",(0,s.jsx)(t.p,{children:"This reference implementation uses a few fundamental types/interfaces for\ncross-cutting concerns. This section describes upfront what these are, since\nthe rest of the implementation makes heavy use of them:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/docs/implementation-guides/pointers/types/pointer-types",children:"Pointer types"}),"\nmodel the ",(0,s.jsx)(t.strong,{children:"ethdebug/format/pointer"})," JSON Schema as TypeScript types\n(including corresponding type guards)"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"/docs/implementation-guides/pointers/types/data-and-machines",children:"Data and machines"})," page\ncovers low-level concerns of handling raw bytes and interfacing with\nrunning EVMs."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/docs/implementation-guides/pointers/types/cursors",children:"Cursors"})," are the\nresult of dereferencing a pointer; they accept a machine state and produce\na list of concrete data address ranges corresponding to runtime pointer\nregions."]}),"\n"]}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);