"use strict";(self.webpackChunk_ethdebug_format_web=self.webpackChunk_ethdebug_format_web||[]).push([[7219],{4793:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=n(2322),s=n(5392);const o={sidebar_position:1},r="Overview",a={id:"pointer/overview",title:"Overview",description:"ethdebug/format/pointer is a JSON schema for pointing to bytes in the EVM.",source:"@site/spec/pointer/overview.mdx",sourceDirName:"pointer",slug:"/pointer/overview",permalink:"/format/spec/pointer/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/ethdebug/format/tree/main/packages/web/spec/pointer/overview.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"ethdebug/format/pointer",permalink:"/format/spec/category/ethdebugformatpointer"},next:{title:"Key concepts",permalink:"/format/spec/pointer/concepts"}},h={},c=[{value:"Reading this schema",id:"reading-this-schema",level:2}];function d(e){const t={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.admonition,{type:"tip",children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"ethdebug/format/pointer"})," is a JSON schema for pointing to bytes in the EVM."]}),(0,i.jsx)(t.p,{children:"Debuggers need to know where to find variables when looking at a running\nmachine, which means that debuggers must be able to find the related regions\nof the stack, memory, storage, etc. where each of the variables in scope live\nat any point in time."}),(0,i.jsxs)(t.p,{children:["This gets particularly complicated on the EVM because many common languages\nemploy novel techniques for organizing data. (Some of these\ntechniques serve to work around machine limitations; others serve to\ntake advantage of the unique way the EVM is designed.) For a thorough\ndescription of how Solidity organizes memory, please see related work\n",(0,i.jsx)(t.a,{href:"https://ethdebug.github.io/solidity-data-representation/",children:"Data Representation in Solidity"}),"."]}),(0,i.jsxs)(t.p,{children:["As a consequence of this complexity, this schema seeks to allow compilers the\nexpressiveness required for describing these allocation techniques at\ncompile-time. To readers continuing on,\na ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Greenspun%27s_tenth_rule",children:"warning"})," may apply."]})]}),"\n",(0,i.jsx)(t.p,{children:"This format defines a schema for locating semantically-cohesive bytes ranges\nin a running EVM."}),"\n",(0,i.jsxs)(t.p,{children:["JSON values in this schema describe primarily ",(0,i.jsx)(t.em,{children:"where"})," data is to be found to\nidentify to debuggers reading a trace (or attached to a running EVM) which data\nmust be read from which location(s). Values in this schema may address\na single continuous region of bytes or an aggregation of non-continuous related\nregions."]}),"\n",(0,i.jsx)(t.h2,{id:"reading-this-schema",children:"Reading this schema"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"ethdebug/format/pointer"})," schema is a root schema that composes other\nrelated schemas in the ethdebug/format/pointer/* namespace."]}),"\n",(0,i.jsxs)(t.p,{children:["These schemas (like all schemas in this format) are specified as\n",(0,i.jsx)(t.a,{href:"https://json-schema.org",children:"JSON Schema"}),", draft 2020-12."]}),"\n",(0,i.jsx)(t.p,{children:"Please refer to one or more of the following resources in this section:"})]})}function l(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);