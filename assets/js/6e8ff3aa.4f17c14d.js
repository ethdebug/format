"use strict";(self.webpackChunk_ethdebug_format_web=self.webpackChunk_ethdebug_format_web||[]).push([[93],{9310:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(5893),s=t(1151);t(6220),t(897);const i={sidebar_position:2},a="ethdebug/format/type [placeholder]",o={id:"type/type",title:"ethdebug/format/type [placeholder]",description:"This schema remains unspecified. Please see the Type schemas",source:"@site/spec/type/type.mdx",sourceDirName:"type",slug:"/type/",permalink:"/format/spec/type/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Overview",permalink:"/format/spec/type/overview"},next:{title:"ethdebug/format/type/base",permalink:"/format/spec/type/base"}},p={},c=[];function l(e){const n={a:"a",admonition:"admonition",h1:"h1",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"ethdebugformattype-placeholder",children:"ethdebug/format/type [placeholder]"}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["This schema remains unspecified. Please see the Type schemas\n",(0,r.jsx)(n.a,{href:"/spec/type/overview",children:"Overview"})," for more information on how these\nschemas will be organized, and/or please review the\n",(0,r.jsxs)(n.a,{href:"/spec/type/base",children:[(0,r.jsx)(n.strong,{children:"ethdebug/format/type/base"})," schema"]})," that is intended\nto serve as base subschema for ",(0,r.jsx)(n.strong,{children:"ethdebug/format/type"}),"."]}),(0,r.jsx)(n.p,{children:"We appreciate your interest in these developing efforts."})]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},6220:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(8570),s=t.n(r),i=t(9286),a=t(4866),o=t(5162),p=t(4160);const c=['$schema: "https://json-schema.org/draft/2020-12/schema"\n$id: "schema:ethdebug/format/type/base"\n\ntitle: ethdebug/format/type/base\ndescription:\n  Defines the minimally necessary schema for a data type.\n  Types belong to a particular `class` (`"elementary"` or `"complex"`),\n  and are further identified by a particular `kind`.\ntype: object\noneOf:\n  - $ref: "#/$defs/ElementaryType"\n  - $ref: "#/$defs/ComplexType"\n\n$defs:\n  ElementaryType:\n    title: ElementaryType\n    description:\n      Represents an elementary type (one that does not compose other types)\n    type: object\n    properties:\n      class:\n        type: string\n        const: elementary\n      kind:\n        type: string\n      contains:\n        not:\n          description:\n            "**Elementary types must not specify a `contains` field\n            (to make it easier to discriminate elementary vs. complex)**"\n    required:\n      - kind\n    examples:\n      - kind: uint\n        bits: 256\n\n  ComplexType:\n    title: ComplexType\n    description:\n      Represents a complex type, one that composes other types (e.g., arrays,\n      structs, mappings)\n    type: object\n    properties:\n      class:\n        type: string\n        const: complex\n        description: Indicates that this is a complex type\n      kind:\n        type: string\n        description: The specific kind of complex type, e.g., array or struct\n      contains:\n        title: ComplexType.contains\n        oneOf:\n          - $ref: "#/$defs/TypeWrapper"\n          - $ref: "#/$defs/TypeWrapperArray"\n          - $ref: "#/$defs/TypeWrapperObject"\n    required:\n      - kind\n      - contains\n    examples:\n      - kind: array\n        contains:\n          type:\n            kind: uint\n            bits: 256\n      - kind: struct\n        contains:\n          - member: x\n            type:\n              kind: uint\n              bits: 256\n          - member: y\n            type:\n              kind: uint\n              bits: 256\n      - kind: mapping\n        contains:\n          key:\n            type:\n              kind: address\n              payable: true\n          value:\n            type:\n              kind: uint\n              bits: 256\n\n  TypeReference:\n    title: \'{ "id": ... }\'\n    description: A reference to a known type by ID\n    type: object\n    properties:\n      id:\n        type:\n          - string\n          - number\n    additionalProperties: false\n    required:\n      - id\n\n  TypeWrapper:\n    title: \'{ "type": ... }\'\n    description:\n      A wrapper around a type. Defines a `"type"` field that may include a full\n      Type representation or a reference to a known Type by ID. Note that this\n      schema permits additional properties on the same object.\n    type: object\n    properties:\n      type:\n        oneOf:\n          - $ref: "schema:ethdebug/format/type/base"\n          - $ref: "#/$defs/TypeReference"\n    required:\n      - type\n\n  TypeWrapperArray:\n    title: \'{ "type": ... }[]\'\n    description: A list of wrapped types, where the wrapper may add fields\n    type: array\n    items:\n      $ref: "#/$defs/TypeWrapper"\n\n  TypeWrapperObject:\n    title: \'{ "key": { "type": ... }, ... }\'\n    description:\n      A key-value mapping of wrapped types, where the wrapper may add fields\n    type: object\n    additionalProperties:\n      $ref: "#/$defs/TypeWrapper"\n'].map((e=>({[p.ZP.parse(e).$id]:e}))).reduce(((e,n)=>({...e,...n})),{});function l(e){let{schema:n,pointer:t}=e;if("string"==typeof t&&!t.startsWith("#"))throw new Error("`pointer` option must start with '#'");return function(e){return 1===Object.keys(e).length&&"id"in e}(n)?function(e){let{schema:{id:n},pointer:t}=e;const[r,s]=n.split("#"),i=s?function(e){const n=e.filter((e=>"string"==typeof e)).map((e=>e.slice(1))).join("");if(0===n.length)return;return`#${n}`}([`#${s}`,t]):t,a=c[r];if(!a)throw new Error(`Unknown schema with $id "${r}"`);const o=d(a,i),l=p.ZP.parse(o);return{id:r,pointer:i,yaml:o,schema:l}}({schema:n,pointer:t}):function(e){return 1===Object.keys(e).length&&"yaml"in e}(n)?function(e){let{schema:{yaml:n},pointer:t}=e;const r=d(n,t),s=p.ZP.parse(r),i=s.$id;return i?{id:i,pointer:t,yaml:r,schema:s}:{pointer:t,yaml:r,schema:s}}({schema:n,pointer:t}):function(e){let{schema:n,pointer:t}=e;const r=d(p.ZP.stringify(n),t),s=p.ZP.parse(r),i=s.$id;return i?{id:i,pointer:t,yaml:r,schema:s}:{pointer:t,yaml:r,schema:s}}({schema:n,pointer:t})}function d(e,n){if(!n)return e;let t=p.ZP.parseDocument(e);for(const r of n.slice(2).split("/"))if(t=t.get(r,!0),!t)throw new Error(`Pointer ${n} not found in schema`);return p.ZP.stringify(t)}var m=t(2096),y=t(5893);function h(e){const{id:n,pointer:t,schema:r,yaml:s}=l(e),p=n?n.startsWith("schema:")?n.slice(7):n:void 0,c=p&&t?`${p}${t}`:p||void 0;return(0,y.jsxs)(a.default,{groupId:"schema-language",children:[(0,y.jsx)(o.default,{value:"yaml",label:"YAML",children:(0,y.jsx)(i.default,{className:"schema-listing",language:"yaml",showLineNumbers:!0,title:c||"schema.yaml",children:s})}),(0,y.jsx)(o.default,{value:"json",label:"JSON",children:(0,y.jsx)(i.default,{className:"schema-listing",language:"json",showLineNumbers:!0,title:c?`${c}`:"schema.json",children:JSON.stringify(r,void 0,2)})})]})}const f=(e,n,t)=>{const r=s=>n(s)?t(s,e):"object"!=typeof s||null===s?s:Array.isArray(s)?s.map((e=>r(e))):Object.keys(s).reduce(((e,n)=>(e[n]=r(s[n]),e)),{});return r(e)};function u(e){const{schema:n,yaml:t,pointer:r}=l(e),{detect:p=(()=>!1),transform:c=(e=>e)}=e,d=f(n,p,c);return(0,y.jsxs)(a.default,{children:[(0,y.jsx)(o.default,{value:"viewer",label:"Explore",children:(0,y.jsx)(s(),{schema:d,resolverOptions:{resolvers:{schema:{resolve:e=>{const{schema:n}=l({schema:{id:e.toString()}});return n}}}},viewerOptions:{showExamples:!0,ValueComponent:e=>{let{value:n}=e;return["string","number","bigint","boolean"].includes(typeof n)?(0,y.jsx)("code",{children:n.toString()}):(0,y.jsx)(i.default,{language:"json",children:`${JSON.stringify(n,void 0,2)}`})},DescriptionComponent:e=>{let{description:n}=e;return(0,y.jsx)(m.U,{children:n})}}})}),(0,y.jsx)(o.default,{value:"listing",label:"View source",children:(0,y.jsx)(h,{schema:e.schema,pointer:e.pointer})})]})}}}]);