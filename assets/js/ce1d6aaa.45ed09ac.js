(self.webpackChunk_ethdebug_format_web=self.webpackChunk_ethdebug_format_web||[]).push([[8470],{72052:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=n(52322),i=n(45392),a=(n(84560),n(61376));const r={sidebar_position:4},o="Evaluating pointer expressions",c={id:"implementation-guides/pointers/evaluating-expressions",title:"Evaluating pointer expressions",description:"Expression evaluation is a bit more interesting than reading raw region data,",source:"@site/docs/implementation-guides/pointers/evaluating-expressions.mdx",sourceDirName:"implementation-guides/pointers",slug:"/implementation-guides/pointers/evaluating-expressions",permalink:"/format/docs/implementation-guides/pointers/evaluating-expressions",draft:!1,unlisted:!1,editUrl:"https://github.com/ethdebug/format/tree/main/packages/web/docs/implementation-guides/pointers/evaluating-expressions.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Reading from pointer regions",permalink:"/format/docs/implementation-guides/pointers/reading-from-regions"},next:{title:"The dereference function",permalink:"/format/docs/implementation-guides/pointers/dereference-logic/"}},l={},d=[{value:"Evaluating constants, literals, and variables",id:"evaluating-constants-literals-and-variables",level:2},{value:"Evaluating arithmetic operations",id:"evaluating-arithmetic-operations",level:2},{value:"Evaluating resize expressions",id:"evaluating-resize-expressions",level:2},{value:"Evaluating keccak256 hashes",id:"evaluating-keccak256-hashes",level:2},{value:"Evaluating property lookups",id:"evaluating-property-lookups",level:2},{value:"Evaluating machine state reads",id:"evaluating-machine-state-reads",level:2},{value:"Note on <code>&quot;$this&quot;</code> region lookups",id:"note-on-this-region-lookups",level:2}];function u(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,i.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"evaluating-pointer-expressions",children:"Evaluating pointer expressions"}),"\n",(0,s.jsx)(t.p,{children:"Expression evaluation is a bit more interesting than reading raw region data,\nbut, still, performing this evaluation becomes relatively straightforward\nif variable and region references are pre-evaluated:"}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getExportedDeclarations().get("EvaluateOptions")[0]}),"\n",(0,s.jsxs)(t.p,{children:["The main ",(0,s.jsx)(t.code,{children:"evaluate()"})," function uses type guards to dispatch to the appropriate\nspecific logic based on the kind of expression:"]}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsxs)("summary",{children:["Source code of ",(0,s.jsx)(t.code,{children:"evaluate(expression: Pointer.Expression, options: EvaluateOptions)"})]}),(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getExportedDeclarations().get("evaluate")[0]})]}),"\n",(0,s.jsx)(t.h2,{id:"evaluating-constants-literals-and-variables",children:"Evaluating constants, literals, and variables"}),"\n",(0,s.jsx)(t.p,{children:"Evaluating constant expressions is quite straightforward:"}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateConstant")}),"\n",(0,s.jsx)(t.p,{children:"Evaluating literals involves detecting hex string vs. number and converting\nappropriate to bytes:"}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateLiteral")}),"\n",(0,s.jsxs)(t.p,{children:["Variable lookups, of course, require consulting the ",(0,s.jsx)(t.code,{children:"variables"})," map passed\nin ",(0,s.jsx)(t.code,{children:"EvaluateOptions"}),":"]}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateVariable")}),"\n",(0,s.jsx)(t.h2,{id:"evaluating-arithmetic-operations",children:"Evaluating arithmetic operations"}),"\n",(0,s.jsx)(t.p,{children:"Doing arithmetic operations follows the logic one might expect: recurse on\nthe operands of the expression and join the results appropriately. Note the\nslight differences in implementation for operations that accept any number\nof operands (sums, products), vs. operations that only accept two operands\n(differences, quotients, remainders)."}),"\n",(0,s.jsx)(t.p,{children:"Evaluating sums:"}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateArithmeticSum")}),"\n",(0,s.jsx)(t.p,{children:"Evaluating products:"}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateArithmeticProduct")}),"\n",(0,s.jsx)(t.p,{children:"Evaluating differences:"}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateArithmeticDifference")}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note"})," how this function operates on unsigned values only by bounding the\nresult below at 0."]}),"\n",(0,s.jsx)(t.p,{children:"Evaluating quotients:"}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateArithmeticQuotient")}),"\n",(0,s.jsx)(t.p,{children:"(Quotients of course use integer division only.)"}),"\n",(0,s.jsx)(t.p,{children:"Evaluating remainders:"}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateArithmeticRemainder")}),"\n",(0,s.jsx)(t.h2,{id:"evaluating-resize-expressions",children:"Evaluating resize expressions"}),"\n",(0,s.jsxs)(t.p,{children:["This schema provides the ",(0,s.jsx)(t.code,{children:'{ "$sized<N>": <expression> }'})," construct to allow\nexplicitly resizing a subexpression. This implementation uses the\n",(0,s.jsx)(t.a,{href:"/docs/implementation-guides/pointers/types/data-and-machines",children:(0,s.jsx)(t.code,{children:"Data.prototype.resizeTo()"})}),"\nmethod to perform this operation."]}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateResize")}),"\n",(0,s.jsx)(t.h2,{id:"evaluating-keccak256-hashes",children:"Evaluating keccak256 hashes"}),"\n",(0,s.jsx)(t.p,{children:"Many data types in storage are addressed by way of keccak256 hashing. This\nprocess is somewhat non-trivial because the bytes width of the inputs and the\nprocess for concatenating them must match compiler behavior exactly."}),"\n",(0,s.jsxs)(t.p,{children:["See Solidity's\n",(0,s.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html",children:"Layout of State Variables in Storage"}),"\ndocumentation for an example of how one high-level EVM language makes heavy\nuse of hashing to allocate persistent data."]}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateKeccak256")}),"\n",(0,s.jsx)(t.h2,{id:"evaluating-property-lookups",children:"Evaluating property lookups"}),"\n",(0,s.jsx)(t.p,{children:"Pointer expressions can compose values taken from the properties of other,\nnamed regions. This not only provides a convenient way to avoid duplication\nwhen writing pointer expressions, but also it is necessary for types with\nparticularly complex data allocations."}),"\n",(0,s.jsxs)(t.p,{children:["Currently, the specification defines lookup operations for three properties:\n",(0,s.jsx)(t.code,{children:"offset"}),", ",(0,s.jsx)(t.code,{children:"length"}),", and ",(0,s.jsx)(t.code,{children:"slot"}),". Runtime checks are required to prevent\naccessing properties that aren't available on the target region (e.g.\nmemory regions do not contain a ",(0,s.jsx)(t.code,{children:"slot"})," property)."]}),"\n",(0,s.jsxs)(t.p,{children:["Since all of these lookups function in the same way, this reference\nimplementation needs only a single\n",(0,s.jsx)(t.code,{children:'evaluateLookup<O extends "slot" | "offset" | "length">'})," function:"]}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateLookup")}),"\n",(0,s.jsx)(t.p,{children:"(The use of generic types here serves mostly to appease the type-checker; the\nminimal type safety it affords is insignificant compared to runtime data\nconsistency concerns, which hopefully the implementation makes clear via its\nuse of runtime definedness checks.)"}),"\n",(0,s.jsx)(t.h2,{id:"evaluating-machine-state-reads",children:"Evaluating machine state reads"}),"\n",(0,s.jsxs)(t.p,{children:["Finally, the last kind of expression defined by this specification is for\nreading raw data from the machine state. A ",(0,s.jsx)(t.code,{children:"Pointer.Expression.Read"})," should\nevaluate to the raw bytes stored at runtime in the region identified by a\nparticular name."]}),"\n",(0,s.jsxs)(t.p,{children:["Thanks to ",(0,s.jsx)(t.code,{children:"evaluate()"}),"'s requirement that its input regions-by-name map\ncontains only concrete\n",(0,s.jsx)(t.a,{href:"/docs/implementation-guides/pointers/types/cursors",children:(0,s.jsx)(t.code,{children:"Cursor.Region"})}),"\nobjects, and by leveraging the existing\n",(0,s.jsxs)(t.a,{href:"/docs/implementation-guides/pointers/reading-from-regions",children:[(0,s.jsx)(t.code,{children:"read()"})," functionality"]}),",\nthis function presents no surprises:"]}),"\n",(0,s.jsx)(a.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/evaluate.ts",extract:e=>e.getFunction("evaluateRead")}),"\n",(0,s.jsxs)(t.h2,{id:"note-on-this-region-lookups",children:["Note on ",(0,s.jsx)(t.code,{children:'"$this"'})," region lookups"]}),"\n",(0,s.jsxs)(t.p,{children:["Astute readers might notice that these docs contain no mention until now\nabout how to implement support for expressions that reference the region in\nwhich they are defined, a mechanism the schema permits via the special region\nname identifier ",(0,s.jsx)(t.code,{children:'"$this"'}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Performing ",(0,s.jsx)(t.em,{children:"read"})," operations against ",(0,s.jsx)(t.code,{children:'"$this"'})," region is meaningless since\nthis schema does not afford any mechanism for defining regions recursively\ndown to a base case (or similar composition). Thus, the only syntactic\nconstruct for self-referential reads resembles, e.g., defining a storage region\nwhose ",(0,s.jsx)(t.code,{children:"slot"})," is ",(0,s.jsx)(t.code,{children:'{ $read: "$this" }'}),". Evaluating this ",(0,s.jsx)(t.code,{children:"slot"})," would require\nknowing the slot before knowing where to read, and knowing the slow requires\nknowing the machine value, ad nauseum."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.em,{children:"Property lookup expressions"}),", on the other hand, are completely\nacceptable\u2014provided they do not include circular references of any cycle\nlength."]}),"\n",(0,s.jsxs)(t.p,{children:["Since the ",(0,s.jsx)(t.code,{children:"evaluate<.*>()"})," functions here are written to accept only one\nexpression at a time, this reference implementation relegates this concern to a\nhigher-level module; proper use of ",(0,s.jsx)(t.code,{children:"evaluate()"})," here requires its\n",(0,s.jsx)(t.code,{children:"options.regions"})," map to include a pre-evaluated (albeit partial)\n",(0,s.jsx)(t.code,{children:'"$this"'})," region."]}),"\n",(0,s.jsxs)(t.p,{children:["The logic for creating ",(0,s.jsx)(t.code,{children:'"$this"'})," regions and calling ",(0,s.jsx)(t.code,{children:"evaluate()"})," correctly\nis described in the section pertaining to that area of the code. Be\nforewarned that this reference implementation takes a na\xefve trial-and-error\napproach for determining property evaluation order; implementations requiring\na more robust strategy will need to do some amount of pre-processing."]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},48313:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=48313,e.exports=t},61376:(e,t,n)=>{"use strict";n.d(t,{Z:()=>g});var s=n(84560),i=n.n(s),a=n(20477),r=n(42408);var o=n(2784),c=n(27718),l=n(52322);function d(e){let{code:t,links:n,...s}=e;const a=(0,o.useRef)(null),[r,c]=(0,o.useState)(null);return(0,o.useEffect)((()=>{function e(){if(a.current){const e=a.current.querySelector("pre > code");if(e){const t=Array.from(e.childNodes).flatMap((e=>u(e,n)));c((0,l.jsx)("pre",{className:e.parentElement?.className,children:(0,l.jsx)("code",{className:e.className,children:t})}))}}}e();const t=new MutationObserver(e);return a.current&&t.observe(a.current,{childList:!0,subtree:!0}),()=>t.disconnect()}),[t,n]),r||(0,l.jsx)("div",{ref:a,children:(0,l.jsx)(i(),{...s,children:t})})}function u(e,t){return e.nodeType===Node.TEXT_NODE?function(e,t){const n=[];let s=e.textContent||"",i=0;for(const[a,r]of Object.entries(t)){let e=s.indexOf(a,i);for(;-1!==e;)e>i&&n.push(s.slice(i,e)),n.push((0,l.jsx)(c.Z,{to:r,className:"linked-code-block-link",children:a},`${a}-${e}`)),i=e+a.length,e=s.indexOf(a,i)}i<s.length&&n.push(s.slice(i));return n}(e,t):e.nodeType===Node.ELEMENT_NODE?function(e,t){const n=e.tagName.toLowerCase(),s={key:h++,className:e.className};e.style&&e.style.cssText&&(s.style=function(e){const t={};for(const n of e.split(";"))if(n){const[e,s]=n.split(":");if(e&&s){t[e.trim().replace(/-./g,(e=>e[1].toUpperCase()))]=s.trim()}}return t}(e.style.cssText));if(p.has(n))return o.createElement(n,s);const i=Array.from(e.childNodes).flatMap((e=>u(e,t)));return o.createElement(n,s,i)}(e,t):[]}let h=0;const p=new Set(["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"]);function g(e){let{packageName:t,sourcePath:n,extract:s,links:o={},...c}=e;const u=function(e){const{packages:t}=(0,r.eZ)("project-code-plugin");if(!(e in t))throw new Error(`Unknown package name ${e}`);const{sourceFiles:n}=t[e],s=new a.IKL({useInMemoryFileSystem:!0});for(const{filePath:i,text:a}of n)s.createSourceFile(i,a,{overwrite:!0});return s}(t),h=u.getSourceFileOrThrow(n),p=s?s(h,u):h,g=p.getFullText().trim(),m=!s;return Object.keys(o).length>0?(0,l.jsx)(d,{code:g,links:o,language:"typescript",...c}):(0,l.jsx)(i(),{language:"typescript",...m?{title:n,showLineNumbers:!0}:{showLineNumbers:!1},...c,children:p.getFullText().trim()})}},56699:()=>{},68379:()=>{},68382:()=>{},78867:()=>{},21212:()=>{},89854:()=>{},25800:()=>{},93037:()=>{},26996:()=>{}}]);