/*! For license information please see main.18cd2bcb.js.LICENSE.txt */
(self.webpackChunk_ethdebug_format_web=self.webpackChunk_ethdebug_format_web||[]).push([[179],{60108:(e,n,t)=>{"use strict";t.d(n,{_:()=>o,t:()=>i});var r=t(2784),a=t(52322);const o=r.createContext(!1);function i(e){let{children:n}=e;const[t,i]=(0,r.useState)(!1);return(0,r.useEffect)((()=>{i(!0)}),[]),(0,a.jsx)(o.Provider,{value:t,children:n})}},2062:(e,n,t)=>{"use strict";var r=t(2784),a=t(17029),o=t(72175),i=t(47933),s=t(36809),l=t(31263);const c=[t(55749),t(86120),t(80401),t(1964)];var d=t(19895),u=t(7267),p=t(9702),m=t(52322);function f(e){let{children:n}=e;return(0,m.jsx)(m.Fragment,{children:n})}var h=t(69854),y=t(37614),g=t(90077),b=t(97683),v=t(50328),x=t(55552),w=t(9499),k=t(4925),S=t(60958),$=t(54390);function j(){const{i18n:{currentLocale:e,defaultLocale:n,localeConfigs:t}}=(0,y.Z)(),r=(0,x.l)(),a=t[e].htmlLang,o=e=>e.replace("-","_");return(0,m.jsxs)(h.Z,{children:[Object.entries(t).map((e=>{let[n,{htmlLang:t}]=e;return(0,m.jsx)("link",{rel:"alternate",href:r.createUrl({locale:n,fullyQualified:!0}),hrefLang:t},n)})),(0,m.jsx)("link",{rel:"alternate",href:r.createUrl({locale:n,fullyQualified:!0}),hrefLang:"x-default"}),(0,m.jsx)("meta",{property:"og:locale",content:o(a)}),Object.values(t).filter((e=>a!==e.htmlLang)).map((e=>(0,m.jsx)("meta",{property:"og:locale:alternate",content:o(e.htmlLang)},`meta-og-${e.htmlLang}`)))]})}function E(e){let{permalink:n}=e;const{siteConfig:{url:t}}=(0,y.Z)(),r=function(){const{siteConfig:{url:e,baseUrl:n,trailingSlash:t}}=(0,y.Z)(),{pathname:r}=(0,u.TH)();return e+(0,S.applyTrailingSlash)((0,g.ZP)(r),{trailingSlash:t,baseUrl:n})}(),a=n?`${t}${n}`:r;return(0,m.jsxs)(h.Z,{children:[(0,m.jsx)("meta",{property:"og:url",content:a}),(0,m.jsx)("link",{rel:"canonical",href:a})]})}function C(){const{i18n:{currentLocale:e}}=(0,y.Z)(),{metadata:n,image:t}=(0,b.L)();return(0,m.jsxs)(m.Fragment,{children:[(0,m.jsxs)(h.Z,{children:[(0,m.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,m.jsx)("body",{className:w.h})]}),t&&(0,m.jsx)(v.d,{image:t}),(0,m.jsx)(E,{}),(0,m.jsx)(j,{}),(0,m.jsx)($.Z,{tag:k.HX,locale:e}),(0,m.jsx)(h.Z,{children:n.map(((e,n)=>(0,m.jsx)("meta",{...e},n)))})]})}const P=new Map;var _=t(60108),T=t(16288),O=t(70164);function A(e){for(var n=arguments.length,t=new Array(n>1?n-1:0),r=1;r<n;r++)t[r-1]=arguments[r];const a=c.map((n=>{const r=n.default?.[e]??n[e];return r?.(...t)}));return()=>a.forEach((e=>e?.()))}const R=function(e){let{children:n,location:t,previousLocation:r}=e;return(0,O.Z)((()=>{r!==t&&(!function(e){let{location:n,previousLocation:t}=e;if(!t)return;const r=n.pathname===t.pathname,a=n.hash===t.hash,o=n.search===t.search;if(r&&a&&!o)return;const{hash:i}=n;if(i){const e=decodeURIComponent(i.substring(1)),n=document.getElementById(e);n?.scrollIntoView()}else window.scrollTo(0,0)}({location:t,previousLocation:r}),A("onRouteDidUpdate",{previousLocation:r,location:t}))}),[r,t]),n};function N(e){const n=Array.from(new Set([e,decodeURI(e)])).map((e=>(0,p.f)(d.Z,e))).flat();return Promise.all(n.map((e=>e.route.component.preload?.())))}class I extends r.Component{previousLocation;routeUpdateCleanupCb;constructor(e){super(e),this.previousLocation=null,this.routeUpdateCleanupCb=l.Z.canUseDOM?A("onRouteUpdate",{previousLocation:null,location:this.props.location}):()=>{},this.state={nextRouteHasLoaded:!0}}shouldComponentUpdate(e,n){if(e.location===this.props.location)return n.nextRouteHasLoaded;const t=e.location;return this.previousLocation=this.props.location,this.setState({nextRouteHasLoaded:!1}),this.routeUpdateCleanupCb=A("onRouteUpdate",{previousLocation:this.previousLocation,location:t}),N(t.pathname).then((()=>{this.routeUpdateCleanupCb(),this.setState({nextRouteHasLoaded:!0})})).catch((e=>{console.warn(e),window.location.reload()})),!1}render(){const{children:e,location:n}=this.props;return(0,m.jsx)(R,{previousLocation:this.previousLocation,location:n,children:(0,m.jsx)(u.AW,{location:n,render:()=>e})})}}const L=I,D="__docusaurus-base-url-issue-banner-container",M="__docusaurus-base-url-issue-banner",z="__docusaurus-base-url-issue-banner-suggestion-container";function q(e){return`\ndocument.addEventListener('DOMContentLoaded', function maybeInsertBanner() {\n  var shouldInsert = typeof window['docusaurus'] === 'undefined';\n  shouldInsert && insertBanner();\n});\n\nfunction insertBanner() {\n  var bannerContainer = document.createElement('div');\n  bannerContainer.id = '${D}';\n  var bannerHtml = ${JSON.stringify(function(e){return`\n<div id="${M}" style="border: thick solid red; background-color: rgb(255, 230, 179); margin: 20px; padding: 20px; font-size: 20px;">\n   <p style="font-weight: bold; font-size: 30px;">Your Docusaurus site did not load properly.</p>\n   <p>A very common reason is a wrong site <a href="https://docusaurus.io/docs/docusaurus.config.js/#baseUrl" style="font-weight: bold;">baseUrl configuration</a>.</p>\n   <p>Current configured baseUrl = <span style="font-weight: bold; color: red;">${e}</span> ${"/"===e?" (default value)":""}</p>\n   <p>We suggest trying baseUrl = <span id="${z}" style="font-weight: bold; color: green;"></span></p>\n</div>\n`}(e)).replace(/</g,"\\<")};\n  bannerContainer.innerHTML = bannerHtml;\n  document.body.prepend(bannerContainer);\n  var suggestionContainer = document.getElementById('${z}');\n  var actualHomePagePath = window.location.pathname;\n  var suggestedBaseUrl = actualHomePagePath.substr(-1) === '/'\n        ? actualHomePagePath\n        : actualHomePagePath + '/';\n  suggestionContainer.innerHTML = suggestedBaseUrl;\n}\n`}function F(){const{siteConfig:{baseUrl:e}}=(0,y.Z)();return(0,m.jsx)(m.Fragment,{children:!l.Z.canUseDOM&&(0,m.jsx)(h.Z,{children:(0,m.jsx)("script",{children:q(e)})})})}function U(){const{siteConfig:{baseUrl:e,baseUrlIssueBanner:n}}=(0,y.Z)(),{pathname:t}=(0,u.TH)();return n&&t===e?(0,m.jsx)(F,{}):null}function B(){const{siteConfig:{favicon:e,title:n,noIndex:t},i18n:{currentLocale:r,localeConfigs:a}}=(0,y.Z)(),o=(0,g.ZP)(e),{htmlLang:i,direction:s}=a[r];return(0,m.jsxs)(h.Z,{children:[(0,m.jsx)("html",{lang:i,dir:s}),(0,m.jsx)("title",{children:n}),(0,m.jsx)("meta",{property:"og:title",content:n}),(0,m.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),t&&(0,m.jsx)("meta",{name:"robots",content:"noindex, nofollow"}),e&&(0,m.jsx)("link",{rel:"icon",href:o})]})}var V=t(63951),H=t(89741);function W(){const e=(0,H.Z)();return(0,m.jsx)(h.Z,{children:(0,m.jsx)("html",{"data-has-hydrated":e})})}const Z=(0,p.H)(d.Z);function K(){const e=function(e){if(P.has(e.pathname))return{...e,pathname:P.get(e.pathname)};if((0,p.f)(d.Z,e.pathname).some((e=>{let{route:n}=e;return!0===n.exact})))return P.set(e.pathname,e.pathname),e;const n=e.pathname.trim().replace(/(?:\/index)?\.html$/,"")||"/";return P.set(e.pathname,n),{...e,pathname:n}}((0,u.TH)());return(0,m.jsx)(L,{location:e,children:Z})}function G(){return(0,m.jsx)(V.Z,{children:(0,m.jsx)(T.M,{children:(0,m.jsxs)(_.t,{children:[(0,m.jsxs)(f,{children:[(0,m.jsx)(B,{}),(0,m.jsx)(C,{}),(0,m.jsx)(U,{}),(0,m.jsx)(K,{})]}),(0,m.jsx)(W,{})]})})})}var Y=t(16887);const J=function(e){try{return document.createElement("link").relList.supports(e)}catch{return!1}}("prefetch")?function(e){return new Promise(((n,t)=>{if("undefined"==typeof document)return void t();const r=document.createElement("link");r.setAttribute("rel","prefetch"),r.setAttribute("href",e),r.onload=()=>n(),r.onerror=()=>t();const a=document.getElementsByTagName("head")[0]??document.getElementsByName("script")[0]?.parentNode;a?.appendChild(r)}))}:function(e){return new Promise(((n,t)=>{const r=new XMLHttpRequest;r.open("GET",e,!0),r.withCredentials=!0,r.onload=()=>{200===r.status?n():t()},r.send(null)}))};var Q=t(20805);const X=new Set,ee=new Set,ne=()=>navigator.connection?.effectiveType.includes("2g")||navigator.connection?.saveData,te={prefetch:e=>{if(!(e=>!ne()&&!ee.has(e)&&!X.has(e))(e))return!1;X.add(e);const n=(0,p.f)(d.Z,e).flatMap((e=>{return n=e.route.path,Object.entries(Y).filter((e=>{let[t]=e;return t.replace(/-[^-]+$/,"")===n})).flatMap((e=>{let[,n]=e;return Object.values((0,Q.Z)(n))}));var n}));return Promise.all(n.map((e=>{const n=t.gca(e);return n&&!n.includes("undefined")?J(n).catch((()=>{})):Promise.resolve()})))},preload:e=>!!(e=>!ne()&&!ee.has(e))(e)&&(ee.add(e),N(e))},re=Object.freeze(te);function ae(e){let{children:n}=e;return"hash"===s.default.future.experimental_router?(0,m.jsx)(i.UT,{children:n}):(0,m.jsx)(i.VK,{children:n})}const oe=Boolean(!0);if(l.Z.canUseDOM){window.docusaurus=re;const e=document.getElementById("__docusaurus"),n=(0,m.jsx)(o.B6,{children:(0,m.jsx)(ae,{children:(0,m.jsx)(G,{})})}),t=(e,n)=>{console.error("Docusaurus React Root onRecoverableError:",e,n)},i=()=>{if(window.docusaurusRoot)window.docusaurusRoot.render(n);else if(oe)window.docusaurusRoot=a.hydrateRoot(e,n,{onRecoverableError:t});else{const r=a.createRoot(e,{onRecoverableError:t});r.render(n),window.docusaurusRoot=r}};N(window.location.pathname).then((()=>{(0,r.startTransition)(i)}))}},16288:(e,n,t)=>{"use strict";t.d(n,{_:()=>u,M:()=>p});var r=t(2784),a=t(36809);const o=JSON.parse('{"docusaurus-plugin-content-docs":{"default":{"path":"/format/docs","versions":[{"name":"current","label":"Next","isLast":true,"path":"/format/docs","mainDocId":"overview","docs":[{"id":"goals","path":"/format/docs/goals","sidebar":"docsSidebar"},{"id":"implementation-guides/implementation-guides","path":"/format/docs/implementation-guides/","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/dereference-logic/dereference-logic","path":"/format/docs/implementation-guides/pointers/dereference-logic/","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/dereference-logic/generating-regions","path":"/format/docs/implementation-guides/pointers/dereference-logic/generating-regions","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/dereference-logic/making-regions-concrete","path":"/format/docs/implementation-guides/pointers/dereference-logic/making-regions-concrete","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/evaluating-expressions","path":"/format/docs/implementation-guides/pointers/evaluating-expressions","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/pointers","path":"/format/docs/implementation-guides/pointers/","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/reading-from-regions","path":"/format/docs/implementation-guides/pointers/reading-from-regions","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/blockchain-simulation","path":"/format/docs/implementation-guides/pointers/testing/blockchain-simulation","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/compilation","path":"/format/docs/implementation-guides/pointers/testing/compilation","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/deployment","path":"/format/docs/implementation-guides/pointers/testing/deployment","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/example-pointers","path":"/format/docs/implementation-guides/pointers/testing/example-pointers","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/jest","path":"/format/docs/implementation-guides/pointers/testing/jest","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/machine-observation","path":"/format/docs/implementation-guides/pointers/testing/machine-observation","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/test-cases/string-storage","path":"/format/docs/implementation-guides/pointers/testing/test-cases/string-storage","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/test-cases/struct-storage","path":"/format/docs/implementation-guides/pointers/testing/test-cases/struct-storage","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/test-cases/test-cases","path":"/format/docs/implementation-guides/pointers/testing/test-cases/","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/test-cases/uint256-array-memory","path":"/format/docs/implementation-guides/pointers/testing/test-cases/uint256-array-memory","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/testing/testing","path":"/format/docs/implementation-guides/pointers/testing/","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/types/cursors","path":"/format/docs/implementation-guides/pointers/types/cursors","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/types/data-and-machines","path":"/format/docs/implementation-guides/pointers/types/data-and-machines","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/types/pointer-types","path":"/format/docs/implementation-guides/pointers/types/pointer-types","sidebar":"docsSidebar"},{"id":"implementation-guides/pointers/types/types","path":"/format/docs/implementation-guides/pointers/types/","sidebar":"docsSidebar"},{"id":"known-challenges","path":"/format/docs/known-challenges","sidebar":"docsSidebar"},{"id":"overview","path":"/format/docs/overview","sidebar":"docsSidebar"},{"id":"sketches/layout","path":"/format/docs/sketches/layout","sidebar":"docsSidebar"},{"id":"sketches/prototype","path":"/format/docs/sketches/prototype","sidebar":"docsSidebar"},{"id":"/category/prototype-sketches","path":"/format/docs/category/prototype-sketches","sidebar":"docsSidebar"}],"draftIds":[],"sidebars":{"docsSidebar":{"link":{"path":"/format/docs/overview","label":"overview"}}}}],"breadcrumbs":true},"spec":{"path":"/format/spec","versions":[{"name":"current","label":"Next","isLast":true,"path":"/format/spec","mainDocId":"overview","docs":[{"id":"data/hex","path":"/format/spec/data/hex","sidebar":"docsSidebar"},{"id":"data/overview","path":"/format/spec/data/overview","sidebar":"docsSidebar"},{"id":"data/unsigned","path":"/format/spec/data/unsigned","sidebar":"docsSidebar"},{"id":"data/value","path":"/format/spec/data/value","sidebar":"docsSidebar"},{"id":"info/info","path":"/format/spec/info/","sidebar":"docsSidebar"},{"id":"info/overview","path":"/format/spec/info/overview","sidebar":"docsSidebar"},{"id":"info/resources","path":"/format/spec/info/resources","sidebar":"docsSidebar"},{"id":"materials/compilation","path":"/format/spec/materials/compilation","sidebar":"docsSidebar"},{"id":"materials/id","path":"/format/spec/materials/id","sidebar":"docsSidebar"},{"id":"materials/overview","path":"/format/spec/materials/overview","sidebar":"docsSidebar"},{"id":"materials/source","path":"/format/spec/materials/source","sidebar":"docsSidebar"},{"id":"materials/source-range","path":"/format/spec/materials/source-range","sidebar":"docsSidebar"},{"id":"overview","path":"/format/spec/overview","sidebar":"docsSidebar"},{"id":"pointer/collection/collection","path":"/format/spec/pointer/collection/","sidebar":"docsSidebar"},{"id":"pointer/collection/conditional","path":"/format/spec/pointer/collection/conditional","sidebar":"docsSidebar"},{"id":"pointer/collection/group","path":"/format/spec/pointer/collection/group","sidebar":"docsSidebar"},{"id":"pointer/collection/list","path":"/format/spec/pointer/collection/list","sidebar":"docsSidebar"},{"id":"pointer/collection/scope","path":"/format/spec/pointer/collection/scope","sidebar":"docsSidebar"},{"id":"pointer/concepts","path":"/format/spec/pointer/concepts","sidebar":"docsSidebar"},{"id":"pointer/expression","path":"/format/spec/pointer/expression","sidebar":"docsSidebar"},{"id":"pointer/overview","path":"/format/spec/pointer/overview","sidebar":"docsSidebar"},{"id":"pointer/pointer","path":"/format/spec/pointer/","sidebar":"docsSidebar"},{"id":"pointer/region/base","path":"/format/spec/pointer/region/base","sidebar":"docsSidebar"},{"id":"pointer/region/location/calldata","path":"/format/spec/pointer/region/location/calldata","sidebar":"docsSidebar"},{"id":"pointer/region/location/code","path":"/format/spec/pointer/region/location/code","sidebar":"docsSidebar"},{"id":"pointer/region/location/memory","path":"/format/spec/pointer/region/location/memory","sidebar":"docsSidebar"},{"id":"pointer/region/location/returndata","path":"/format/spec/pointer/region/location/returndata","sidebar":"docsSidebar"},{"id":"pointer/region/location/stack","path":"/format/spec/pointer/region/location/stack","sidebar":"docsSidebar"},{"id":"pointer/region/location/storage","path":"/format/spec/pointer/region/location/storage","sidebar":"docsSidebar"},{"id":"pointer/region/location/transient","path":"/format/spec/pointer/region/location/transient","sidebar":"docsSidebar"},{"id":"pointer/region/region","path":"/format/spec/pointer/region/","sidebar":"docsSidebar"},{"id":"pointer/region/scheme/segment","path":"/format/spec/pointer/region/scheme/segment","sidebar":"docsSidebar"},{"id":"pointer/region/scheme/slice","path":"/format/spec/pointer/region/scheme/slice","sidebar":"docsSidebar"},{"id":"pointer/template","path":"/format/spec/pointer/template","sidebar":"docsSidebar"},{"id":"program/concepts","path":"/format/spec/program/concepts","sidebar":"docsSidebar"},{"id":"program/context/code","path":"/format/spec/program/context/code","sidebar":"docsSidebar"},{"id":"program/context/context","path":"/format/spec/program/context/","sidebar":"docsSidebar"},{"id":"program/context/frame","path":"/format/spec/program/context/frame","sidebar":"docsSidebar"},{"id":"program/context/gather","path":"/format/spec/program/context/gather","sidebar":"docsSidebar"},{"id":"program/context/pick","path":"/format/spec/program/context/pick","sidebar":"docsSidebar"},{"id":"program/context/remark","path":"/format/spec/program/context/remark","sidebar":"docsSidebar"},{"id":"program/context/variables","path":"/format/spec/program/context/variables","sidebar":"docsSidebar"},{"id":"program/example","path":"/format/spec/program/example","sidebar":"docsSidebar"},{"id":"program/instruction","path":"/format/spec/program/instruction","sidebar":"docsSidebar"},{"id":"program/overview","path":"/format/spec/program/overview","sidebar":"docsSidebar"},{"id":"program/program","path":"/format/spec/program/","sidebar":"docsSidebar"},{"id":"type/base","path":"/format/spec/type/base","sidebar":"docsSidebar"},{"id":"type/complex/alias","path":"/format/spec/type/complex/alias","sidebar":"docsSidebar"},{"id":"type/complex/array","path":"/format/spec/type/complex/array","sidebar":"docsSidebar"},{"id":"type/complex/function","path":"/format/spec/type/complex/function","sidebar":"docsSidebar"},{"id":"type/complex/mapping","path":"/format/spec/type/complex/mapping","sidebar":"docsSidebar"},{"id":"type/complex/struct","path":"/format/spec/type/complex/struct","sidebar":"docsSidebar"},{"id":"type/complex/tuple","path":"/format/spec/type/complex/tuple","sidebar":"docsSidebar"},{"id":"type/concepts","path":"/format/spec/type/concepts","sidebar":"docsSidebar"},{"id":"type/elementary/address","path":"/format/spec/type/elementary/address","sidebar":"docsSidebar"},{"id":"type/elementary/bool","path":"/format/spec/type/elementary/bool","sidebar":"docsSidebar"},{"id":"type/elementary/bytes","path":"/format/spec/type/elementary/bytes","sidebar":"docsSidebar"},{"id":"type/elementary/contract","path":"/format/spec/type/elementary/contract","sidebar":"docsSidebar"},{"id":"type/elementary/enum","path":"/format/spec/type/elementary/enum","sidebar":"docsSidebar"},{"id":"type/elementary/fixed","path":"/format/spec/type/elementary/fixed","sidebar":"docsSidebar"},{"id":"type/elementary/int","path":"/format/spec/type/elementary/int","sidebar":"docsSidebar"},{"id":"type/elementary/string","path":"/format/spec/type/elementary/string","sidebar":"docsSidebar"},{"id":"type/elementary/ufixed","path":"/format/spec/type/elementary/ufixed","sidebar":"docsSidebar"},{"id":"type/elementary/uint","path":"/format/spec/type/elementary/uint","sidebar":"docsSidebar"},{"id":"type/overview","path":"/format/spec/type/overview","sidebar":"docsSidebar"},{"id":"type/type","path":"/format/spec/type/","sidebar":"docsSidebar"},{"id":"/category/elementary-types","path":"/format/spec/category/elementary-types","sidebar":"docsSidebar"},{"id":"/category/complex-types","path":"/format/spec/category/complex-types","sidebar":"docsSidebar"}],"draftIds":[],"sidebars":{"docsSidebar":{"link":{"path":"/format/spec/overview","label":"overview"}}}}],"breadcrumbs":true}},"project-code-plugin":{"default":{"packages":{"@ethdebug/format":{"sourceFiles":[{"filePath":"vitest.d.ts","text":"import \\"vitest\\";\\nimport type { DescribeSchemaOptions } from \\"./src/describe\\";\\n\\ninterface CustomMatchers<R = unknown> {\\n  toValidate(schemaOptions: DescribeSchemaOptions): R;\\n\\n  toSatisfy(received: any): R;\\n  toSatisfyAll(values: readonly any[]): R;\\n}\\n\\ndeclare module \\"vitest\\" {\\n  interface Assertion<T = any> extends CustomMatchers<T> {}\\n\\n  interface AsymmetricMatchersContaining extends CustomMatchers {}\\n}\\n"},{"filePath":"src/describe.ts","text":"import * as YAML from \\"yaml\\";\\n\\nimport { schemaYamls } from \\"./schemas/yamls\\";\\n\\nimport type { JSONSchema as JSONSchemaTyped } from \\"json-schema-typed/draft-2020-12\\"\\n\\nexport type JSONSchema = Exclude<JSONSchemaTyped, boolean>;\\n\\nexport interface DescribeSchemaOptions<\\n  S extends SchemaReference = SchemaReference\\n> {\\n  schema: S;\\n  pointer?: SchemaPointer;\\n};\\n\\nexport interface SchemaInfo {\\n  id?: string; // root ID only\\n  pointer?: SchemaPointer; // normalized from root ID\\n  yaml: string;\\n  schema: JSONSchema;\\n  rootSchema: JSONSchema;\\n}\\n\\nconst parseOptions = {\\n  // merge keys were removed from YAML 1.2 spec but used by these schemas\\n  merge: true\\n};\\n\\nexport function describeSchema({\\n  schema,\\n  pointer\\n}: DescribeSchemaOptions): SchemaInfo {\\n  if (typeof pointer === \\"string\\" && !pointer.startsWith(\\"#\\")) {\\n    throw new Error(\\"`pointer` option must start with \'#\'\\");\\n  }\\n\\n  const pointerOptions = pointer\\n    ? { pointer }\\n    : {};\\n\\n  if (referencesId(schema)) {\\n    return describeSchemaById({\\n      schema: typeof schema === \\"object\\"\\n        ? schema\\n        : { id: schema },\\n      ...pointerOptions\\n    });\\n  }\\n\\n  if (referencesYaml(schema)) {\\n    return describeSchemaByYaml({\\n      schema,\\n      ...pointerOptions\\n    });\\n  }\\n\\n  return describeSchemaByObject({\\n    schema,\\n    ...pointerOptions\\n  });\\n}\\n\\nfunction describeSchemaById({\\n  schema: { id: referencedId },\\n  pointer: relativePointer\\n}: DescribeSchemaOptions<SchemaById>): SchemaInfo {\\n  // we need to handle the case where the schema is referenced by an ID\\n  // with a pointer specified, possibly with a separate `pointer` field too\\n  const [id, rawReferencedPointer] = referencedId.split(\\"#\\");\\n\\n  const pointer = rawReferencedPointer\\n    ? joinSchemaPointers([`#${rawReferencedPointer}`, relativePointer])\\n    : relativePointer;\\n\\n  const rootYaml = schemaYamls[id]\\n  if (!rootYaml) {\\n    throw new Error(`Unknown schema with $id \\"${id}\\"`);\\n  }\\n\\n  const yaml = pointToYaml(rootYaml, pointer);\\n\\n  const schema = YAML.parse(yaml, parseOptions);\\n  const rootSchema = YAML.parse(rootYaml, parseOptions);\\n\\n  return {\\n    id,\\n    ...(pointer ? { pointer } : {}),\\n    yaml,\\n    schema,\\n    rootSchema\\n  }\\n}\\n\\nfunction describeSchemaByYaml({\\n  schema: { yaml: referencedYaml },\\n  pointer\\n}: DescribeSchemaOptions<SchemaByYaml>): SchemaInfo {\\n  const yaml = pointToYaml(referencedYaml, pointer);\\n\\n  const schema = YAML.parse(yaml, parseOptions);\\n  const rootSchema = YAML.parse(referencedYaml, parseOptions);\\n\\n  const id = schema.$id;\\n\\n  if (id) {\\n    return {\\n      id,\\n      ...(pointer ? { pointer } : {}),\\n      yaml,\\n      schema,\\n      rootSchema\\n    }\\n  } else {\\n    return {\\n      ...(pointer ? { pointer } : {}),\\n      yaml,\\n      schema,\\n      rootSchema\\n    }\\n  }\\n}\\n\\nfunction describeSchemaByObject({\\n  schema: rootSchema,\\n  pointer\\n}: DescribeSchemaOptions<object>): SchemaInfo {\\n  const rootYaml = YAML.stringify(rootSchema);\\n\\n  const yaml = pointToYaml(rootYaml, pointer);\\n\\n  const schema = YAML.parse(yaml, parseOptions);\\n\\n  const id = schema.$id;\\n\\n  if (id) {\\n    return {\\n      id,\\n      ...(pointer ? { pointer } : {}),\\n      yaml,\\n      schema,\\n      rootSchema\\n    }\\n  } else {\\n    return {\\n      ...(pointer ? { pointer } : {}),\\n      yaml,\\n      schema,\\n      rootSchema\\n    }\\n  }\\n}\\n\\nfunction joinSchemaPointers(\\n  pointers: (SchemaPointer | undefined)[]\\n): SchemaPointer | undefined {\\n  const joined = pointers\\n    .filter((pointer): pointer is SchemaPointer => typeof pointer === \\"string\\")\\n    .map(pointer => pointer.slice(1))\\n    .join(\\"\\");\\n\\n  if (joined.length === 0) {\\n    return;\\n  }\\n\\n  return `#${joined}`;\\n}\\n\\nfunction pointToYaml(\\n  yaml: string,\\n  pointer?: SchemaPointer\\n): string {\\n  if (!pointer) {\\n    return yaml;\\n  }\\n\\n  let doc = YAML.parseDocument(yaml);\\n\\n  // slice(2) because we want to remove leading #/\\n  for (const step of pointer.slice(2).split(\\"/\\")) {\\n    // @ts-ignore\\n    doc = doc.get(step, true);\\n\\n    if (!doc) {\\n      throw new Error(`Pointer ${pointer} not found in schema`);\\n    }\\n  }\\n\\n  return YAML.stringify(doc);\\n}\\n\\ntype Impossible<K extends keyof any> = {\\n  [P in K]: never;\\n};\\n\\ntype NoExtraProperties<T, U extends T = T> =\\n  & U\\n  & Impossible<Exclude<keyof U, keyof T>>;\\n\\nexport type SchemaPointer = `#${string}`;\\n\\nexport type SchemaReference =\\n  | SchemaId\\n  | SchemaById\\n  | SchemaByYaml\\n  | object /* JSONSchema object itself */;\\n\\nexport type SchemaId = string;\\n\\nexport type SchemaById = NoExtraProperties<{\\n  id: SchemaId;\\n}>;\\n\\nexport type SchemaByYaml = NoExtraProperties<{\\n  yaml: string;\\n}>;\\n\\nexport function referencesId(\\n  schema: SchemaReference\\n): schema is SchemaId | SchemaById {\\n  return (\\n    typeof schema === \\"string\\" ||\\n    (Object.keys(schema).length === 1 && \\"id\\" in schema)\\n  );\\n}\\n\\nexport function referencesYaml(\\n  schema: SchemaReference\\n): schema is SchemaByYaml {\\n  return typeof schema === \\"object\\" &&\\n    Object.keys(schema).length === 1 && \\"yaml\\" in schema;\\n}\\n"},{"filePath":"src/index.ts","text":"export * from \\"./describe\\";\\nexport { schemas, schemaIds, type Schema } from \\"./schemas\\";\\n\\nexport * from \\"./types\\";\\n"},{"filePath":"test/extensions.ts","text":"import { schemas } from \\"../src\\";\\n\\nexport const schemaExtensions: {\\n  [schemaId: string]: {\\n    extends: Set<string /* fully qualified base schema ID */>;\\n  }\\n} = {\\n  \\"schema:ethdebug/format/type/base#/$defs/ElementaryType\\": {\\n    extends: new Set([\\n      \\"schema:ethdebug/format/type/base\\"\\n    ])\\n  },\\n  \\"schema:ethdebug/format/type/base#/$defs/ComplexType\\": {\\n    extends: new Set([\\n      \\"schema:ethdebug/format/type/base\\"\\n    ])\\n  },\\n  \\"schema:ethdebug/format/type\\": {\\n    extends: new Set([\\n      \\"schema:ethdebug/format/type/base\\"\\n    ])\\n  },\\n  \\"schema:ethdebug/format/type/elementary\\": {\\n    extends: new Set([\\n      \\"schema:ethdebug/format/type\\",\\n      \\"schema:ethdebug/format/type/base#/$defs/ElementaryType\\"\\n    ])\\n  },\\n  \\"schema:ethdebug/format/type/elementary/uint\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/elementary\\"])\\n  },\\n  \\"schema:ethdebug/format/type/elementary/int\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/elementary\\"])\\n  },\\n  \\"schema:ethdebug/format/type/elementary/bool\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/elementary\\"])\\n  },\\n  \\"schema:ethdebug/format/type/elementary/bytes\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/elementary\\"])\\n  },\\n  \\"schema:ethdebug/format/type/elementary/string\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/elementary\\"])\\n  },\\n  \\"schema:ethdebug/format/type/elementary/ufixed\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/elementary\\"])\\n  },\\n  \\"schema:ethdebug/format/type/elementary/fixed\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/elementary\\"])\\n  },\\n  \\"schema:ethdebug/format/type/elementary/address\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/elementary\\"])\\n  },\\n  \\"schema:ethdebug/format/type/elementary/contract\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/elementary\\"])\\n  },\\n  \\"schema:ethdebug/format/type/elementary/enum\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/elementary\\"])\\n  },\\n  \\"schema:ethdebug/format/type/complex\\": {\\n    extends: new Set([\\n      \\"schema:ethdebug/format/type\\",\\n      \\"schema:ethdebug/format/type/base#/$defs/ComplexType\\"\\n    ])\\n  },\\n  \\"schema:ethdebug/format/type/complex/alias\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/complex\\"])\\n  },\\n  \\"schema:ethdebug/format/type/complex/tuple\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/complex\\"])\\n  },\\n  \\"schema:ethdebug/format/type/complex/array\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/complex\\"])\\n  },\\n  \\"schema:ethdebug/format/type/complex/mapping\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/complex\\"])\\n  },\\n  \\"schema:ethdebug/format/type/complex/struct\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/complex\\"])\\n  },\\n  \\"schema:ethdebug/format/type/complex/function\\": {\\n    extends: new Set([\\"schema:ethdebug/format/type/complex\\"])\\n  },\\n}\\n"},{"filePath":"test/guards.ts","text":"import { expect, describe, it } from \\"vitest\\";\\n\\nimport { type DescribeSchemaOptions, describeSchema } from \\"../src\\";\\n\\nexport interface SchemaGuard extends DescribeSchemaOptions {\\n  guard(value: unknown): boolean;\\n}\\n\\nexport const testSchemaGuards = (\\n  namespace: string,\\n  schemaGuards: SchemaGuard[]\\n) => {\\n  describe(`type guards for ${namespace} schemas`, () => {\\n    for (const { guard, ...describeSchemaOptions } of schemaGuards) {\\n      const {\\n        id,\\n        pointer,\\n        schema: {\\n          examples = []\\n        }\\n      } = describeSchema(describeSchemaOptions);\\n\\n      const schemaName = `${id?.slice(\\"schema:\\".length) || \\"\\"}${pointer || \\"\\"}`;\\n\\n      it(`recognize examples from ${schemaName} schema`, () => {\\n        expect(guard).toSatisfyAll(examples);\\n      });\\n    }\\n  });\\n};\\n"},{"filePath":"test/hyperjump.ts","text":"import { expect } from \\"vitest\\";\\nimport {\\n  addSchema,\\n  validate,\\n  setMetaSchemaOutputFormat,\\n} from \\"@hyperjump/json-schema/draft-2020-12\\";\\n// @ts-ignore\\nimport { BASIC } from \\"@hyperjump/json-schema/experimental\\";\\nimport { bundle } from \\"@hyperjump/json-schema/bundle\\";\\nimport * as YAML from \\"yaml\\";\\nimport indentString from \\"indent-string\\";\\nimport { highlight } from \\"cli-highlight\\";\\n\\nimport {\\n  describeSchema,\\n  type DescribeSchemaOptions\\n} from \\"../src/describe\\";\\n\\nimport { schemas } from \\"../src/schemas\\";\\n\\nconst main = () => {\\n  setMetaSchemaOutputFormat(BASIC);\\n\\n  for (const schema of Object.values(schemas)) {\\n    addSchema(schema as any);\\n  }\\n\\n  expect.extend({\\n    async toValidate(received: any, schemaOptions: DescribeSchemaOptions) {\\n      const { id, pointer, schema } = describeSchema(schemaOptions);\\n\\n      if (typeof id !== \\"string\\") {\\n        throw new Error(\\"Schema is not known to validator by ID\\");\\n      }\\n\\n      const schemaReference = pointer\\n        ? `${id}${pointer}`\\n        : id;\\n\\n      const schemaName =\\n        schema.title\\n          ? schema.title\\n          : schemaReference;\\n\\n      const output = await validate(schemaReference, received, BASIC);\\n\\n      const pass = output.valid;\\n\\n      return {\\n        pass,\\n        message: () => `expected input:\\\\n${\\n          indentString(\\n            highlight(YAML.stringify(received), { language: \\"yaml\\" }),\\n            2\\n          )\\n        }\\\\n${\\n          pass\\n            ? \\"not to be\\"\\n            : \\"to be\\"\\n        } valid ${schemaName}.${\\n          pass\\n            ? \\"\\"\\n            : `\\\\noutput:\\\\n${\\n                indentString(\\n                  highlight(YAML.stringify(output), { language: \\"yaml\\" }),\\n                  2\\n                )\\n              }`\\n        }`\\n      };\\n    }\\n  });\\n}\\n\\nmain();\\n"},{"filePath":"src/schemas/examples.test.ts","text":"import { expect, describe, it } from \\"vitest\\";\\n\\nimport { schemaExtensions } from \\"../../test/extensions\\";\\nimport { schemas } from \\".\\";\\nimport type { JSONSchema } from \\"../describe\\";\\n\\n// loads schemas into global hyperjump json schema validator\\nimport \\"../../test/hyperjump\\";\\n\\nconst idsOfSchemasAllowedToOmitExamples = new Set([\\n  \\"schema:ethdebug/format/type\\",\\n  \\"schema:ethdebug/format/type/complex\\",\\n  \\"schema:ethdebug/format/type/elementary\\",\\n  \\"schema:ethdebug/format/pointer/region\\",\\n  \\"schema:ethdebug/format/pointer/collection\\",\\n]);\\n\\ndescribe(\\"Examples\\", () => {\\n  for (const [id, schema] of Object.entries(schemas)) {\\n    testSchema({ id, schema });\\n  }\\n});\\n\\nfunction testSchema(options: {\\n  id: string;\\n  schema: JSONSchema\\n}): void {\\n  const { id, schema } = options;\\n\\n  const { title } = schema;\\n\\n  const exampledDefinitionNames = definitionsWithExamples(schema);\\n\\n  const hasOwnExamples = schema.examples && schema.examples.length > 0;\\n  const hasDefinitionsWithExamples = exampledDefinitionNames.length > 0;\\n\\n  const hasExamples = hasOwnExamples || hasDefinitionsWithExamples;\\n  const allowedToOmitExamples = idsOfSchemasAllowedToOmitExamples.has(id);\\n\\n  describe(title || id, () => {\\n    (\\n      allowedToOmitExamples\\n        ? it.skip\\n        : it\\n    )(\\"has examples\\", () => {\\n      expect(hasExamples).toBe(true);\\n    });\\n\\n    if (!hasExamples) {\\n      return;\\n    };\\n\\n    testExamples({ id, schema });\\n\\n    if (hasDefinitionsWithExamples) {\\n      describe(\\"$defs\\", () => {\\n        for (const name of exampledDefinitionNames) {\\n          testSchema({\\n            id: `${id}#/$defs/${name}`,\\n            schema: schema!.$defs![name] as JSONSchema\\n          })\\n        }\\n      });\\n    }\\n  });\\n}\\n\\nfunction testExamples(options: {\\n  id: string;\\n  schema: JSONSchema\\n}): void {\\n  const { id, schema } = options;\\n  const { examples = [] } = schema;\\n\\n  for (const [index, example] of examples.entries()) {\\n    describe(`example #${index}`, () => {\\n      it(`is a valid ${schema.title || id}`, async () => {\\n        await expect(example).toValidate({ schema: { id } });\\n      })\\n\\n      const testedParentSchemas = new Set<string>();\\n\\n      // function to test parent schemas recursively\\n      const testParentSchemas = (schemaId: string) => {\\n        testedParentSchemas.add(schemaId);\\n\\n        const parentSchemaIds = schemaExtensions[schemaId]?.extends || new Set<string>();\\n\\n        for (const parentSchemaId of parentSchemaIds) {\\n          if (testedParentSchemas.has(parentSchemaId)) {\\n            continue;\\n          }\\n\\n          it(`is also a valid ${parentSchemaId}`, async () => {\\n            await expect(example).toValidate({\\n              schema: { id: parentSchemaId }\\n            });\\n          });\\n\\n          // recurse to ancestors\\n          testParentSchemas(parentSchemaId);\\n        }\\n      };\\n\\n      testParentSchemas(id);\\n    });\\n  }\\n}\\n\\nfunction definitionsWithExamples(schema: JSONSchema): string[] {\\n  if (!(\\"$defs\\" in schema) || !schema.$defs) {\\n    return [];\\n  }\\n\\n  return Object.entries(schema.$defs)\\n    .flatMap(([name, definition]) => (\\n      typeof definition !== \\"boolean\\" &&\\n      \\"examples\\" in definition &&\\n      definition.examples &&\\n      definition.examples.length > 0\\n    )\\n      ? [name]\\n      : []\\n    )\\n}\\n"},{"filePath":"src/schemas/index.ts","text":"import { describeSchema } from \\"../describe\\";\\nimport { schemaYamls } from \\"./yamls\\";\\nexport type { Schema } from \\"./yamls\\";\\n\\nexport const schemaIds: string[] = Object.keys(schemaYamls);\\nexport const schemas = schemaIds\\n  .map(id => ({\\n    [id]: describeSchema({ schema: { id } }).schema\\n  }))\\n  .reduce((a, b) => ({ ...a, ...b }), {});\\n"},{"filePath":"src/schemas/validity.test.ts","text":"import { describe, it } from \\"vitest\\";\\nimport {\\n  type OutputUnit,\\n  validate,\\n  InvalidSchemaError,\\n} from \\"@hyperjump/json-schema/draft-2020-12\\";\\n\\nimport { schemas } from \\".\\";\\n\\n// loads schemas into global hyperjump json schema validator\\nimport \\"../../test/hyperjump\\";\\n\\nconst printErrors = (output: OutputUnit): string => output.errors!\\n  .map((error) => {\\n    if (!error.valid && !error.keyword.endsWith(\\"#validate\\")) {\\n      return `${\\n        error.instanceLocation\\n      } fails schema constraint ${\\n        error.absoluteKeywordLocation\\n      }`;\\n    }\\n  })\\n  .filter((message): message is string => !!message)\\n  .map(message => `  - ${message}`)\\n  .join(\\"\\\\n\\");\\n\\ndescribe(\\"Valid schemas\\", () => {\\n  for (const [id, schema] of Object.entries(schemas)) {\\n    it(`should include ${id}`, async () => {\\n      try {\\n        await validate(id);\\n      } catch (error) {\\n        if (!(error instanceof InvalidSchemaError)) {\\n          throw error;\\n        }\\n\\n        throw new Error(`Invalid schema. Errors:\\\\n${\\n          printErrors(error.output)\\n        }`);\\n      }\\n\\n    });\\n  }\\n});\\n"},{"filePath":"src/schemas/yamls.ts","text":"export type SchemaYamlsById = {\\n  [id: string]: string;\\n};\\n\\nexport const schemaYamls: SchemaYamlsById = {\\n  \\"schema:ethdebug/format/data/hex\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/data/hex\\\\\\"\\\\n\\\\ntitle: ethdebug/format/data/hex\\\\ndescription: |\\\\n  A `0x`-prefixed hexadecimal string. This value **must** contain at least one\\\\n  hexadecimal character (`0x` by itself is not allowed).\\\\n\\\\ntype: string\\\\npattern: \\\\\\"^0x[0-9a-fA-F]{1,}$\\\\\\"\\\\n\\\\nexamples:\\\\n  - \\\\\\"0x0000\\\\\\"\\\\n  - \\\\\\"0x1\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/data/unsigned\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/data/unsigned\\\\\\"\\\\n\\\\ntitle: ethdebug/format/data/unsigned\\\\ndescription: |\\\\n  A non-negative integer encoded as a JSON number.\\\\n\\\\ntype: integer\\\\nminimum: 0\\\\n\\\\nexamples:\\\\n  - 0\\\\n  - 100\\\\n\\",\\n  \\"schema:ethdebug/format/data/value\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/data/value\\\\\\"\\\\n\\\\ntitle: ethdebug/format/data/value\\\\ndescription: |\\\\n  A non-negative integer value, expressed either as a native JSON number or as\\\\n  a `0x`-prefixed hexadecimal string.\\\\n\\\\noneOf:\\\\n  - description: A non-negative integer literal\\\\n    $ref: \\\\\\"schema:ethdebug/format/data/unsigned\\\\\\"\\\\n\\\\n  - description: |\\\\n      A `0x`-prefixed hexadecimal string representing literal bytes or a number\\\\n      commonly displayed in base 16 (e.g. bytecode instruction offsets).\\\\n    $ref: \\\\\\"schema:ethdebug/format/data/hex\\\\\\"\\\\n\\\\nexamples:\\\\n  - \\\\\\"0x0000\\\\\\"\\\\n  - 2\\\\n\\",\\n  \\"schema:ethdebug/format/info/resources\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/info/resources\\\\\\"\\\\n\\\\ntitle: ethdebug/format/info/resources\\\\ndescription: |\\\\n  An object containing lookup tables for finding debugging resources by name.\\\\n\\\\ntype: object\\\\n\\\\nproperties:\\\\n  types:\\\\n    title: Types by name\\\\n    description: |\\\\n      A collection of types by name identifier.\\\\n    type: object\\\\n    additionalProperties:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type\\\\\\"\\\\n\\\\n  pointers:\\\\n    title: Pointer templates by name\\\\n    description: |\\\\n      A collection of pointer templates by name identifier.\\\\n    type: object\\\\n    additionalProperties:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/template\\\\\\"\\\\n\\\\n  compilation:\\\\n    $ref: \\\\\\"schema:ethdebug/format/materials/compilation\\\\\\"\\\\n\\\\n\\\\nrequired:\\\\n  - types\\\\n  - pointers\\\\n\\\\nexamples:\\\\n  - types:\\\\n      \\\\\\"struct__Coordinate\\\\\\":\\\\n        kind: struct\\\\n        contains:\\\\n          - name: x\\\\n            type:\\\\n              kind: uint\\\\n              bits: 128\\\\n          - name: y\\\\n            type:\\\\n              kind: uint\\\\n              bits: 128\\\\n        definition:\\\\n          name: Coordinate\\\\n          location:\\\\n            source:\\\\n              id: 5\\\\n            range:\\\\n              offset: 18\\\\n              length: 55\\\\n\\\\n    pointers:\\\\n      \\\\\\"struct__Coordinate__storage\\\\\\":\\\\n        expect:\\\\n          - contract_variable_slot__struct__Coordinate__storage\\\\n        for:\\\\n          group:\\\\n            - name: member__x__struct__Coordinate__storage\\\\n              location: storage\\\\n              slot: contract_variable_slot__struct__Coordinate__storage\\\\n              offset: 0\\\\n              length: 128\\\\n            - name: member__y__struct__Coordinate__storage\\\\n              location: storage\\\\n              slot: contract_variable_slot__struct__Coordinate__storage\\\\n              offset:\\\\n                $sum:\\\\n                  - .offset: member__x__struct__Coordinate__storage\\\\n                  - .length: member__x__struct__Coordinate__storage\\\\n              length: 128\\\\n\\",\\n  \\"schema:ethdebug/format/info\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/info\\\\\\"\\\\n\\\\ntitle: ethdebug/format/info\\\\ndescription: |\\\\n  Debugging information about a single compilation\\\\n\\\\ntype: object\\\\n\\\\n$ref: \\\\\\"schema:ethdebug/format/info/resources\\\\\\"\\\\n\\\\nproperties:\\\\n  programs:\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"schema:ethdebug/format/program\\\\\\"\\\\n    additionalItems:\\\\n      false\\\\n\\\\n  compilation:\\\\n    $ref: \\\\\\"schema:ethdebug/format/materials/compilation\\\\\\"\\\\n\\\\n\\\\nrequired:\\\\n  - compilation\\\\n  - programs\\\\n\\\\nexamples:\\\\n  - compilation:\\\\n      id: __301f3b6d85831638\\\\n      compiler:\\\\n        name: egc\\\\n        version: 0.2.3+commit.8b37fa7a\\\\n      settings:\\\\n        turbo: true\\\\n      sources:\\\\n        - id: 1\\\\n          path: \\\\\\"Escrow.eg\\\\\\"\\\\n          language: examplelang\\\\n          contents: |\\\\n            import { Asset } from std::asset::fungible;\\\\n\\\\n            type State = !slots[\\\\n              ready: bool,\\\\n              complete: bool,\\\\n\\\\n              beneficiary: address,\\\\n\\\\n              asset: Asset,\\\\n              amount: uint256,\\\\n\\\\n              canRemit: () -> bool,\\\\n            ]\\\\n\\\\n            @create\\\\n            func setup(\\\\n              beneficiary: address,\\\\n              asset: Asset,\\\\n              canRemit: () -> bool,\\\\n            ) -> State:\\\\n              return {\\\\n                ready = False,\\\\n                complete = False,\\\\n                beneficiary,\\\\n                asset,\\\\n                amount = 0,\\\\n                canRemit,\\\\n              }\\\\n\\\\n            @abi\\\\n            @state(self: State)\\\\n            @account(self)\\\\n            func deposit(depositor: address, amount: uint256):\\\\n              require(!self.ready)\\\\n              require(!self.complete)\\\\n\\\\n              # expects an existing allowance (also known as \\\\\\"approval\\\\\\")\\\\n              self.asset.transferFrom(depositor, self, amount)\\\\n\\\\n              self.amount = amount\\\\n              self.ready = True\\\\n\\\\n            @abi\\\\n            @state(self: State)\\\\n            func remit():\\\\n              require(self.ready)\\\\n              require(!self.complete)\\\\n\\\\n              require(self.canRemit())\\\\n\\\\n              asset.transfer(self.beneficiary, self.amount)\\\\n\\\\n              self.complete = True\\\\n\\\\n    types:\\\\n      # Define the State type structure\\\\n      State:\\\\n        kind: \\\\\\"struct\\\\\\"\\\\n        contains:\\\\n          - name: \\\\\\"ready\\\\\\"\\\\n            type:\\\\n              kind: \\\\\\"bool\\\\\\"\\\\n          - name: \\\\\\"complete\\\\\\"\\\\n            type:\\\\n              kind: \\\\\\"bool\\\\\\"\\\\n          - name: \\\\\\"beneficiary\\\\\\"\\\\n            type:\\\\n              kind: \\\\\\"address\\\\\\"\\\\n          - name: \\\\\\"asset\\\\\\"\\\\n            type:\\\\n              kind: \\\\\\"struct\\\\\\"\\\\n              contains:\\\\n                - name: \\\\\\"address\\\\\\"\\\\n                  type:\\\\n                    kind: \\\\\\"address\\\\\\"\\\\n          - name: \\\\\\"amount\\\\\\"\\\\n            type:\\\\n              kind: \\\\\\"uint\\\\\\"\\\\n              bits: 256\\\\n          - name: \\\\\\"canRemit\\\\\\"\\\\n            type:\\\\n              kind: \\\\\\"function\\\\\\"\\\\n              internal: true\\\\n              contains:\\\\n                parameters:\\\\n                  type:\\\\n                    kind: \\\\\\"tuple\\\\\\"\\\\n                    contains: []\\\\n                returns:\\\\n                  type:\\\\n                    kind: \\\\\\"bool\\\\\\"\\\\n\\\\n    pointers:\\\\n      # Define storage layout for the State struct\\\\n      State_storage:\\\\n        expect: [\\\\\\"slot\\\\\\"]\\\\n        for:\\\\n          group:\\\\n            - name: \\\\\\"ready\\\\\\"\\\\n              location: \\\\\\"storage\\\\\\"\\\\n              slot: \\\\\\"slot\\\\\\"\\\\n              offset: 0\\\\n              length: 1\\\\n            - name: \\\\\\"complete\\\\\\"\\\\n              location: \\\\\\"storage\\\\\\"\\\\n              slot: \\\\\\"slot\\\\\\"\\\\n              offset: 1\\\\n              length: 1\\\\n            - name: \\\\\\"beneficiary\\\\\\"\\\\n              location: \\\\\\"storage\\\\\\"\\\\n              slot: { \\\\\\"$sum\\\\\\": [\\\\\\"slot\\\\\\", 1] }\\\\n            - name: \\\\\\"asset\\\\\\"\\\\n              location: \\\\\\"storage\\\\\\"\\\\n              slot: { \\\\\\"$sum\\\\\\": [\\\\\\"slot\\\\\\", 2] }\\\\n            - name: \\\\\\"amount\\\\\\"\\\\n              location: \\\\\\"storage\\\\\\"\\\\n              slot: { \\\\\\"$sum\\\\\\": [\\\\\\"slot\\\\\\", 3] }\\\\n            - name: \\\\\\"canRemit\\\\\\"\\\\n              location: \\\\\\"storage\\\\\\"\\\\n              slot: { \\\\\\"$sum\\\\\\": [\\\\\\"slot\\\\\\", 4] }\\\\n\\\\n    programs:\\\\n      - contract:\\\\n          name: \\\\\\"Escrow\\\\\\"\\\\n          definition:\\\\n            source:\\\\n              id: 1\\\\n            range:\\\\n              offset: 0\\\\n              length: 891\\\\n        environment: \\\\\\"create\\\\\\"\\\\n        instructions:\\\\n          - offset: 0\\\\n            operation:\\\\n              mnemonic: \\\\\\"PUSH1\\\\\\"\\\\n              arguments: [\\\\\\"0x80\\\\\\"]\\\\n            context:\\\\n              code:\\\\n                source:\\\\n                  id: 1\\\\n                range:\\\\n                  offset: 891\\\\n                  length: 20\\\\n\\\\n\\",\\n  \\"schema:ethdebug/format/materials/compilation\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/materials/compilation\\\\\\"\\\\n\\\\ntitle: ethdebug/format/materials/compilation\\\\ndescription: |\\\\n  An object representing a single invocation of a compiler.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  id:\\\\n    description: |\\\\n      Compilation ID\\\\n\\\\n      This value **should** be globally-unique and generated only from the\\\\n      compiler inputs (settings, sources, etc.); the same compiler inputs/\\\\n      settings **should** produce the same identifier.\\\\n\\\\n    $ref: \\\\\\"schema:ethdebug/format/materials/id\\\\\\"\\\\n\\\\n  compiler:\\\\n    type: object\\\\n    title: Compiler name and version\\\\n    properties:\\\\n      name:\\\\n        type: string\\\\n        description: Compiler name\\\\n\\\\n      version:\\\\n        type: string\\\\n        description: |\\\\n          Compiler version.\\\\n\\\\n          This value **should** be specified using the most detailed version\\\\n          representation available, i.e., including source control hash and\\\\n          compiler build information whenever possible.\\\\n\\\\n    required:\\\\n      - name\\\\n      - version\\\\n\\\\n    examples:\\\\n      - name: lllc\\\\n        version: 0.4.12-develop.2017.6.27+commit.b83f77e0.Linux.g++\\\\n\\\\n  settings:\\\\n    description: |\\\\n      Compiler settings in a format native to the compiler.\\\\n\\\\n      For compilers whose settings includes full source representations, this\\\\n      field **should** be specified in such a way that avoids large data\\\\n      redundancies (e.g. if compiler settings contain full source\\\\n      representations, then this field would significantly duplicate the\\\\n      information represented by the `sources` field in this object).\\\\n\\\\n      In situations where settings information duplicates information\\\\n      represented elsewhere in **ethdebug/format**, compilers **may** adopt\\\\n      any reasonable strategy, e.g.:\\\\n        - omit duplications partially (leaving the rest of the settings\\\\n          intact)\\\\n        - omit this field entirely\\\\n        - specify this field as a hash of the full settings\\\\n          representation (with the expectation that users of this format will\\\\n          have access to the full representation by some other means)\\\\n\\\\n    allOf:\\\\n      - true\\\\n\\\\n  sources:\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"schema:ethdebug/format/materials/source\\\\\\"\\\\n\\\\nrequired:\\\\n  - id\\\\n  - compiler\\\\n  - sources\\\\n\\\\nexamples:\\\\n  - id: foo\\\\n    compiler:\\\\n      name: lllc\\\\n      version: 0.4.12-develop.2017.6.27+commit.b83f77e0.Linux.g++\\\\n    sources:\\\\n      - id: 0\\\\n        path: stdin\\\\n        contents: |\\\\n          (add 1 (mul 2 (add 3 4)))\\\\n        language: LLL\\\\n\\",\\n  \\"schema:ethdebug/format/materials/id\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/materials/id\\\\\\"\\\\n\\\\ntitle: ethdebug/format/materials/id\\\\ndescription: An opaque external ID (likely generated by compiler)\\\\n\\\\ntype:\\\\n  - number\\\\n  - string\\\\n\\\\nexamples:\\\\n  - 5\\\\n  - \\\\\\"five\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/materials/reference\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/materials/reference\\\\\\"\\\\n\\\\ntitle: ethdebug/format/materials/reference\\\\ndescription: A reference to an external resource by ID\\\\n\\\\ntype: object\\\\nproperties:\\\\n  id:\\\\n    $ref: \\\\\\"schema:ethdebug/format/materials/id\\\\\\"\\\\n\\\\n  type:\\\\n    enum:\\\\n      - compilation\\\\n      - source\\\\n\\\\nrequired: [id]\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nexamples:\\\\n  - id: 1\\\\n\\",\\n  \\"schema:ethdebug/format/materials/source-range\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/materials/source-range\\\\\\"\\\\n\\\\ntitle: ethdebug/format/materials/source-range\\\\ndescription: |\\\\n  A range of bytes in a particular source.\\\\n\\\\n  Note that this refers to the bytes range in the original character encoding\\\\n  for the source, not the character encoding used for strings in this JSON\\\\n  format (UTF-8). For compilers that support input sources in encodings other\\\\n  than this format\'s transmission encoding, compilers **must** address source\\\\n  ranges in this original encoding, and debuggers **must** re-encode source\\\\n  contents obtained from this format _before_ performing any range addressing.\\\\n\\\\n  (Compilers that only accept UTF-8 or ASCII are naturally exempt from this\\\\n  concern.)\\\\n\\\\ntype: object\\\\nproperties:\\\\n  compilation:\\\\n    title: Compilation reference by ID\\\\n    $ref: \\\\\\"schema:ethdebug/format/materials/reference\\\\\\"\\\\n\\\\n  source:\\\\n    title: Source reference by ID\\\\n    $ref: \\\\\\"schema:ethdebug/format/materials/reference\\\\\\"\\\\n\\\\n  range:\\\\n    title: Bytes range within source contents\\\\n    description: |\\\\n      Ranges that span the entire source contents **may** omit this field\\\\n      as a shorthand. This field is otherwise **required**.\\\\n    type: object\\\\n    properties:\\\\n      offset:\\\\n        description: |\\\\n          Byte offset at beginning of range.\\\\n        $ref: \\\\\\"schema:ethdebug/format/data/value\\\\\\"\\\\n\\\\n      length:\\\\n        description: Number of bytes contained in range\\\\n        $ref: \\\\\\"schema:ethdebug/format/data/value\\\\\\"\\\\n\\\\n    unevaluatedProperties: false\\\\n\\\\n    required:\\\\n      - offset\\\\n      - length\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nrequired:\\\\n  - source\\\\n\\\\nexamples:\\\\n  - source:\\\\n      id: 5\\\\n    range:\\\\n      offset: 20\\\\n      length: 100\\\\n\\",\\n  \\"schema:ethdebug/format/materials/source\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/materials/source\\\\\\"\\\\n\\\\ntitle: ethdebug/format/materials/source\\\\ndescription: |\\\\n  An object representing one unit of compiler input, the raw text contents and\\\\n  identifying metadata (such as file path) that were given to the compiler as\\\\n  part of a compilation.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  id:\\\\n    description: |\\\\n      Source identifier. This field **must** be unique for all sources\\\\n      within a single compiler invocation (compilation).\\\\n    $ref: \\\\\\"schema:ethdebug/format/materials/id\\\\\\"\\\\n\\\\n  path:\\\\n    type: string\\\\n    description: |\\\\n      Hierarchical file-system-like path to this source. This value may\\\\n      be an absolute path, a path relative to some root directory, a path\\\\n      to some resource within a package, etc.\\\\n\\\\n      This value does not need to correspond to any file on disk (either\\\\n      physical or virtual), and might instead refer to a path identifier\\\\n      for a source that was generated by a compiler or other development tool.\\\\n\\\\n      This format makes no specific restrictions on how paths should be\\\\n      specified (e.g., no restriction on path separators, etc.), other than\\\\n      that values for this field should match what users observe elsewhere for\\\\n      the inputs/outputs of this particular compiler invocation.\\\\n\\\\n      If no path information is available for a particular source, e.g. if the\\\\n      source was provided to the compiler via shell standard input, this field\\\\n      should indicate that somehow (e.g., specifying `\\\\\\"path\\\\\\": \\\\\\"stdin\\\\\\"` or\\\\n      similar).\\\\n\\\\n      This field\'s value **should** be unique across all sources within the\\\\n      same compilation.\\\\n\\\\n  contents:\\\\n    description: |\\\\n      The full contents of the source, possibly re-encoded as UTF-8 to\\\\n      match parent JSON encoding.\\\\n\\\\n      In cases where input source used a different encoding, this object\\\\n      **must** also specify an `encoding` property to indicate the\\\\n      encoding originally used. Where relevant, debuggers **must** also\\\\n      convert these `contents` back to the specified original encoding so\\\\n      as to match code author expectations.\\\\n\\\\n    type: string\\\\n\\\\n  encoding:\\\\n    description: |\\\\n      Character encoding of original source `contents`. This property\\\\n      is **required** if this encoding does not match the JSON transmission\\\\n      encoding (UTF-8), since the value of the `contents` property will\\\\n      represent the text of the source of this JSON encoding.\\\\n\\\\n      This property **must not** appear in objects that do not specify\\\\n      a `contents` property.\\\\n\\\\n    type: string\\\\n\\\\n  language:\\\\n    description: |\\\\n      The high-level language that the source contents are written in.\\\\n\\\\n    type: string\\\\n\\\\nrequired:\\\\n  - id\\\\n  - path\\\\n  - contents\\\\n  - language\\\\n\\\\nexamples:\\\\n  - id: 5\\\\n    path: ./contracts/SimpleStorage.sol\\\\n    contents: |\\\\n      // SPDX-License-Identifier: GPL-3.0\\\\n      pragma solidity >=0.4.16 <0.9.0;\\\\n\\\\n      contract SimpleStorage {\\\\n          uint storedData;\\\\n\\\\n          function set(uint x) public {\\\\n              storedData = x;\\\\n          }\\\\n\\\\n          function get() public view returns (uint) {\\\\n              return storedData;\\\\n          }\\\\n      }\\\\n\\\\n    language: Solidity\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/collection/conditional\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/collection/conditional\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/collection/conditional\\\\ndescription: |\\\\n  A pointer defined conditionally based on the non-zero-ness of some expression\\\\n\\\\ntype: object\\\\n\\\\nproperties:\\\\n  if:\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n  then:\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer\\\\\\"\\\\n  else:\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer\\\\\\"\\\\n\\\\nrequired:\\\\n  - if\\\\n  - then\\\\n\\\\nadditionalProperties: false\\\\n\\\\nexamples:\\\\n  - if: 0\\\\n    then:\\\\n      location: memory\\\\n      offset: 0\\\\n      length: 1\\\\n    else:\\\\n      location: memory\\\\n      offset: 1\\\\n      length: 1\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/collection/group\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/collection/group\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/collection/group\\\\ndescription: |\\\\n  A composite collection of pointers\\\\ntype: object\\\\nproperties:\\\\n  group:\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer\\\\\\"\\\\n    minItems: 1\\\\nrequired:\\\\n  - group\\\\nadditionalProperties: false\\\\n\\\\nexamples:\\\\n  - group:\\\\n      - name: \\\\\\"data-pointer\\\\\\"\\\\n        location: stack\\\\n        slot: 0\\\\n      - location: memory\\\\n        offset:\\\\n          $read: \\\\\\"data-pointer\\\\\\"\\\\n        length: 32\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/collection/list\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/collection/list\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/collection/list\\\\ndescription: |\\\\n  An ordered list of pointers, indexed starting at zero.\\\\ntype: object\\\\n\\\\nproperties:\\\\n  list:\\\\n    type: object\\\\n    properties:\\\\n      count:\\\\n        description: |\\\\n          The size of the list that this collection represents.\\\\n        $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n      each:\\\\n        description: |\\\\n          An identifier name whose value as an expression resolves to the index\\\\n          in the list\\\\n        $ref: \\\\\\"schema:ethdebug/format/pointer/identifier\\\\\\"\\\\n      is:\\\\n        description: |\\\\n          The dynamically-generated pointer repeated as a list\\\\n        $ref: \\\\\\"schema:ethdebug/format/pointer\\\\\\"\\\\n    required:\\\\n      - count\\\\n      - each\\\\n      - is\\\\n\\\\nrequired:\\\\n  - list\\\\n\\\\nadditionalProperties: false\\\\n\\\\nexamples:\\\\n  - list:\\\\n      count: 5\\\\n      each: \\\\\\"index\\\\\\"\\\\n      is:\\\\n        location: memory\\\\n        offset:\\\\n          $read: \\\\\\"index\\\\\\"\\\\n        length: 1\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/collection/reference\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/collection/reference\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/collection/reference\\\\ndescription: |\\\\n  A pointer by named reference to a pointer template (defined elsewhere).\\\\n\\\\ntype: object\\\\n\\\\nproperties:\\\\n  template:\\\\n    title: Template identifier\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer/identifier\\\\\\"\\\\n\\\\nrequired:\\\\n  - template\\\\n\\\\nadditionalProperties: false\\\\n\\\\nexamples:\\\\n  - template: \\\\\\"string-storage-pointer\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/collection/scope\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/collection/scope\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/collection/scope\\\\ndescription: |\\\\n  A pointer defined with the aid of additional variables with values specified\\\\n  as expressions.\\\\n\\\\n  Variables are specified by the `define` field as an object mapping of\\\\n  expression by identifier. Variables are specified **in order**, so that\\\\n  later appearing variables may reference earlier ones in the same object.\\\\n\\\\ntype: object\\\\n\\\\nproperties:\\\\n  define:\\\\n    title: Mapping of variables to expression value\\\\n    type: object\\\\n    patternProperties:\\\\n      \\\\\\"^[a-zA-Z_\\\\\\\\\\\\\\\\-]+[a-zA-Z0-9$_\\\\\\\\\\\\\\\\-]*$\\\\\\":\\\\n        $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n    additionalProperties: false\\\\n  in:\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer\\\\\\"\\\\n\\\\nrequired:\\\\n  - define\\\\n  - in\\\\n\\\\nadditionalProperties: false\\\\n\\\\nexamples:\\\\n  - define:\\\\n      example-offset:\\\\n        $sum: [1, 2]\\\\n      example-length:\\\\n        $product: [2, $wordsize]\\\\n    in:\\\\n      name: example\\\\n      location: memory\\\\n      offset: example-offset\\\\n      length: example-length\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/collection\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/collection\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/collection\\\\ndescription: |\\\\n  A representation of a collection of pointers to data in the EVM\\\\ntype: object\\\\n\\\\nallOf:\\\\n  - oneOf:\\\\n      - required: [group]\\\\n      - required: [list]\\\\n      - required: [if]\\\\n      - required: [define]\\\\n      - required: [template]\\\\n\\\\n  - if:\\\\n      required: [group]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/collection/group\\\\\\"\\\\n\\\\n  - if:\\\\n      required: [list]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/collection/list\\\\\\"\\\\n\\\\n  - if:\\\\n      required: [if]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/collection/conditional\\\\\\"\\\\n\\\\n  - if:\\\\n      required: [define]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/collection/scope\\\\\\"\\\\n\\\\n  - if:\\\\n      required: [template]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/collection/reference\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/expression\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/expression\\\\ndescription: |\\\\n  A schema for describing expressions that evaluate to values.\\\\n\\\\noneOf:\\\\n  - $ref: \\\\\\"#/$defs/Literal\\\\\\"\\\\n  - $ref: \\\\\\"#/$defs/Variable\\\\\\"\\\\n  - $ref: \\\\\\"#/$defs/Constant\\\\\\"\\\\n  - $ref: \\\\\\"#/$defs/Arithmetic\\\\\\"\\\\n  - $ref: \\\\\\"#/$defs/Lookup\\\\\\"\\\\n  - $ref: \\\\\\"#/$defs/Read\\\\\\"\\\\n  - $ref: \\\\\\"#/$defs/Keccak256\\\\\\"\\\\n  - $ref: \\\\\\"#/$defs/Resize\\\\\\"\\\\n\\\\n$defs:\\\\n  Literal:\\\\n    title: Literal value\\\\n    description: |\\\\n      An unsigned number or a `0x`-prefixed string of hexadecimal digits\\\\n\\\\n    $ref: \\\\\\"schema:ethdebug/format/data/value\\\\\\"\\\\n\\\\n    examples:\\\\n      - 5\\\\n      - \\\\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\\\\"\\\\n\\\\n  Constant:\\\\n    title: Constant value\\\\n    type: string\\\\n    enum:\\\\n      - $wordsize\\\\n\\\\n  Variable:\\\\n    title: Variable identifier\\\\n    description: |\\\\n      A string that matches an identifier used in an earlier declaration of\\\\n      a scalar variable. This expression evaluates to the value of that\\\\n      variable.\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer/identifier\\\\\\"\\\\n\\\\n  Arithmetic:\\\\n    title: Arithmetic operation\\\\n    type: object\\\\n    properties:\\\\n      \\\\\\"$sum\\\\\\":\\\\n        description: |\\\\n          A list of expressions to be added together.\\\\n        $ref: \\\\\\"#/$defs/Operands\\\\\\"\\\\n      \\\\\\"$difference\\\\\\":\\\\n        description: |\\\\n          A tuple of two expressions where the second is to be subtracted from\\\\n          the first.\\\\n\\\\n          If the second operand is larger than the first, the result of this\\\\n          arithmetic operation is defined to equal zero (`0`).\\\\n\\\\n          (i.e., `{ \\\\\\"$difference\\\\\\": [a, b] }` equals `a` minus `b`.)\\\\n        $ref: \\\\\\"#/$defs/Operands\\\\\\"\\\\n        minItems: 2\\\\n        maxItems: 2\\\\n      \\\\\\"$product\\\\\\":\\\\n        description: |\\\\n          A list of expressions to be multiplied.\\\\n        $ref: \\\\\\"#/$defs/Operands\\\\\\"\\\\n      \\\\\\"$quotient\\\\\\":\\\\n        description: |\\\\n          A tuple of two expressions where the first corresponds to the\\\\n          dividend and the second corresponds to the divisor, for the purposes\\\\n          of doing integer division.\\\\n\\\\n          (i.e., `{ \\\\\\"$quotient\\\\\\": [a, b] }` equals `a` divided by `b`.)\\\\n        $ref: \\\\\\"#/$defs/Operands\\\\\\"\\\\n        minItems: 2\\\\n        maxItems: 2\\\\n      \\\\\\"$remainder\\\\\\":\\\\n        description: |\\\\n          A tuple of two expressions where the first corresponds to the\\\\n          dividend and the second corresponds to the divisor, for the purposes\\\\n          of computing the modular-arithmetic remainder.\\\\n\\\\n          (i.e., `{ \\\\\\"$remainder\\\\\\": [a, b] }` equals `a` mod `b`.)\\\\n        $ref: \\\\\\"#/$defs/Operands\\\\\\"\\\\n        minItems: 2\\\\n        maxItems: 2\\\\n    additionalProperties: false\\\\n    minProperties: 1\\\\n    maxProperties: 1\\\\n    examples:\\\\n      - \\\\\\"$sum\\\\\\": [5, 3, 4]\\\\n      - \\\\\\"$difference\\\\\\": [5, 3]\\\\n      - \\\\\\"$product\\\\\\": [5, 3, 0]\\\\n      - \\\\\\"$quotient\\\\\\": [5, 3]\\\\n      - \\\\\\"$remainder\\\\\\":\\\\n          - \\\\\\"$product\\\\\\":\\\\n            - 2\\\\n            - 2\\\\n            - 2\\\\n            - 2\\\\n          - 3\\\\n\\\\n  Operands:\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n\\\\n  Lookup:\\\\n    title: Lookup region definition\\\\n    description: |\\\\n      An object of the form `{ \\\\\\".<property-name>\\\\\\": \\\\\\"<region>\\\\\\" }`, to\\\\n      denote that this expression is equivalent to the defined value for\\\\n      the property named `<property-name>` inside the region referenced as\\\\n      `<region>`.\\\\n\\\\n      `<property-name>` **must** be a valid and present property on the\\\\n      corresponding region, or it **must** correspond to an optional property\\\\n      whose schema specifies a default value for that property.\\\\n    type: object\\\\n    patternProperties:\\\\n      \\\\\\"^\\\\\\\\\\\\\\\\.(offset|length|slot)$\\\\\\":\\\\n        $ref: \\\\\\"#/$defs/Reference\\\\\\"\\\\n    additionalProperties: false\\\\n    minProperties: 1\\\\n    maxProperties: 1\\\\n\\\\n    examples:\\\\n      - .offset: \\\\\\"array-count\\\\\\"\\\\n      - .length: \\\\\\"array-item\\\\\\"\\\\n      - .offset: $this\\\\n\\\\n\\\\n  Read:\\\\n    title: Read region bytes\\\\n    description: |\\\\n      An object of the form `{ \\\\\\"$read\\\\\\": \\\\\\"<region>\\\\\\" }`. The value of this\\\\n      expression equals the raw bytes present in the running machine state\\\\n      in the referenced region.\\\\n    type: object\\\\n    properties:\\\\n      $read:\\\\n        $ref: \\\\\\"#/$defs/Reference\\\\\\"\\\\n    required:\\\\n      - $read\\\\n    additionalProperties: false\\\\n    examples:\\\\n      - $read: \\\\\\"struct-start\\\\\\"\\\\n\\\\n  Reference:\\\\n    title: Region reference\\\\n    description: |\\\\n      A string value that **must** either be the `\\\\\\"name\\\\\\"` of at least one\\\\n      region declared with `{ \\\\\\"name\\\\\\": \\\\\\"<region>\\\\\\" }` previously in some root\\\\n      pointer representation, or it **must** be the literal value `\\\\\\"$this\\\\\\"`,\\\\n      which indicates a reference to the region containing this expression.\\\\n\\\\n      If more than one region is defined with the same name, resolution is\\\\n      defined as firstly resolving to the latest earlier sibling that declares\\\\n      the matching name, then secondly resolving to the parent if it matches,\\\\n      then to parent\'s earlier siblings, and so on.\\\\n    type: string\\\\n\\\\n    oneOf:\\\\n      - $ref: \\\\\\"schema:ethdebug/format/pointer/identifier\\\\\\"\\\\n      - const: \\\\\\"$this\\\\\\"\\\\n        description: |\\\\n          Indicates a reference to the region containing this expression.\\\\n\\\\n  Keccak256:\\\\n    title: Keccak256 hash\\\\n    description: |\\\\n      An object of the form `{ \\\\\\"$keccak256\\\\\\": [...values] }`, indicating that this\\\\n      expression evaluates to the Solidity-style keccak256 hash of the\\\\n      tightly-packed bytes encoded by `values`.\\\\n    type: object\\\\n    properties:\\\\n      $keccak256:\\\\n        title: Array of hashed values\\\\n        type: array\\\\n        items:\\\\n          $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n    additionalProperties: false\\\\n    required:\\\\n      - $keccak256\\\\n    examples:\\\\n      - $keccak256:\\\\n          - 0\\\\n          - \\\\\\"0x00\\\\\\"\\\\n\\\\n  Resize:\\\\n    title: Resize data\\\\n    description: |\\\\n      A resize operation expression is either an object of the form\\\\n      `{ \\\\\\"$sized<N>\\\\\\": <expression> }` or an object of the form\\\\n      `{ \\\\\\"$wordsized\\\\\\": <expression> }`, where `<expression>` is an expression\\\\n      whose value is to be resized, and, if applicable, where `<N>` is the\\\\n      smallest decimal representation of an unsigned integer.\\\\n\\\\n      This object\'s value is evaluated as follows, based on the bytes width of\\\\n      the value `<expression>` evaluates to and based on `<N>` (using the\\\\n      value of `\\\\\\"$wordsize\\\\\\"` for `<N>` in the case of the latter form above):\\\\n      - If the width equals `<N>`, this object evaluates to the same value as\\\\n        `<expression>` (equivalent to the identity function or no-op).\\\\n      - If the width is less than `<N>`, this object evaluates to the same value\\\\n        as `<expression>` but with additional zero-bytes (`0x00`) prepended on\\\\n        the left (most significant) side, such that the resulting bytes width\\\\n        equals `<N>`.\\\\n      - If the width exceeds `<N>`, this object evaluates to the same value\\\\n        as `<expression>` but with a number of bytes removed from the left\\\\n        (most significant) side until the bytes width equals `<N>`.\\\\n\\\\n      (These cases match the behavior that Solidity uses for resizing its\\\\n      `bytesN`/`uintN` types.)\\\\n    type: object\\\\n    oneOf:\\\\n      - title: Resize to literal number of bytes\\\\n        type: object\\\\n        patternProperties:\\\\n          \\\\\\"^\\\\\\\\\\\\\\\\$sized([1-9]+[0-9]*)$\\\\\\":\\\\n            $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n        additionalProperties: false\\\\n      - title: Resize to word-size\\\\n        type: object\\\\n        patternProperties:\\\\n          \\\\\\"^\\\\\\\\\\\\\\\\$wordsized$\\\\\\":\\\\n            $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n        additionalProperties: false\\\\n    minProperties: 1\\\\n    maxProperties: 1\\\\n    examples:\\\\n      - $sized2: \\\\\\"0x00\\\\\\" # 0x0000\\\\n      - $sized2: \\\\\\"0xffffff\\\\\\" # 0xffff\\\\n      - $wordsized: \\\\\\"0x00\\\\\\" # 0x0000000000000000000000000000000000000000000000000000000000000000\\\\n\\\\nexamples:\\\\n  - 0\\\\n  - $sum:\\\\n      - .offset: \\\\\\"array-start\\\\\\"\\\\n      - .length: \\\\\\"array-start\\\\\\"\\\\n      - 1\\\\n  - $keccak256:\\\\n      - 5\\\\n      - .offset: \\\\\\"array-start\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/identifier\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/identifier\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/identifier\\\\ndescription: |\\\\n  An identifier for use within the context of a root pointer\\\\ntype: string\\\\npattern: \\\\\\"^[a-zA-Z_\\\\\\\\\\\\\\\\-]+[a-zA-Z0-9$_\\\\\\\\\\\\\\\\-]*$\\\\\\"\\\\n\\\\nexamples:\\\\n  - a\\\\n  - a0\\\\n  - -$\\\\n  - __init__\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/region/base\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/region/base\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/region/base\\\\ndescription: |\\\\n  Common schema for all region schemas, regardless of `\\\\\\"location\\\\\\": ...`.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  name:\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer/identifier\\\\\\"\\\\n\\\\n  location:\\\\n    type: string\\\\n\\\\nrequired:\\\\n  - location\\\\n\\\\nexamples:\\\\n  - name: \\\\\\"array-item\\\\\\"\\\\n    location: memory\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/region/calldata\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/region/calldata\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/region/calldata\\\\ndescription: |\\\\n  A schema for representing a region of data in message calldata.\\\\n\\\\n  This schema is constructed by extending the base region schema\\\\n  and the schema for the slice addressing scheme.\\\\ntype: object\\\\n\\\\nallOf:\\\\n  - title: \'{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"calldata\\\\\\"\xa0}\' # note: whitespace chars are \\\\\\\\255 (nbsp)\\\\n    properties:\\\\n      location:\\\\n        const: calldata\\\\n\\\\n    required:\\\\n      - location\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/region/base\\\\\\"\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/scheme/slice\\\\\\"\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nexamples:\\\\n  - location: calldata\\\\n    offset: \\\\\\"0x04\\\\\\"\\\\n    length: 32\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/region/code\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/region/code\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/region/code\\\\ndescription: |\\\\n  A schema for representing a region of data in EVM bytecode.\\\\n\\\\n  This schema is constructed by extending the base region schema\\\\n  and the schema for the slice addressing scheme.\\\\ntype: object\\\\n\\\\nallOf:\\\\n  - title: \'{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"code\\\\\\"\xa0}\' # note: whitespace chars are \\\\\\\\255 (nbsp)\\\\n    properties:\\\\n      location:\\\\n        const: code\\\\n\\\\n    required:\\\\n      - location\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/region/base\\\\\\"\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/scheme/slice\\\\\\"\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nexamples:\\\\n  - location: code\\\\n    offset: \\\\\\"0x04\\\\\\"\\\\n    length: 32\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/region/memory\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/region/memory\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/region/memory\\\\ndescription: |\\\\n  A schema for representing a region of data in EVM memory. Pointer regions\\\\n  within memory represent a single/atomic sequence of byte locations.\\\\n\\\\n  This schema is constructed by extending the base region schema\\\\n  and the schema for the slice addressing scheme.\\\\ntype: object\\\\n\\\\nallOf:\\\\n  - title: \'{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"memory\\\\\\"\xa0}\' # note: whitespace chars are \\\\\\\\255 (nbsp)\\\\n    properties:\\\\n      location:\\\\n        const: memory\\\\n\\\\n    required:\\\\n      - location\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/region/base\\\\\\"\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/scheme/slice\\\\\\"\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nexamples:\\\\n  - location: memory\\\\n    offset: \\\\\\"0x04\\\\\\"\\\\n    length: 32\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/region/returndata\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/region/returndata\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/region/returndata\\\\ndescription: |\\\\n  A schema for representing a region of data in message returndata.\\\\n\\\\n  This schema is constructed by extending the base region schema\\\\n  and the schema for the slice addressing scheme.\\\\ntype: object\\\\n\\\\nallOf:\\\\n  - title: \'{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"returndata\\\\\\"\xa0}\' # note: whitespace chars are \\\\\\\\255 (nbsp)\\\\n    properties:\\\\n      location:\\\\n        const: returndata\\\\n\\\\n    required:\\\\n      - location\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/region/base\\\\\\"\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/scheme/slice\\\\\\"\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nexamples:\\\\n  - location: returndata\\\\n    offset: \\\\\\"0x04\\\\\\"\\\\n    length: 32\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/region/stack\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/region/stack\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/region/stack\\\\ndescription: |\\\\n  A schema for representing a region of data in the EVM.\\\\n\\\\n  Describes stack slots as number of positions from the top (at time of\\\\n  observation). Debuggers reading this information **should** immediately\\\\n  convert these positions to absolute positions from the bottom.\\\\n\\\\n  This schema is constructed by extending the base region schema\\\\n  and the schema for the segment addressing scheme.\\\\ntype: object\\\\n\\\\nallOf:\\\\n  - title: \'{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"stack\\\\\\"\xa0}\' # note: whitespace chars are \\\\\\\\255 (nbsp)\\\\n    properties:\\\\n      location:\\\\n        const: stack\\\\n\\\\n    required:\\\\n      - location\\\\n\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/region/base\\\\\\"\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/scheme/segment\\\\\\"\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nexamples:\\\\n  - location: stack\\\\n    slot: 0\\\\n  - location: stack\\\\n    slot: 1\\\\n    length:\\\\n      $product:\\\\n        - $wordsize\\\\n        - 2\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/region/storage\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/region/storage\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/region/storage\\\\ndescription: |\\\\n  A schema for representing a region of data in EVM storage.\\\\n\\\\n  This schema is constructed by extending the base region schema\\\\n  and the schema for the segment addressing scheme.\\\\ntype: object\\\\n\\\\nallOf:\\\\n  - title: \'{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"storage\\\\\\"\xa0}\' # note: whitespace chars are \\\\\\\\255 (nbsp)\\\\n    properties:\\\\n      location:\\\\n        const: storage\\\\n\\\\n    required:\\\\n      - location\\\\n\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/region/base\\\\\\"\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/scheme/segment\\\\\\"\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nexamples:\\\\n  - location: storage\\\\n    slot: \\\\\\"0x03\\\\\\"\\\\n  - location: storage\\\\n    slot: \\\\\\"0x06\\\\\\"\\\\n    length:\\\\n      $product:\\\\n        - $wordsize\\\\n        - 2\\\\n  - location: storage\\\\n    slot: \\\\\\"0x08\\\\\\"\\\\n    offset:\\\\n      $quotient:\\\\n        - $wordsize\\\\n        - 2\\\\n    length:\\\\n      $quotient:\\\\n        - $wordsize\\\\n        - 2\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/region/transient\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/region/transient\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/region/transient\\\\ndescription: |\\\\n  A schema for representing a region of data in EVM transient storage.\\\\n\\\\n  This schema is constructed by extending the base region schema\\\\n  and the schema for the segment addressing scheme.\\\\ntype: object\\\\n\\\\nallOf:\\\\n  - title: \'{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"transient\\\\\\"\xa0}\' # note: whitespace chars are \\\\\\\\255 (nbsp)\\\\n    properties:\\\\n      location:\\\\n        const: transient\\\\n\\\\n    required:\\\\n      - location\\\\n\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/region/base\\\\\\"\\\\n  - $ref: \\\\\\"schema:ethdebug/format/pointer/scheme/segment\\\\\\"\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nexamples:\\\\n  - location: transient\\\\n    slot: \\\\\\"0x03\\\\\\"\\\\n  - location: transient\\\\n    slot: \\\\\\"0x06\\\\\\"\\\\n    length:\\\\n      $product:\\\\n        - $wordsize\\\\n        - 2\\\\n  - location: transient\\\\n    slot: \\\\\\"0x08\\\\\\"\\\\n    offset:\\\\n      $quotient:\\\\n        - $wordsize\\\\n        - 2\\\\n    length:\\\\n      $quotient:\\\\n        - $wordsize\\\\n        - 2\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/region\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/region\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/region\\\\ndescription: |\\\\n  A representation of a region of data in the EVM\\\\ntype: object\\\\n\\\\nproperties:\\\\n  location:\\\\n    $ref: \\\\\\"#/$defs/Location\\\\\\"\\\\n\\\\n\\\\nallOf:\\\\n  - if:\\\\n      properties:\\\\n        location:\\\\n          const: stack\\\\n\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/region/stack\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        location:\\\\n          const: memory\\\\n\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/region/memory\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        location:\\\\n          const: storage\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/region/storage\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        location:\\\\n          const: calldata\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/region/calldata\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        location:\\\\n          const: returndata\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/region/returndata\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        location:\\\\n          const: transient\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/region/transient\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        location:\\\\n          const: code\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/region/code\\\\\\"\\\\n\\\\n$defs:\\\\n  Location:\\\\n    type: string\\\\n    enum:\\\\n      - stack\\\\n      - memory\\\\n      - storage\\\\n      - calldata\\\\n      - returndata\\\\n      - transient\\\\n      - code\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nexamples:\\\\n  - location: storage\\\\n    slot: \\\\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\\\\"\\\\n\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/scheme/segment\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/scheme/segment\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/scheme/segment\\\\ndescription: |\\\\n  An addressing scheme for pointing to a range of bytes in a data location\\\\n  arranged as individually-addressable word-sized slots.\\\\n\\\\n  **Note** that this addressing scheme permits addressing byte ranges that\\\\n  extend beyond the last byte of a particular slot, or even covering the range\\\\n  of multiple slots.\\\\n\\\\n  In such cases, this schema defines the range as the concatenation of bytes\\\\n  across slots such that the address of the first byte after the end of slot\\\\n  `p` (i.e., `{ \\\\\\"offset\\\\\\": \\\\\\"$wordsize\\\\\\" }`) is interpreted as the first byte of\\\\n  slot `p + 1`.\\\\n\\\\ntype: object\\\\n\\\\nproperties:\\\\n  slot:\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n  offset:\\\\n    description: |\\\\n      The starting byte index within the slot.\\\\n\\\\n      This field is **optional**. If unspecified, it has the default value of\\\\n      `0`, indicating that the segment begins at the start of the specified\\\\n      slot.\\\\n\\\\n      This field\'s expression must resolve to a value _n_ such that\\\\n      0&nbsp;\u2264&nbsp;_n_&nbsp;\\\\\\\\<&nbsp;`$wordsize` (i.e., the offset **must**\\\\n      begin inside the slot).\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n    default: 0\\\\n  length:\\\\n    description: |\\\\n      The length of the bytes range this segment represents.\\\\n\\\\n      This field is **optional**. If unspecified, its default value indicates\\\\n      that the segment ends at the end of the slot.\\\\n\\\\n      If this field has value larger than the default value, i.e., if the\\\\n      segment extends beyond the last byte in the slot, then this segment is\\\\n      defined to be the concatenation of the sequentially-addressed slot(s)\\\\n      following following the slot specified.\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n    default:\\\\n      $difference:\\\\n        - $wordsize\\\\n        - .offset: $this\\\\n\\\\nrequired:\\\\n  - slot\\\\n\\\\nexamples:\\\\n  - slot: 0\\\\n  - slot: 1\\\\n    length:\\\\n      $product:\\\\n        - $wordsize\\\\n        - 3\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/scheme/slice\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/scheme/slice\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/scheme/slice\\\\ndescription: |\\\\n  An addressing scheme for pointing to a range of sequential bytes inside\\\\n  a data location whose structure is that of a regular bytes array\\\\n  (i.e., where bytes are indexed by byte offset, with no concept of word).\\\\n\\\\ntype: object\\\\n\\\\nproperties:\\\\n  offset:\\\\n    description: |\\\\n      The index of the byte (starting from zero) in the data location where\\\\n      the slice begins.\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n  length:\\\\n    description: |\\\\n      The length of the slice in number of bytes.\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer/expression\\\\\\"\\\\n\\\\nrequired:\\\\n  - offset\\\\n  - length\\\\n\\\\nexamples:\\\\n  - offset: 0\\\\n    length: 32\\\\n\\",\\n  \\"schema:ethdebug/format/pointer/template\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer/template\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer/template\\\\ndescription: |\\\\n  A schema for representing a pointer defined in terms of some variables whose\\\\n  values are to be provided when invoking the template.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  expect:\\\\n    title: Template variables\\\\n    description: |\\\\n      An array of variable identifiers used in the definition of the\\\\n      pointer template.\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"schema:ethdebug/format/pointer/identifier\\\\\\"\\\\n    additionalItems: false\\\\n\\\\n  for:\\\\n    $ref: \\\\\\"schema:ethdebug/format/pointer\\\\\\"\\\\n\\\\nrequired:\\\\n  - expect\\\\n  - for\\\\n\\\\nadditionalProperties: false\\\\n\\\\nexamples:\\\\n  - expect: [\\\\\\"slot\\\\\\"]\\\\n    for:\\\\n      location: storage\\\\n      slot: \\\\\\"slot\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/pointer\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/pointer\\\\\\"\\\\n\\\\ntitle: ethdebug/format/pointer\\\\ndescription: |\\\\n  A schema for representing a pointer to a data position or a range of data\\\\n  positions in the EVM.\\\\n\\\\n  An **ethdebug/format/pointer** is either a single region or a structured\\\\n  collection of other pointers.\\\\n\\\\ntype: object\\\\n\\\\nif:\\\\n  required: [location]\\\\nthen:\\\\n  $ref: \\\\\\"schema:ethdebug/format/pointer/region\\\\\\"\\\\nelse:\\\\n  $ref: \\\\\\"schema:ethdebug/format/pointer/collection\\\\\\"\\\\n\\\\nexamples:\\\\n  - # example: a single particular storage slot\\\\n    location: storage\\\\n    slot: 2\\\\n\\\\n  - # example `uint256[] memory` allocation pointer\\\\n    define:\\\\n      \\\\\\"uint256-array-memory-pointer-slot\\\\\\": 0\\\\n    in:\\\\n      # this pointer composes an ordered list of other pointers\\\\n      group:\\\\n        # declare the first sub-pointer to be the \\\\\\"array-start\\\\\\" region of data\\\\n        # corresponding to the first item in the stack (at time of observation)\\\\n        - name: \\\\\\"array-start\\\\\\"\\\\n          location: stack\\\\n          slot: \\\\\\"uint256-array-memory-pointer-slot\\\\\\"\\\\n\\\\n        # declare the \\\\\\"array-count\\\\\\" region to be at the offset indicated by\\\\n        # the value at \\\\\\"array-start\\\\\\"\\\\n        - name: \\\\\\"array-count\\\\\\"\\\\n          location: memory\\\\n          offset:\\\\n            $read: \\\\\\"array-start\\\\\\"\\\\n          length: $wordsize\\\\n\\\\n        # thirdly, declare a sub-pointer that is a dynamic list whose size is\\\\n        # indicated by the value at \\\\\\"array-count\\\\\\", where each \\\\\\"item-index\\\\\\"\\\\n        # corresponds to a discrete \\\\\\"array-item\\\\\\" region\\\\n        - list:\\\\n            count:\\\\n              $read: \\\\\\"array-count\\\\\\"\\\\n            each: \\\\\\"item-index\\\\\\"\\\\n            is:\\\\n              name: \\\\\\"array-item\\\\\\"\\\\n              location: \\\\\\"memory\\\\\\"\\\\n              offset:\\\\n                # array items are positioned so that the item with index 0\\\\n                # immediately follows \\\\\\"array-count\\\\\\", and each subsequent item\\\\n                # immediately follows the previous.\\\\n                $sum:\\\\n                  - .offset: \\\\\\"array-count\\\\\\"\\\\n                  - .length: \\\\\\"array-count\\\\\\"\\\\n                  - $product:\\\\n                      - \\\\\\"item-index\\\\\\"\\\\n                      - .length: $this\\\\n              length: $wordsize\\\\n\\\\n  - # example `struct Record { uint8 x; uint8 y; bytes4 salt; }` in storage\\\\n    define:\\\\n      \\\\\\"struct-storage-contract-variable-slot\\\\\\": 0\\\\n    in:\\\\n      group:\\\\n        - name: \\\\\\"x\\\\\\"\\\\n          location: storage\\\\n          slot: \\\\\\"struct-storage-contract-variable-slot\\\\\\"\\\\n          offset:\\\\n            $difference:\\\\n              - $wordsize\\\\n              - .length: $this\\\\n          length: 1  # uint8\\\\n        - name: \\\\\\"y\\\\\\"\\\\n          location: storage\\\\n          slot: \\\\\\"struct-storage-contract-variable-slot\\\\\\"\\\\n          offset:\\\\n            $difference:\\\\n              - .offset: \\\\\\"x\\\\\\"\\\\n              - .length: $this\\\\n          length: 1  # uint8\\\\n        - name: \\\\\\"salt\\\\\\"\\\\n          location: storage\\\\n          slot: \\\\\\"struct-storage-contract-variable-slot\\\\\\"\\\\n          offset:\\\\n            $difference:\\\\n              - .offset: \\\\\\"y\\\\\\"\\\\n              - .length: $this\\\\n          length: 4  # bytes4\\\\n\\\\n  - # example `(struct Record { uint256 x; uint256 y; })[] memory`\\\\n    group:\\\\n      # declare the first sub-pointer to be the \\\\\\"array-start\\\\\\" region of data\\\\n      # corresponding to the first item in the stack (at time of observation)\\\\n      - name: \\\\\\"array-start\\\\\\"\\\\n        location: stack\\\\n        slot: 0\\\\n\\\\n      # declares the \\\\\\"array-count\\\\\\" region in memory at the offset indicated\\\\n      # by \\\\\\"array-start\\\\\\" and of length equal to word size\\\\n      - name: \\\\\\"array-count\\\\\\"\\\\n        location: memory\\\\n        offset:\\\\n          $read: \\\\\\"array-start\\\\\\"\\\\n        length: $wordsize\\\\n\\\\n      # declare this to include a list of pointers of size indicated by the\\\\n      # value at \\\\\\"array-count\\\\\\", where each \\\\\\"item-index\\\\\\" corresponds to a\\\\n      # group of pointers\\\\n      - list:\\\\n          count:\\\\n            $read: \\\\\\"array-count\\\\\\"\\\\n          each: \\\\\\"item-index\\\\\\"\\\\n          is:\\\\n            group:\\\\n              # each element in the list includes a \\\\\\"struct-pointer\\\\\\" region\\\\n              # in memory (laid out sequentially in a block as the raw\\\\n              # array data)\\\\n              - name: \\\\\\"struct-pointer\\\\\\"\\\\n                location: memory\\\\n                offset:\\\\n                  $sum:\\\\n                    - .offset: \\\\\\"array-count\\\\\\"\\\\n                    - .length: \\\\\\"array-count\\\\\\"\\\\n                    - $product:\\\\n                      - \\\\\\"item-index\\\\\\"\\\\n                      - .length: \\\\\\"struct-pointer\\\\\\"\\\\n                length: $wordsize\\\\n\\\\n              # following that pointer leads to the region corresponding to\\\\n              # the first member of the struct\\\\n              - name: \\\\\\"struct-member-0\\\\\\"\\\\n                location: memory\\\\n                offset:\\\\n                  $read: \\\\\\"struct-pointer\\\\\\"\\\\n                length: $wordsize\\\\n\\\\n              # the second struct member immediately follows the first\\\\n              - name: \\\\\\"struct-member-1\\\\\\"\\\\n                location: memory\\\\n                offset:\\\\n                  $sum:\\\\n                    - .offset: \\\\\\"struct-member-0\\\\\\"\\\\n                    - .length: \\\\\\"struct-member-0\\\\\\"\\\\n                length: $wordsize\\\\n\\\\n  - # example `string storage` allocation\\\\n    define:\\\\n      \\\\\\"string-storage-contract-variable-slot\\\\\\": 0\\\\n    in:\\\\n      group:\\\\n        # for short strings, the length is stored as 2n in the last byte of slot\\\\n        - name: \\\\\\"length-flag\\\\\\"\\\\n          location: storage\\\\n          slot: \\\\\\"string-storage-contract-variable-slot\\\\\\"\\\\n          offset:\\\\n            $difference: [$wordsize, 1]\\\\n          length: 1\\\\n\\\\n        # define the region representing the string data itself conditionally\\\\n        # based on odd or even length data\\\\n        - if:\\\\n            $remainder:\\\\n              - $sum:\\\\n                  - $read: \\\\\\"length-flag\\\\\\"\\\\n                  - 1\\\\n              - 2\\\\n\\\\n          # short string case (flag is even)\\\\n          then:\\\\n            define:\\\\n              \\\\\\"string-length\\\\\\":\\\\n                $quotient: [{ $read: \\\\\\"length-flag\\\\\\" }, 2]\\\\n            in:\\\\n              name: \\\\\\"string\\\\\\"\\\\n              location: storage\\\\n              slot: \\\\\\"string-storage-contract-variable-slot\\\\\\"\\\\n              offset: 0\\\\n              length: \\\\\\"string-length\\\\\\"\\\\n\\\\n          # long string case (flag is odd)\\\\n          else:\\\\n            group:\\\\n              # long strings may use full word to describe length as 2n+1\\\\n              - name: \\\\\\"long-string-length-data\\\\\\"\\\\n                location: storage\\\\n                slot: \\\\\\"string-storage-contract-variable-slot\\\\\\"\\\\n                offset: 0\\\\n                length: $wordsize\\\\n\\\\n              - define:\\\\n                  \\\\\\"string-length\\\\\\":\\\\n                    $quotient:\\\\n                      - $difference:\\\\n                        - $read: \\\\\\"long-string-length-data\\\\\\"\\\\n                        - 1\\\\n                      - 2\\\\n\\\\n                  \\\\\\"start-slot\\\\\\":\\\\n                    $keccak256:\\\\n                      - $wordsized: \\\\\\"string-storage-contract-variable-slot\\\\\\"\\\\n\\\\n                  \\\\\\"total-slots\\\\\\":\\\\n                    # account for both zero and nonzero slot remainders by adding\\\\n                    # $wordsize-1 to the length before dividing\\\\n                    $quotient:\\\\n                      - $sum: [\\\\\\"string-length\\\\\\", { $difference: [$wordsize, 1] }]\\\\n                      - $wordsize\\\\n                in:\\\\n                  list:\\\\n                    count: \\\\\\"total-slots\\\\\\"\\\\n                    each: \\\\\\"i\\\\\\"\\\\n                    is:\\\\n                      define:\\\\n                        \\\\\\"current-slot\\\\\\":\\\\n                          $sum: [\\\\\\"start-slot\\\\\\", \\\\\\"i\\\\\\"]\\\\n                        \\\\\\"previous-length\\\\\\":\\\\n                          $product: [\\\\\\"i\\\\\\", $wordsize]\\\\n                      in:\\\\n                        # conditional based on whether this is the last slot:\\\\n                        # is the string length longer than the previous length\\\\n                        # plus this whole slot?\\\\n                        if:\\\\n                          $difference:\\\\n                            - \\\\\\"string-length\\\\\\"\\\\n                            - $sum: [\\\\\\"previous-length\\\\\\", \\\\\\"$wordsize\\\\\\"]\\\\n                        then:\\\\n                          # include the whole slot\\\\n                          name: \\\\\\"string\\\\\\"\\\\n                          location: storage\\\\n                          slot: \\\\\\"current-slot\\\\\\"\\\\n                        else:\\\\n                          # include only what\'s left in the string\\\\n                          name: \\\\\\"string\\\\\\"\\\\n                          location: storage\\\\n                          slot: \\\\\\"current-slot\\\\\\"\\\\n                          offset: 0\\\\n                          length:\\\\n                            $difference: [\\\\\\"string-length\\\\\\", \\\\\\"previous-length\\\\\\"]\\\\n\\",\\n  \\"schema:ethdebug/format/program/context/code\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/program/context/code\\\\\\"\\\\n\\\\ntitle: ethdebug/format/program/context/code\\\\ndescription: |\\\\n  Information about the source code range corresponding to this point in\\\\n  machine execution.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  code:\\\\n    $ref: \\\\\\"schema:ethdebug/format/materials/source-range\\\\\\"\\\\nrequired:\\\\n  - code\\\\n\\\\nexamples:\\\\n  - code:\\\\n      source:\\\\n        id: 5\\\\n      range:\\\\n        offset: 68\\\\n        length: 16\\\\n\\",\\n  \\"schema:ethdebug/format/program/context/frame\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/program/context/frame\\\\\\"\\\\n\\\\ntitle: ethdebug/format/program/context/frame\\\\ndescription: |\\\\n  A context may specify a `\\\\\\"frame\\\\\\"` property to indicate that its facts apply\\\\n  only to one of several possible compilation frames, e.g. for compilers with\\\\n  distinct frontend/backends to specify debugging data for the IR separately\\\\n  from the debugging data for the source language.\\\\ntype: object\\\\nproperties:\\\\n  frame:\\\\n    title: Relevant compilation frame\\\\n    type: string\\\\nrequired:\\\\n  - frame\\\\n\\\\nexamples:\\\\n  - frame: \\\\\\"ir\\\\\\"\\\\n  - frame: \\\\\\"source\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/program/context/gather\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/program/context/gather\\\\\\"\\\\n\\\\ntitle: ethdebug/format/program/context/gather\\\\ndescription: |\\\\n  A context specifying the `\\\\\\"gather\\\\\\"` property with a list of contexts\\\\n  indicates that all specified contexts apply simultaneously.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  gather:\\\\n    title: Contexts to gather\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"schema:ethdebug/format/program/context\\\\\\"\\\\n    minItems: 2\\\\n    additionalItems: false\\\\nrequired:\\\\n  - gather\\\\n\\\\nexamples:\\\\n  - gather:\\\\n      - frame: \\\\\\"ir\\\\\\"\\\\n        code:\\\\n          source:\\\\n            id: 0\\\\n          range:\\\\n            offset: 8\\\\n            length: 11\\\\n      - frame: \\\\\\"source\\\\\\"\\\\n        code:\\\\n          source:\\\\n            id: 3\\\\n          range:\\\\n            offset: 113\\\\n            length: 19\\\\n  - gather:\\\\n    - variables:\\\\n      - identifier: x\\\\n        declaration:\\\\n          source:\\\\n            id: 5\\\\n          range:\\\\n            offset: 10\\\\n            length: 56\\\\n        type:\\\\n          kind: string\\\\n    - variables:\\\\n      - identifier: x\\\\n        declaration:\\\\n          source:\\\\n            id: 5\\\\n          range:\\\\n            offset: 10\\\\n            length: 56\\\\n        pointer:\\\\n          location: storage\\\\n          slot: 0\\\\n\\",\\n  \\"schema:ethdebug/format/program/context/name\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/program/context/name\\\\\\"\\\\n\\\\ntitle: ethdebug/format/program/context/name\\\\ndescription: |\\\\n  The name of the context, for use in disambiguating future instruction\\\\n  annotations that specify one of several possible contexts based on\\\\n  information only available at runtime.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  name:\\\\n    type: string\\\\nrequired:\\\\n  - name\\\\n\\\\nexamples:\\\\n  - name: \\\\\\"Array<T=bytes32>\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/program/context/pick\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/program/context/pick\\\\\\"\\\\n\\\\ntitle: ethdebug/format/program/context/pick\\\\ndescription: |\\\\n  A program context that specifies the `\\\\\\"pick\\\\\\"` property indicates that\\\\n  one of several possible contexts are known to be true, possibly requiring\\\\n  additional information to disambiguate.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  pick:\\\\n    title: Contexts to pick from\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"schema:ethdebug/format/program/context\\\\\\"\\\\n    minItems: 2\\\\n    additionalItems: false\\\\nrequired:\\\\n  - pick\\\\n\\\\nexamples:\\\\n  - pick:\\\\n    - code:\\\\n        source:\\\\n          id: 5\\\\n        range:\\\\n          offset: 68\\\\n          length: 16\\\\n    - code:\\\\n        source:\\\\n          id: 5\\\\n        range:\\\\n          offset: 132\\\\n          length: 16\\\\n\\",\\n  \\"schema:ethdebug/format/program/context/remark\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/program/context/remark\\\\\\"\\\\n\\\\ntitle: ethdebug/format/program/context/remark\\\\ndescription: |\\\\n  Human-readable information about the instruction. This field is intended\\\\n  primarily not for compilers to use directly, but rather for humans\\\\n  (directly or indirectly) to use as an annotation field.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  remark:\\\\n    type: string\\\\n\\\\nrequired:\\\\n  - remark\\\\n\\\\nexamples:\\\\n  - remark: \\\\\\"jump to end if zero\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/program/context/variables\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/program/context/variables\\\\\\"\\\\n\\\\ntitle: ethdebug/format/program/context/variables\\\\ndescription: |\\\\n  Information about known variables at this context\'s point in code\\\\n  execution, specified as an array whose items each correspond to a unique\\\\n  variable.\\\\n\\\\n  Items in this array **should not** have duplicate non-empty `identifier`\\\\n  values except where high-level language semantics require it. Where\\\\n  possible, use other mechanisms provided by this format to indicate that\\\\n  an identifier\'s corresponding variable is ambiguous.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  variables:\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"#/$defs/Variable\\\\\\"\\\\n    minItems: 1\\\\n    additionalItems: false\\\\nrequired:\\\\n  - variables\\\\n\\\\nexamples:\\\\n  - variables:\\\\n      - identifier: x\\\\n        declaration:\\\\n          source:\\\\n            id: 5\\\\n          range:\\\\n            offset: 10\\\\n            length: 56\\\\n        type:\\\\n          kind: string\\\\n        pointer:\\\\n          location: storage\\\\n          slot: 0\\\\n\\\\n$defs:\\\\n  Variable:\\\\n    title: Variable\\\\n    description: |\\\\n      The information known about a variable at a particular point in the code\\\\n      execution.\\\\n\\\\n    type: object\\\\n    properties:\\\\n      identifier:\\\\n        type: string\\\\n        minLength: 1\\\\n\\\\n      declaration:\\\\n        description: |\\\\n          Source range corresponding to where the variable was declared.\\\\n        $ref: \\\\\\"schema:ethdebug/format/materials/source-range\\\\\\"\\\\n\\\\n      type:\\\\n        description: |\\\\n          The variable\'s static type, if it exists. This **must** be specified\\\\n          either as a full **ethdebug/format/type** representation, or an\\\\n          `{ \\\\\\"id\\\\\\": \\\\\\"...\\\\\\" }` type reference object.\\\\n        oneOf:\\\\n          - $ref: \\\\\\"schema:ethdebug/format/type\\\\\\"\\\\n          - $ref: \\\\\\"schema:ethdebug/format/type/reference\\\\\\"\\\\n\\\\n      pointer:\\\\n        description: |\\\\n          Allocation information for the variable, if it exists.\\\\n        $ref: \\\\\\"schema:ethdebug/format/pointer\\\\\\"\\\\n\\\\n    minProperties: 1\\\\n    unevaluatedProperties: false\\\\n\\\\n    examples:\\\\n      - identifier: x\\\\n        declaration:\\\\n          source:\\\\n            id: 5\\\\n          range:\\\\n            offset: 10\\\\n            length: 56\\\\n\\",\\n  \\"schema:ethdebug/format/program/context\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/program/context\\\\\\"\\\\n\\\\ntitle: ethdebug/format/program/context\\\\ndescription: |\\\\n  An **ethdebug/format/program/context** object represents compile-time\\\\n  information about the high-level runtime execution state at a specific point\\\\n  in a program\'s bytecode.\\\\n\\\\n  This schema provides a formal specification for this format\'s model of what\\\\n  information can be known at compile-time about the high-level runtime. This\\\\n  includes data such as a particular machine instruction\'s source mapping or\\\\n  what variables exist in runtime state following some instruction.\\\\n\\\\n  The context object supports dynamic context combination and selection through\\\\n  the use of `gather`, and `pick` properties. This allows for flexible\\\\n  composition and extraction of context information.\\\\n\\\\n  Contexts serve as a bridge between low-level EVM execution and high-level\\\\n  language constructs. Debuggers can use these compile-time guarantees to\\\\n  maintain a coherent view of the high-level language runtime throughout\\\\n  program execution. This enables debugging tools to map execution points to\\\\n  source code, reconstruct variable states, provide meaningful stack traces,\\\\n  and offer insights into control flow and data structures.\\\\n\\\\ntype: object\\\\n\\\\nallOf:\\\\n  - if:\\\\n      required: [\\\\\\"code\\\\\\"]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/program/context/code\\\\\\"\\\\n  - if:\\\\n      required: [\\\\\\"variables\\\\\\"]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/program/context/variables\\\\\\"\\\\n  - if:\\\\n      required: [\\\\\\"remark\\\\\\"]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/program/context/remark\\\\\\"\\\\n  - if:\\\\n      required: [\\\\\\"pick\\\\\\"]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/program/context/pick\\\\\\"\\\\n  - if:\\\\n      required: [\\\\\\"gather\\\\\\"]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/program/context/gather\\\\\\"\\\\n  - if:\\\\n      required: [\\\\\\"frame\\\\\\"]\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/program/context/frame\\\\\\"\\\\n\\\\nunevaluatedProperties: false\\\\n\\\\nexamples:\\\\n  - variables:\\\\n      - identifier: x\\\\n        declaration:\\\\n          source:\\\\n            id: 5\\\\n          range:\\\\n            offset: 10\\\\n            length: 56\\\\n        type:\\\\n          kind: string\\\\n        pointer:\\\\n          location: storage\\\\n          slot: 0\\\\n    code:\\\\n      source:\\\\n        id: 5\\\\n      range:\\\\n        offset: 68\\\\n        length: 16\\\\n\\",\\n  \\"schema:ethdebug/format/program/instruction\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/program/instruction\\\\\\"\\\\n\\\\ntitle: ethdebug/format/program/instruction\\\\ndescription: |\\\\n  A schema for representing the information pertaining to a particular\\\\n  instruction in machine code.\\\\n\\\\ntype: object\\\\n\\\\nproperties:\\\\n  offset:\\\\n    title: Instruction byte offset\\\\n    description: |\\\\n      The byte offset where the instruction begins within the bytecode.\\\\n\\\\n      For legacy contract bytecode (non-EOF), this value is equivalent to the\\\\n      instruction\'s program counter. For EOF bytecode, this value **must** be\\\\n      the offset from the start of the container, not the start of a particular\\\\n      code section within that container.\\\\n    $ref: \\\\\\"schema:ethdebug/format/data/value\\\\\\"\\\\n\\\\n  operation:\\\\n    title: Machine operation information\\\\n    type: object\\\\n    properties:\\\\n      mnemonic:\\\\n        description: The mnemonic operation code (PUSH1, e.g.)\\\\n        type: string\\\\n\\\\n      arguments:\\\\n        description: The immediate arguments to the operation, if relevant.\\\\n        type: array\\\\n        minItems: 1\\\\n        items:\\\\n          description: |\\\\n            An immediate value specified as argument to the opcode\\\\n          $ref: \\\\\\"schema:ethdebug/format/data/value\\\\\\"\\\\n\\\\n    required:\\\\n      - mnemonic\\\\n\\\\n  context:\\\\n    description: |\\\\n      The context known to exist following the execution of this instruction.\\\\n\\\\n      This field is **optional**. Omitting it is equivalent to specifying the\\\\n      empty context value (`{}`).\\\\n    $ref: \\\\\\"schema:ethdebug/format/program/context\\\\\\"\\\\n    default: {}\\\\n\\\\nrequired:\\\\n  - offset\\\\n\\\\nexamples:\\\\n  - offset: 0\\\\n    operation:\\\\n      mnemonic: \\\\\\"PUSH1\\\\\\"\\\\n      arguments: [\\\\\\"0x60\\\\\\"]\\\\n    context:\\\\n      code:\\\\n        source:\\\\n          id: 5\\\\n        range:\\\\n          offset: 10\\\\n          length: 30\\\\n\\",\\n  \\"schema:ethdebug/format/program\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/program\\\\\\"\\\\n\\\\ntitle: ethdebug/format/program\\\\ndescription: |\\\\n  Debugging information about a particular bytecode in a compilation.\\\\n\\\\ntype: object\\\\n\\\\nproperties:\\\\n  compilation:\\\\n    title: Compilation reference by ID\\\\n    description: |\\\\n      A reference to the compilation as an `{ \\\\\\"id\\\\\\": ... }` object.\\\\n    $ref: \\\\\\"schema:ethdebug/format/materials/reference\\\\\\"\\\\n\\\\n  contract:\\\\n    type: object\\\\n    properties:\\\\n      name:\\\\n        type: string\\\\n\\\\n      definition:\\\\n        $ref: \\\\\\"schema:ethdebug/format/materials/source-range\\\\\\"\\\\n    required:\\\\n      - definition\\\\n\\\\n  environment:\\\\n    title: Bytecode execution environment\\\\n    description: |\\\\n      Whether this bytecode is for contract creation or runtime calls.\\\\n    type: string\\\\n    enum:\\\\n      - call\\\\n      - create\\\\n\\\\n  context:\\\\n    description: |\\\\n      The context known to exist prior to the execution of the first\\\\n      instruction in the bytecode.\\\\n\\\\n      This field is **optional**. Omitting it is equivalent to specifying the\\\\n      empty context value (`{}`).\\\\n    $ref: \\\\\\"schema:ethdebug/format/program/context\\\\\\"\\\\n    default: {}\\\\n\\\\n  instructions:\\\\n    type: array\\\\n    description: |\\\\n      The full array of instructions for the bytecode.\\\\n    items:\\\\n      $ref: \\\\\\"schema:ethdebug/format/program/instruction\\\\\\"\\\\n    additionalItems: false\\\\n\\\\nrequired:\\\\n  - contract\\\\n  - environment\\\\n  - instructions\\\\n\\\\nexamples:\\\\n  - # Incrementing a storage counter\\\\n    #\\\\n    # This example represents the call bytecode for the following pseudo-code:\\\\n    # ```\\\\n    # contract Incrementer;\\\\n    #\\\\n    # storage {\\\\n    #   [0] storedValue: uint256;\\\\n    # };\\\\n    #\\\\n    # code {\\\\n    #   let localValue = storedValue;\\\\n    #   storedValue += 1;\\\\n    #   value = tmp;\\\\n    # };\\\\n    # ```\\\\n    contract:\\\\n      name: \\\\\\"Incrementer\\\\\\"\\\\n      definition:\\\\n        source:\\\\n          id: 0\\\\n    environment: call\\\\n    context:\\\\n      variables:\\\\n        - &stored-value\\\\n          identifier: storedValue\\\\n          type:\\\\n            kind: uint\\\\n            bits: 256\\\\n          pointer:\\\\n            location: storage\\\\n            slot: 0\\\\n    instructions:\\\\n      - offset: 0\\\\n        operation:\\\\n          mnemonic: PUSH0\\\\n        context:\\\\n          variables:\\\\n            - *stored-value\\\\n      - offset: 1\\\\n        operation:\\\\n          mnemonic: SLOAD\\\\n        context:\\\\n          variables:\\\\n            - *stored-value\\\\n            - &local-value\\\\n              identifier: localValue\\\\n              type:\\\\n                kind: uint\\\\n                bits: 256\\\\n              pointer:\\\\n                location: stack\\\\n                slot: 0\\\\n      - offset: 2\\\\n        operation:\\\\n          mnemonic: PUSH1\\\\n          arguments: [\\\\\\"0x01\\\\\\"]\\\\n        context:\\\\n          variables:\\\\n            - *stored-value\\\\n            - <<: *local-value\\\\n              pointer:\\\\n                location: stack\\\\n                slot: 1\\\\n\\\\n      - offset: 4\\\\n        operation:\\\\n          mnemonic: ADD\\\\n        context:\\\\n          variables:\\\\n            - *stored-value\\\\n            - *local-value\\\\n      - offset: 5\\\\n        operation:\\\\n          mnemonic: PUSH0\\\\n        context:\\\\n          variables:\\\\n            - *stored-value\\\\n            - <<: *local-value\\\\n              pointer:\\\\n                location: stack\\\\n                slot: 1\\\\n\\\\n      - offset: 6\\\\n        operation:\\\\n          mnemonic: SSTORE\\\\n        context:\\\\n          variables:\\\\n            - *stored-value\\\\n\\",\\n  \\"schema:ethdebug/format/type/base\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/base\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/base\\\\ndescription:\\\\n  Defines the minimally necessary schema for a data type.\\\\n  Types belong to a particular `class` (`\\\\\\"elementary\\\\\\"` or `\\\\\\"complex\\\\\\"`),\\\\n  and are further identified by a particular `kind`.\\\\ntype: object\\\\noneOf:\\\\n  - $ref: \\\\\\"#/$defs/ElementaryType\\\\\\"\\\\n  - $ref: \\\\\\"#/$defs/ComplexType\\\\\\"\\\\n\\\\n$defs:\\\\n  ElementaryType:\\\\n    title: Base elementary type\\\\n    description:\\\\n      Represents an elementary type (one that does not compose other types)\\\\n    type: object\\\\n    properties:\\\\n      class:\\\\n        type: string\\\\n        const: elementary\\\\n      kind:\\\\n        type: string\\\\n      contains:\\\\n        not:\\\\n          description:\\\\n            \\\\\\"Elementary types **must not** specify a `contains` field\\\\n            (to make it easier to discriminate elementary vs. complex)\\\\\\"\\\\n    required:\\\\n      - kind\\\\n    examples:\\\\n      - kind: uint\\\\n        bits: 256\\\\n\\\\n  ComplexType:\\\\n    title: Base complex type\\\\n    description:\\\\n      Represents a complex type, one that composes other types (e.g., arrays,\\\\n      structs, mappings)\\\\n    type: object\\\\n    properties:\\\\n      class:\\\\n        type: string\\\\n        const: complex\\\\n        description: Indicates that this is a complex type\\\\n      kind:\\\\n        type: string\\\\n        description: The specific kind of complex type, e.g., array or struct\\\\n      contains:\\\\n        title: Complex type `contains` field\\\\n        description:\\\\n          Either a type wrapper, an array of type wrappers, or an object\\\\n          mapping to type wrappers.\\\\n        oneOf:\\\\n          - $ref: \\\\\\"#/$defs/TypeWrapper\\\\\\"\\\\n          - $ref: \\\\\\"#/$defs/TypeWrapperArray\\\\\\"\\\\n          - $ref: \\\\\\"#/$defs/TypeWrapperObject\\\\\\"\\\\n\\\\n    required:\\\\n      - kind\\\\n      - contains\\\\n    examples:\\\\n      - kind: array\\\\n        contains:\\\\n          type:\\\\n            kind: uint\\\\n            bits: 256\\\\n      - kind: struct\\\\n        contains:\\\\n          - member: x\\\\n            type:\\\\n              kind: uint\\\\n              bits: 256\\\\n          - member: y\\\\n            type:\\\\n              kind: uint\\\\n              bits: 256\\\\n      - kind: mapping\\\\n        contains:\\\\n          key:\\\\n            type:\\\\n              kind: address\\\\n              payable: true\\\\n          value:\\\\n            type:\\\\n              kind: uint\\\\n              bits: 256\\\\n\\\\n  TypeWrapper:\\\\n    title: \'{ \\\\\\"type\\\\\\": ... }\'\\\\n    description:\\\\n      A wrapper around a type. Defines a `\\\\\\"type\\\\\\"` field that may include a full\\\\n      Type representation or a reference to a known Type by ID. Note that this\\\\n      schema permits additional properties on the same object.\\\\n    type: object\\\\n    properties:\\\\n      type:\\\\n        oneOf:\\\\n          - $ref: \\\\\\"schema:ethdebug/format/type/base\\\\\\"\\\\n          - $ref: \\\\\\"schema:ethdebug/format/type/reference\\\\\\"\\\\n\\\\n    required:\\\\n      - type\\\\n\\\\n  TypeWrapperArray:\\\\n    title: \'{ \\\\\\"type\\\\\\": ... }[]\'\\\\n    description: A list of wrapped types, where the wrapper may add fields\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"#/$defs/TypeWrapper\\\\\\"\\\\n\\\\n  TypeWrapperObject:\\\\n    title: \'{ \\\\\\"key\\\\\\": { \\\\\\"type\\\\\\": ... }, ... }\'\\\\n    description:\\\\n      A key-value mapping of wrapped types, where the wrapper may add fields\\\\n    type: object\\\\n    additionalProperties:\\\\n      $ref: \\\\\\"#/$defs/TypeWrapper\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/type/complex/alias\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/complex/alias\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/complex/alias\\\\ndescription:\\\\n  Schema representing a type alias to another type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    type: string\\\\n    const: complex\\\\n  kind:\\\\n    type: string\\\\n    const: alias\\\\n  contains:\\\\n    $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n  definition:\\\\n    $ref: \\\\\\"schema:ethdebug/format/type/definition\\\\\\"\\\\n\\\\nrequired:\\\\n  - kind\\\\n  - contains\\\\n\\\\nexamples:\\\\n  - kind: alias\\\\n    contains:\\\\n      type:\\\\n        kind: uint\\\\n        bits: 256\\\\n\\\\n  - kind: alias\\\\n    contains:\\\\n      type:\\\\n        kind: array\\\\n        contains:\\\\n          type:\\\\n            class: elementary\\\\n            kind: super-uint # unsupported type\\\\n            blits: -256\\\\n\\",\\n  \\"schema:ethdebug/format/type/complex/array\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/complex/array\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/complex/array\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    type: string\\\\n    const: complex\\\\n  kind:\\\\n    type: string\\\\n    const: array\\\\n  contains:\\\\n    $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n\\\\nrequired:\\\\n  - kind\\\\n  - contains\\\\n\\\\nexamples:\\\\n  - kind: array\\\\n    contains:\\\\n      type:\\\\n        kind: uint\\\\n        bits: 256\\\\n\\\\n  - kind: array\\\\n    contains:\\\\n      type:\\\\n        kind: array\\\\n        contains:\\\\n          type:\\\\n            class: elementary\\\\n            kind: super-uint # unsupported type\\\\n            blits: -256\\\\n\\",\\n  \\"schema:ethdebug/format/type/complex/function\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/complex/function\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/complex/function\\\\ndescription: |\\\\n  Schema for representing a function type.\\\\n\\\\n  Type representations must indicate whether they represent a function that is\\\\n  called internally (within the semantics of the language) or a function that\\\\n  is called externally (via EVM contract call semantics and the Solidity ABI).\\\\n  Internal function types require the `\\\\\\"internal\\\\\\": true` field; external\\\\n  function types require `\\\\\\"external\\\\\\": true`.\\\\n\\\\n  Note that external function types may include a representation of the\\\\n  contract type that defines or provides this function as an external\\\\n  interface.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    type: string\\\\n    const: complex\\\\n  kind:\\\\n    type: string\\\\n    const: function\\\\n  contains:\\\\n    type: object\\\\n    title: Parameter and return types\\\\n    description: |\\\\n      Types this function type composes. Function types inherently compose\\\\n      two groupings of types (an ordered list of parameter types and typically\\\\n      either a return value or return parameters). Function types\' `contains`\\\\n      field is organized as a mapping of `parameters` types (a type wrapper for\\\\n      a tuple type) and an optional `returns` type (either a generic type\\\\n      wrapper or a type wrapper for a tuple type).\\\\n\\\\n      This definition applies for both cases (internal and external function\\\\n      types). Each of those specific types may expand this `contains` field\\\\n      schema with other semantic details (such as an external function type\\\\n      indicating the contract type from which it is exposed).\\\\n    properties:\\\\n      parameters:\\\\n        $ref: \\\\\\"#/$defs/Parameters\\\\\\"\\\\n      returns:\\\\n        type: object\\\\n        title: Return type (or tuple of types)\\\\n        description: |\\\\n          To accommodate languages differing in whether functions return single\\\\n          values or lists of values, this field may be either a generic type\\\\n          wrapper or explicitly defined as a type wrapper around a tuple type.\\\\n\\\\n          Debuggers that implement this schema **should** be aware that\\\\n          languages whose functions return sole values might return tuple\\\\n          types. Resolving this ambiguity remains outside the scope of the\\\\n          schema (but compilers **must** be consistent when representing\\\\n          function types in this schema).\\\\n        anyOf:\\\\n          - $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n          - $ref: \\\\\\"#/$defs/Parameters\\\\\\"\\\\n    required:\\\\n      - parameters\\\\n  definition:\\\\n    $ref: \\\\\\"schema:ethdebug/format/type/definition\\\\\\"\\\\n\\\\noneOf:\\\\n  - type: object\\\\n    title: External function type\\\\n    properties:\\\\n      internal:\\\\n        const: false\\\\n      external:\\\\n        const: true\\\\n      contains:\\\\n        type: object\\\\n        title: Additional contents\\\\n        properties:\\\\n          contract:\\\\n            type: object\\\\n            title: Contract type providing external function\\\\n            description:\\\\n              A wrapper around the contract type that composes this external\\\\n              function type.\\\\n            allOf:\\\\n              - $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n              - type: object\\\\n                title: Contract type wrapper\\\\n                properties:\\\\n                  type:\\\\n                    $ref: \\\\\\"schema:ethdebug/format/type/elementary/contract\\\\\\"\\\\n    required:\\\\n      - external\\\\n\\\\n  - type: object\\\\n    title: Internal function type\\\\n    properties:\\\\n      internal:\\\\n        const: true\\\\n      external:\\\\n        const: false\\\\n    required:\\\\n      - internal\\\\n\\\\nexamples:\\\\n  - kind: function\\\\n    internal: true\\\\n    definition:\\\\n      name: increment\\\\n    contains:\\\\n      parameters:\\\\n        type:\\\\n          kind: tuple\\\\n          contains:\\\\n            - name: value\\\\n              type:\\\\n                kind: uint\\\\n                bits: 256\\\\n      returns:\\\\n        type:\\\\n          kind: uint\\\\n          bits: 256\\\\n  - kind: function\\\\n    external: true\\\\n    definition:\\\\n      name: withdraw\\\\n    contains:\\\\n      contract:\\\\n        type:\\\\n          kind: contract\\\\n          payable: true\\\\n          interface: true\\\\n          definition:\\\\n            name: Bank\\\\n      parameters:\\\\n        type:\\\\n          kind: tuple\\\\n          contains:\\\\n            - name: beneficiary\\\\n              type:\\\\n                kind: address\\\\n                payable: true\\\\n            - name: amount\\\\n              type:\\\\n                kind: ufixed\\\\n                bits: 128\\\\n                places: 18\\\\n      returns:\\\\n        type:\\\\n          kind: tuple\\\\n          contains: []\\\\n\\\\n$defs:\\\\n  Parameters:\\\\n    type: object\\\\n    title: Parameters\\\\n    description:\\\\n      A type wrapper around a tuple of types. This schema uses a tuple type to\\\\n      represent an ordered list of types.\\\\n    allOf:\\\\n      - $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n      - title: Tuple type wrapper\\\\n        type: object\\\\n        properties:\\\\n          type:\\\\n            $ref: \\\\\\"schema:ethdebug/format/type/complex/tuple\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/type/complex/mapping\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/complex/mapping\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/complex/mapping\\\\ndescription:\\\\n  Schema for representing mapping types\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    type: string\\\\n    const: complex\\\\n  kind:\\\\n    type: string\\\\n    const: mapping\\\\n  contains:\\\\n    type: object\\\\n    title: Mapping key/value types\\\\n    properties:\\\\n      key:\\\\n        $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n      value:\\\\n        $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n    required:\\\\n      - key\\\\n      - value\\\\n\\\\nrequired:\\\\n  - kind\\\\n  - contains\\\\n\\\\nexamples:\\\\n  - kind: mapping\\\\n    contains:\\\\n      key:\\\\n        type:\\\\n          kind: address\\\\n      value:\\\\n        type:\\\\n          kind: uint\\\\n          bits: 256\\\\n\\",\\n  \\"schema:ethdebug/format/type/complex/struct\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/complex/struct\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/complex/struct\\\\ndescription:\\\\n  Schema for representing struct types\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    type: string\\\\n    const: complex\\\\n  kind:\\\\n    type: string\\\\n    const: struct\\\\n  contains:\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"#/$defs/MemberField\\\\\\"\\\\n  definition:\\\\n    $ref: \\\\\\"schema:ethdebug/format/type/definition\\\\\\"\\\\n\\\\nrequired:\\\\n  - kind\\\\n  - contains\\\\n\\\\nexamples:\\\\n  - kind: struct\\\\n    contains:\\\\n      - name: x\\\\n        type:\\\\n          kind: uint\\\\n          bits: 128\\\\n      - name: y\\\\n        type:\\\\n          kind: uint\\\\n          bits: 128\\\\n\\\\n$defs:\\\\n  MemberField:\\\\n    type: object\\\\n    title: MemberField\\\\n    description:\\\\n      A schema representing a member field inside a struct type. This is an\\\\n      **ethdebug/format/type/wrapper** with additional fields.\\\\n    allOf:\\\\n      - $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n      - title: Additional fields\\\\n        description:\\\\n          An object with optional `name` property for identifying named struct\\\\n          member fields. **Note** that this language does not specify that a\\\\n          struct must be consistent in its use of naming for all fields or none\\\\n        type: object\\\\n        properties:\\\\n          name:\\\\n            type: string\\\\n\\",\\n  \\"schema:ethdebug/format/type/complex/tuple\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/complex/tuple\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/complex/tuple\\\\ndescription:\\\\n  Schema for representing tuple types\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    type: string\\\\n    const: complex\\\\n  kind:\\\\n    type: string\\\\n    const: tuple\\\\n  contains:\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"#/$defs/Element\\\\\\"\\\\n\\\\nrequired:\\\\n  - kind\\\\n  - contains\\\\n\\\\nexamples:\\\\n  - # empty tuple type\\\\n    kind: tuple\\\\n    contains: []\\\\n\\\\n  - kind: tuple\\\\n    contains:\\\\n      - name: x\\\\n        type:\\\\n          kind: uint\\\\n          bits: 128\\\\n      - name: y\\\\n        type:\\\\n          kind: uint\\\\n          bits: 128\\\\n\\\\n$defs:\\\\n  Element:\\\\n    type: object\\\\n    title: Element\\\\n    description:\\\\n      An optionally named element type within a tuple. This is an\\\\n      **ethdebug/format/type/wrapper** with additional fields.\\\\n    allOf:\\\\n      - $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n      - title: Additional fields\\\\n        type: object\\\\n        properties:\\\\n          name:\\\\n            type: string\\\\n            description:\\\\n              For tuple types where positional element types are identified\\\\n              by name, this field **should** include this information.\\\\n\\\\n              This schema makes no restriction on whether all-or-no elements\\\\n              have names, and so this field may be sparse across elements of\\\\n              the same tuple.\\\\n\\",\\n  \\"schema:ethdebug/format/type/complex\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/complex\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/complex\\\\ndescription:\\\\n  Canonical representation of a complex type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  kind:\\\\n    $ref: \\\\\\"#/$defs/Kind\\\\\\"\\\\nrequired:\\\\n  - kind\\\\n\\\\nallOf:\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: alias\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/complex/alias\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: tuple\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/complex/tuple\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: array\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/complex/array\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: mapping\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/complex/mapping\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: struct\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/complex/struct\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: function\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/complex/function\\\\\\"\\\\n\\\\n$defs:\\\\n  Kind:\\\\n    title: Known complex kind\\\\n    description:\\\\n      A schema for the values of `kind` reserved for known complex types\\\\n      included in ethdebug/format\\\\n    type: string\\\\n    enum:\\\\n      - alias\\\\n      - tuple\\\\n      - array\\\\n      - mapping\\\\n      - struct\\\\n      - function\\\\n\\",\\n  \\"schema:ethdebug/format/type/definition\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/definition\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/definition\\\\ndescription: |\\\\n  Object containing name and location information for a type.\\\\n\\\\n  This schema does not require any particular field, but it **must** contain\\\\n  at least one property.\\\\n\\\\ntype: object\\\\nproperties:\\\\n  name:\\\\n    type: string\\\\n\\\\n  location:\\\\n    $ref: \\\\\\"schema:ethdebug/format/materials/source-range\\\\\\"\\\\n\\\\nanyOf:\\\\n  - title: Required `name`\\\\n    required: [name]\\\\n  - title: Required `location`\\\\n    required: [location]\\\\n\\\\nexamples:\\\\n  - name: Ballot\\\\n    location:\\\\n      source:\\\\n        id: 5\\\\n      range:\\\\n        offset: 10\\\\n        length: 56\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary/address\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary/address\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary/address\\\\ndescription:\\\\n  Schema describing the representation of an address type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    const: elementary\\\\n  kind:\\\\n    const: address\\\\n  payable:\\\\n    type: boolean\\\\n    description:\\\\n      If this field is omitted, this type represents an address whose\\\\n      payability is not known.\\\\nrequired:\\\\n  - kind\\\\nexamples:\\\\n  - # a type for addresses of unknown payability\\\\n    kind: address\\\\n\\\\n  - # a type for payable addresses\\\\n    kind: address\\\\n    payable: true\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary/bool\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary/bool\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary/bool\\\\ndescription:\\\\n  Schema describing the representation of the boolean type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    const: elementary\\\\n  kind:\\\\n    const: bool\\\\nrequired:\\\\n  - kind\\\\nexamples:\\\\n  - kind: bool\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary/bytes\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary/bytes\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary/bytes\\\\ndescription:\\\\n  Schema describing the representation of a type of bytes string\\\\n  (either dynamic or static)\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    const: elementary\\\\n  kind:\\\\n    const: bytes\\\\n  size:\\\\n    description:\\\\n      The number of bytes in the bytes string. If this field is omitted, this\\\\n      type is the dynamic bytes string type.\\\\n    $ref: \\\\\\"schema:ethdebug/format/data/unsigned\\\\\\"\\\\nrequired:\\\\n  - kind\\\\nexamples:\\\\n  - # example static bytes type\\\\n    kind: bytes\\\\n    size: 32\\\\n  - # example dynamic bytes type\\\\n    kind: bytes\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary/contract\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary/contract\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary/contract\\\\ndescription:\\\\n  Schema describing the representation of a contract type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    const: elementary\\\\n  kind:\\\\n    const: contract\\\\n  payable:\\\\n    type: boolean\\\\n    description:\\\\n      If this field is omitted, this type represents an address whose\\\\n      payability is not known.\\\\n  definition:\\\\n    $ref: \\\\\\"schema:ethdebug/format/type/definition\\\\\\"\\\\n\\\\noneOf:\\\\n  - title: Normal contract type\\\\n    properties:\\\\n      library:\\\\n        const: false\\\\n      interface:\\\\n        const: false\\\\n\\\\n  - title: Contract library type\\\\n    properties:\\\\n      library:\\\\n        const: true\\\\n        description:\\\\n          Indicates that this is a type representing a library\\\\n    required:\\\\n      - library\\\\n\\\\n  - title: Contract interface type\\\\n    properties:\\\\n      interface:\\\\n        const: true\\\\n        description:\\\\n          Indicates that this is a type representing an interface\\\\n    required:\\\\n      - interface\\\\n\\\\nrequired:\\\\n  - kind\\\\n\\\\nexamples:\\\\n  - kind: contract\\\\n\\\\n  - kind: contract\\\\n    library: false\\\\n    interface: false\\\\n    payable: true\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary/enum\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary/enum\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary/enum\\\\ndescription:\\\\n  Schema describing the representation of an enumerated type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    const: elementary\\\\n  kind:\\\\n    const: enum\\\\n  values:\\\\n    description:\\\\n      The allowed values of an enum. This format makes no restriction on which\\\\n      values are allowed here.\\\\n    type: array\\\\n    items: true\\\\n  definition:\\\\n    $ref: \\\\\\"schema:ethdebug/format/type/definition\\\\\\"\\\\n\\\\nrequired:\\\\n  - kind\\\\n  - values\\\\n\\\\nexamples:\\\\n  - kind: enum\\\\n    values:\\\\n      - A\\\\n      - B\\\\n      - C\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary/fixed\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary/fixed\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary/fixed\\\\ndescription:\\\\n  Schema describing the representation of a signed fixed decimal type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    const: elementary\\\\n  kind:\\\\n    const: fixed\\\\n  bits:\\\\n    type: integer\\\\n    multipleOf: 8\\\\n    minimum: 8\\\\n    maximum: 256\\\\n  places:\\\\n    type: integer\\\\n    description:\\\\n      How many decimal places, implying that a raw value `v` of this type\\\\n      should be interpreted as `v / (10**places)`\\\\n    minimum: 1\\\\n    maximum: 80\\\\nrequired:\\\\n  - kind\\\\n  - bits\\\\n  - places\\\\nexamples:\\\\n  - kind: fixed\\\\n    bits: 256\\\\n    places: 10\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary/int\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary/int\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary/int\\\\ndescription:\\\\n  Schema describing the representation of a signed integer type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    const: elementary\\\\n  kind:\\\\n    const: int\\\\n  bits:\\\\n    type: integer\\\\n    multipleOf: 8\\\\n    minimum: 8\\\\n    maximum: 256\\\\nrequired:\\\\n  - kind\\\\n  - bits\\\\nexamples:\\\\n  - kind: int\\\\n    bits: 256\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary/string\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary/string\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary/string\\\\ndescription:\\\\n  Schema describing the representation of a string type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    const: elementary\\\\n  kind:\\\\n    const: string\\\\n  encoding:\\\\n    type: string\\\\n    default: utf-8\\\\nrequired:\\\\n  - kind\\\\nexamples:\\\\n  - kind: string\\\\n  - kind: string\\\\n    encoding: utf-16\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary/ufixed\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary/ufixed\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary/ufixed\\\\ndescription:\\\\n  Schema describing the representation of an unsigned fixed decimal type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    const: elementary\\\\n  kind:\\\\n    const: ufixed\\\\n  bits:\\\\n    type: integer\\\\n    multipleOf: 8\\\\n    minimum: 8\\\\n    maximum: 256\\\\n  places:\\\\n    type: integer\\\\n    description:\\\\n      How many decimal places, implying that a raw value `v` of this type\\\\n      should be interpreted as `v / (10**places)`\\\\n    minimum: 1\\\\n    maximum: 80\\\\nrequired:\\\\n  - kind\\\\n  - bits\\\\n  - places\\\\nexamples:\\\\n  - kind: ufixed\\\\n    bits: 256\\\\n    places: 10\\\\n\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary/uint\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary/uint\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary/uint\\\\ndescription:\\\\n  Schema describing the representation of an unsigned integer type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  class:\\\\n    const: elementary\\\\n  kind:\\\\n    const: uint\\\\n  bits:\\\\n    type: integer\\\\n    multipleOf: 8\\\\n    minimum: 8\\\\n    maximum: 256\\\\nrequired:\\\\n  - kind\\\\n  - bits\\\\nexamples:\\\\n  - kind: uint\\\\n    bits: 256\\\\n\\",\\n  \\"schema:ethdebug/format/type/elementary\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/elementary\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/elementary\\\\ndescription:\\\\n  Canonical representation of an elementary type\\\\n\\\\ntype: object\\\\nproperties:\\\\n  kind:\\\\n    $ref: \\\\\\"#/$defs/Kind\\\\\\"\\\\nrequired:\\\\n  - kind\\\\n\\\\nallOf:\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: uint\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/elementary/uint\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: int\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/elementary/int\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: bool\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/elementary/bool\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: bytes\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/elementary/bytes\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: string\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/elementary/string\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: ufixed\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/elementary/ufixed\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: fixed\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/elementary/fixed\\\\\\"\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: address\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/elementary/address\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: contract\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/elementary/contract\\\\\\"\\\\n\\\\n  - if:\\\\n      properties:\\\\n        kind:\\\\n          const: enum\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/elementary/enum\\\\\\"\\\\n\\\\n$defs:\\\\n  Kind:\\\\n    title: Known elementary kind\\\\n    description:\\\\n      A schema for the values of `kind` reserved for known elementary types\\\\n      included in ethdebug/format\\\\n    type: string\\\\n    enum:\\\\n      - uint\\\\n      - int\\\\n      - bool\\\\n      - bytes\\\\n      - string\\\\n      - ufixed\\\\n      - fixed\\\\n      - address\\\\n      - contract\\\\n      - enum\\\\n\\",\\n  \\"schema:ethdebug/format/type/reference\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/reference\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/reference\\\\ndescription: A reference to a known type by ID\\\\ntype: object\\\\nproperties:\\\\n  id:\\\\n    type:\\\\n      - string\\\\n      - number\\\\nadditionalProperties: false\\\\nrequired:\\\\n  - id\\\\nexamples:\\\\n  - id: 5\\\\n\\",\\n  \\"schema:ethdebug/format/type/wrapper\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type/wrapper\\\\ndescription:\\\\n  A wrapper around a type. Defines a `\\\\\\"type\\\\\\"` field that may include a full\\\\n  Type representation or a reference to a known Type by ID. Note that this\\\\n  schema permits additional properties on the same object.\\\\ntype: object\\\\nproperties:\\\\n  type:\\\\n    # Discriminate between reference and type based on presence of `id`\\\\n    if:\\\\n      required:\\\\n        - id\\\\n    then:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/reference\\\\\\"\\\\n    else:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type\\\\\\"\\\\n\\\\nrequired:\\\\n  - type\\\\n\\\\nexamples:\\\\n  - name: beneficiary\\\\n    type:\\\\n      kind: address\\\\n      payable: true\\\\n  - type:\\\\n      id: \\\\\\"<opaque-id>\\\\\\"\\\\n\\\\n$defs:\\\\n  Array:\\\\n    title: \'{ \\\\\\"type\\\\\\": ... }[]\'\\\\n    description: A list of wrapped types, where the wrapper may add fields\\\\n    type: array\\\\n    items:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n\\\\n  Object:\\\\n    title: \'{ \\\\\\"key\\\\\\": { \\\\\\"type\\\\\\": ... }, ... }\'\\\\n    description:\\\\n      A key-value mapping of wrapped types, where the wrapper may add fields\\\\n    type: object\\\\n    additionalProperties:\\\\n      $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n\\",\\n  \\"schema:ethdebug/format/type\\": \\"$schema: \\\\\\"https://json-schema.org/draft/2020-12/schema\\\\\\"\\\\n$id: \\\\\\"schema:ethdebug/format/type\\\\\\"\\\\n\\\\ntitle: ethdebug/format/type\\\\ndescription:\\\\n  Canonical representation for all types.\\\\ntype: object\\\\n\\\\nif:\\\\n  type: object\\\\n  title: Known kind\\\\n  description:\\\\n    If `kind` adheres to the set of known kinds defined by this format\\\\n  properties:\\\\n    kind:\\\\n      anyOf:\\\\n        - $ref: \\\\\\"schema:ethdebug/format/type/elementary#/$defs/Kind\\\\\\"\\\\n        - $ref: \\\\\\"schema:ethdebug/format/type/complex#/$defs/Kind\\\\\\"\\\\n\\\\nthen:\\\\n  type: object\\\\n  title: KnownType\\\\n  description:\\\\n    Then the object must adhere to exactly one known kind of type\\\\n  allOf:\\\\n    - if:\\\\n        properties:\\\\n          kind:\\\\n            $ref: \\\\\\"schema:ethdebug/format/type/elementary#/$defs/Kind\\\\\\"\\\\n      then:\\\\n        $ref: \\\\\\"schema:ethdebug/format/type/elementary\\\\\\"\\\\n    - if:\\\\n        properties:\\\\n          kind:\\\\n            $ref: \\\\\\"schema:ethdebug/format/type/complex#/$defs/Kind\\\\\\"\\\\n      then:\\\\n        $ref: \\\\\\"schema:ethdebug/format/type/complex\\\\\\"\\\\n\\\\nelse:\\\\n  type: object\\\\n  description:\\\\n    Else the object must be a valid **ethdebug/format/type/base** with\\\\n    additional constraints\\\\n  allOf:\\\\n    - $ref: \\\\\\"schema:ethdebug/format/type/base\\\\\\"\\\\n    - title: Required `class` field\\\\n      required:\\\\n        - class\\\\n    - title: Specialized complex type `contains` field\\\\n      type: object\\\\n      if:\\\\n        description:\\\\n          If this object is a complex type\\\\n        properties:\\\\n          class:\\\\n            const: complex\\\\n      then:\\\\n        description:\\\\n          Then the `contains` field must adhere to\\\\n          **ethdebug/format/type/wrapper** schemas, not the\\\\n          **ethdebug/format/type/base** equivalent.\\\\n\\\\n          (i.e., these additional constraints must apply recursively)\\\\n        properties:\\\\n          contains:\\\\n            oneOf:\\\\n              - $ref: \\\\\\"schema:ethdebug/format/type/wrapper\\\\\\"\\\\n              - $ref: \\\\\\"schema:ethdebug/format/type/wrapper#/$defs/Array\\\\\\"\\\\n              - $ref: \\\\\\"schema:ethdebug/format/type/wrapper#/$defs/Object\\\\\\"\\\\n\\"\\n};\\n\\nconst rawSchemas = {\\n  \\"schema:ethdebug/format/data/hex\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/data/hex\\",\\n    \\"title\\": \\"ethdebug/format/data/hex\\",\\n    \\"description\\": \\"A `0x`-prefixed hexadecimal string. This value **must** contain at least one\\\\nhexadecimal character (`0x` by itself is not allowed).\\\\n\\",\\n    \\"type\\": \\"string\\",\\n    \\"pattern\\": \\"^0x[0-9a-fA-F]{1,}$\\",\\n    \\"examples\\": [\\n      \\"0x0000\\",\\n      \\"0x1\\"\\n    ]\\n  },\\n  \\"schema:ethdebug/format/data/unsigned\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/data/unsigned\\",\\n    \\"title\\": \\"ethdebug/format/data/unsigned\\",\\n    \\"description\\": \\"A non-negative integer encoded as a JSON number.\\\\n\\",\\n    \\"type\\": \\"integer\\",\\n    \\"minimum\\": 0,\\n    \\"examples\\": [\\n      0,\\n      100\\n    ]\\n  },\\n  \\"schema:ethdebug/format/data/value\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/data/value\\",\\n    \\"title\\": \\"ethdebug/format/data/value\\",\\n    \\"description\\": \\"A non-negative integer value, expressed either as a native JSON number or as\\\\na `0x`-prefixed hexadecimal string.\\\\n\\",\\n    \\"oneOf\\": [\\n      {\\n        \\"description\\": \\"A non-negative integer literal\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/data/unsigned\\"\\n      },\\n      {\\n        \\"description\\": \\"A `0x`-prefixed hexadecimal string representing literal bytes or a number\\\\ncommonly displayed in base 16 (e.g. bytecode instruction offsets).\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/data/hex\\"\\n      }\\n    ],\\n    \\"examples\\": [\\n      \\"0x0000\\",\\n      2\\n    ]\\n  },\\n  \\"schema:ethdebug/format/info/resources\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/info/resources\\",\\n    \\"title\\": \\"ethdebug/format/info/resources\\",\\n    \\"description\\": \\"An object containing lookup tables for finding debugging resources by name.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"types\\": {\\n        \\"title\\": \\"Types by name\\",\\n        \\"description\\": \\"A collection of types by name identifier.\\\\n\\",\\n        \\"type\\": \\"object\\",\\n        \\"additionalProperties\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type\\"\\n        }\\n      },\\n      \\"pointers\\": {\\n        \\"title\\": \\"Pointer templates by name\\",\\n        \\"description\\": \\"A collection of pointer templates by name identifier.\\\\n\\",\\n        \\"type\\": \\"object\\",\\n        \\"additionalProperties\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/template\\"\\n        }\\n      },\\n      \\"compilation\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/materials/compilation\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"types\\",\\n      \\"pointers\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"types\\": {\\n          \\"struct__Coordinate\\": {\\n            \\"kind\\": \\"struct\\",\\n            \\"contains\\": [\\n              {\\n                \\"name\\": \\"x\\",\\n                \\"type\\": {\\n                  \\"kind\\": \\"uint\\",\\n                  \\"bits\\": 128\\n                }\\n              },\\n              {\\n                \\"name\\": \\"y\\",\\n                \\"type\\": {\\n                  \\"kind\\": \\"uint\\",\\n                  \\"bits\\": 128\\n                }\\n              }\\n            ],\\n            \\"definition\\": {\\n              \\"name\\": \\"Coordinate\\",\\n              \\"location\\": {\\n                \\"source\\": {\\n                  \\"id\\": 5\\n                },\\n                \\"range\\": {\\n                  \\"offset\\": 18,\\n                  \\"length\\": 55\\n                }\\n              }\\n            }\\n          }\\n        },\\n        \\"pointers\\": {\\n          \\"struct__Coordinate__storage\\": {\\n            \\"expect\\": [\\n              \\"contract_variable_slot__struct__Coordinate__storage\\"\\n            ],\\n            \\"for\\": {\\n              \\"group\\": [\\n                {\\n                  \\"name\\": \\"member__x__struct__Coordinate__storage\\",\\n                  \\"location\\": \\"storage\\",\\n                  \\"slot\\": \\"contract_variable_slot__struct__Coordinate__storage\\",\\n                  \\"offset\\": 0,\\n                  \\"length\\": 128\\n                },\\n                {\\n                  \\"name\\": \\"member__y__struct__Coordinate__storage\\",\\n                  \\"location\\": \\"storage\\",\\n                  \\"slot\\": \\"contract_variable_slot__struct__Coordinate__storage\\",\\n                  \\"offset\\": {\\n                    \\"$sum\\": [\\n                      {\\n                        \\".offset\\": \\"member__x__struct__Coordinate__storage\\"\\n                      },\\n                      {\\n                        \\".length\\": \\"member__x__struct__Coordinate__storage\\"\\n                      }\\n                    ]\\n                  },\\n                  \\"length\\": 128\\n                }\\n              ]\\n            }\\n          }\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/info\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/info\\",\\n    \\"title\\": \\"ethdebug/format/info\\",\\n    \\"description\\": \\"Debugging information about a single compilation\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"$ref\\": \\"schema:ethdebug/format/info/resources\\",\\n    \\"properties\\": {\\n      \\"programs\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/program\\"\\n        },\\n        \\"additionalItems\\": false\\n      },\\n      \\"compilation\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/materials/compilation\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"compilation\\",\\n      \\"programs\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"compilation\\": {\\n          \\"id\\": \\"__301f3b6d85831638\\",\\n          \\"compiler\\": {\\n            \\"name\\": \\"egc\\",\\n            \\"version\\": \\"0.2.3+commit.8b37fa7a\\"\\n          },\\n          \\"settings\\": {\\n            \\"turbo\\": true\\n          },\\n          \\"sources\\": [\\n            {\\n              \\"id\\": 1,\\n              \\"path\\": \\"Escrow.eg\\",\\n              \\"language\\": \\"examplelang\\",\\n              \\"contents\\": \\"import { Asset } from std::asset::fungible;\\\\n\\\\ntype State = !slots[\\\\n  ready: bool,\\\\n  complete: bool,\\\\n\\\\n  beneficiary: address,\\\\n\\\\n  asset: Asset,\\\\n  amount: uint256,\\\\n\\\\n  canRemit: () -> bool,\\\\n]\\\\n\\\\n@create\\\\nfunc setup(\\\\n  beneficiary: address,\\\\n  asset: Asset,\\\\n  canRemit: () -> bool,\\\\n) -> State:\\\\n  return {\\\\n    ready = False,\\\\n    complete = False,\\\\n    beneficiary,\\\\n    asset,\\\\n    amount = 0,\\\\n    canRemit,\\\\n  }\\\\n\\\\n@abi\\\\n@state(self: State)\\\\n@account(self)\\\\nfunc deposit(depositor: address, amount: uint256):\\\\n  require(!self.ready)\\\\n  require(!self.complete)\\\\n\\\\n  # expects an existing allowance (also known as \\\\\\"approval\\\\\\")\\\\n  self.asset.transferFrom(depositor, self, amount)\\\\n\\\\n  self.amount = amount\\\\n  self.ready = True\\\\n\\\\n@abi\\\\n@state(self: State)\\\\nfunc remit():\\\\n  require(self.ready)\\\\n  require(!self.complete)\\\\n\\\\n  require(self.canRemit())\\\\n\\\\n  asset.transfer(self.beneficiary, self.amount)\\\\n\\\\n  self.complete = True\\\\n\\"\\n            }\\n          ]\\n        },\\n        \\"types\\": {\\n          \\"State\\": {\\n            \\"kind\\": \\"struct\\",\\n            \\"contains\\": [\\n              {\\n                \\"name\\": \\"ready\\",\\n                \\"type\\": {\\n                  \\"kind\\": \\"bool\\"\\n                }\\n              },\\n              {\\n                \\"name\\": \\"complete\\",\\n                \\"type\\": {\\n                  \\"kind\\": \\"bool\\"\\n                }\\n              },\\n              {\\n                \\"name\\": \\"beneficiary\\",\\n                \\"type\\": {\\n                  \\"kind\\": \\"address\\"\\n                }\\n              },\\n              {\\n                \\"name\\": \\"asset\\",\\n                \\"type\\": {\\n                  \\"kind\\": \\"struct\\",\\n                  \\"contains\\": [\\n                    {\\n                      \\"name\\": \\"address\\",\\n                      \\"type\\": {\\n                        \\"kind\\": \\"address\\"\\n                      }\\n                    }\\n                  ]\\n                }\\n              },\\n              {\\n                \\"name\\": \\"amount\\",\\n                \\"type\\": {\\n                  \\"kind\\": \\"uint\\",\\n                  \\"bits\\": 256\\n                }\\n              },\\n              {\\n                \\"name\\": \\"canRemit\\",\\n                \\"type\\": {\\n                  \\"kind\\": \\"function\\",\\n                  \\"internal\\": true,\\n                  \\"contains\\": {\\n                    \\"parameters\\": {\\n                      \\"type\\": {\\n                        \\"kind\\": \\"tuple\\",\\n                        \\"contains\\": []\\n                      }\\n                    },\\n                    \\"returns\\": {\\n                      \\"type\\": {\\n                        \\"kind\\": \\"bool\\"\\n                      }\\n                    }\\n                  }\\n                }\\n              }\\n            ]\\n          }\\n        },\\n        \\"pointers\\": {\\n          \\"State_storage\\": {\\n            \\"expect\\": [\\n              \\"slot\\"\\n            ],\\n            \\"for\\": {\\n              \\"group\\": [\\n                {\\n                  \\"name\\": \\"ready\\",\\n                  \\"location\\": \\"storage\\",\\n                  \\"slot\\": \\"slot\\",\\n                  \\"offset\\": 0,\\n                  \\"length\\": 1\\n                },\\n                {\\n                  \\"name\\": \\"complete\\",\\n                  \\"location\\": \\"storage\\",\\n                  \\"slot\\": \\"slot\\",\\n                  \\"offset\\": 1,\\n                  \\"length\\": 1\\n                },\\n                {\\n                  \\"name\\": \\"beneficiary\\",\\n                  \\"location\\": \\"storage\\",\\n                  \\"slot\\": {\\n                    \\"$sum\\": [\\n                      \\"slot\\",\\n                      1\\n                    ]\\n                  }\\n                },\\n                {\\n                  \\"name\\": \\"asset\\",\\n                  \\"location\\": \\"storage\\",\\n                  \\"slot\\": {\\n                    \\"$sum\\": [\\n                      \\"slot\\",\\n                      2\\n                    ]\\n                  }\\n                },\\n                {\\n                  \\"name\\": \\"amount\\",\\n                  \\"location\\": \\"storage\\",\\n                  \\"slot\\": {\\n                    \\"$sum\\": [\\n                      \\"slot\\",\\n                      3\\n                    ]\\n                  }\\n                },\\n                {\\n                  \\"name\\": \\"canRemit\\",\\n                  \\"location\\": \\"storage\\",\\n                  \\"slot\\": {\\n                    \\"$sum\\": [\\n                      \\"slot\\",\\n                      4\\n                    ]\\n                  }\\n                }\\n              ]\\n            }\\n          }\\n        },\\n        \\"programs\\": [\\n          {\\n            \\"contract\\": {\\n              \\"name\\": \\"Escrow\\",\\n              \\"definition\\": {\\n                \\"source\\": {\\n                  \\"id\\": 1\\n                },\\n                \\"range\\": {\\n                  \\"offset\\": 0,\\n                  \\"length\\": 891\\n                }\\n              }\\n            },\\n            \\"environment\\": \\"create\\",\\n            \\"instructions\\": [\\n              {\\n                \\"offset\\": 0,\\n                \\"operation\\": {\\n                  \\"mnemonic\\": \\"PUSH1\\",\\n                  \\"arguments\\": [\\n                    \\"0x80\\"\\n                  ]\\n                },\\n                \\"context\\": {\\n                  \\"code\\": {\\n                    \\"source\\": {\\n                      \\"id\\": 1\\n                    },\\n                    \\"range\\": {\\n                      \\"offset\\": 891,\\n                      \\"length\\": 20\\n                    }\\n                  }\\n                }\\n              }\\n            ]\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/materials/compilation\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/materials/compilation\\",\\n    \\"title\\": \\"ethdebug/format/materials/compilation\\",\\n    \\"description\\": \\"An object representing a single invocation of a compiler.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"id\\": {\\n        \\"description\\": \\"Compilation ID\\\\n\\\\nThis value **should** be globally-unique and generated only from the\\\\ncompiler inputs (settings, sources, etc.); the same compiler inputs/\\\\nsettings **should** produce the same identifier.\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/materials/id\\"\\n      },\\n      \\"compiler\\": {\\n        \\"type\\": \\"object\\",\\n        \\"title\\": \\"Compiler name and version\\",\\n        \\"properties\\": {\\n          \\"name\\": {\\n            \\"type\\": \\"string\\",\\n            \\"description\\": \\"Compiler name\\"\\n          },\\n          \\"version\\": {\\n            \\"type\\": \\"string\\",\\n            \\"description\\": \\"Compiler version.\\\\n\\\\nThis value **should** be specified using the most detailed version\\\\nrepresentation available, i.e., including source control hash and\\\\ncompiler build information whenever possible.\\\\n\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"name\\",\\n          \\"version\\"\\n        ],\\n        \\"examples\\": [\\n          {\\n            \\"name\\": \\"lllc\\",\\n            \\"version\\": \\"0.4.12-develop.2017.6.27+commit.b83f77e0.Linux.g++\\"\\n          }\\n        ]\\n      },\\n      \\"settings\\": {\\n        \\"description\\": \\"Compiler settings in a format native to the compiler.\\\\n\\\\nFor compilers whose settings includes full source representations, this\\\\nfield **should** be specified in such a way that avoids large data\\\\nredundancies (e.g. if compiler settings contain full source\\\\nrepresentations, then this field would significantly duplicate the\\\\ninformation represented by the `sources` field in this object).\\\\n\\\\nIn situations where settings information duplicates information\\\\nrepresented elsewhere in **ethdebug/format**, compilers **may** adopt\\\\nany reasonable strategy, e.g.:\\\\n  - omit duplications partially (leaving the rest of the settings\\\\n    intact)\\\\n  - omit this field entirely\\\\n  - specify this field as a hash of the full settings\\\\n    representation (with the expectation that users of this format will\\\\n    have access to the full representation by some other means)\\\\n\\",\\n        \\"allOf\\": [\\n          true\\n        ]\\n      },\\n      \\"sources\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/materials/source\\"\\n        }\\n      }\\n    },\\n    \\"required\\": [\\n      \\"id\\",\\n      \\"compiler\\",\\n      \\"sources\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"id\\": \\"foo\\",\\n        \\"compiler\\": {\\n          \\"name\\": \\"lllc\\",\\n          \\"version\\": \\"0.4.12-develop.2017.6.27+commit.b83f77e0.Linux.g++\\"\\n        },\\n        \\"sources\\": [\\n          {\\n            \\"id\\": 0,\\n            \\"path\\": \\"stdin\\",\\n            \\"contents\\": \\"(add 1 (mul 2 (add 3 4)))\\\\n\\",\\n            \\"language\\": \\"LLL\\"\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/materials/id\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/materials/id\\",\\n    \\"title\\": \\"ethdebug/format/materials/id\\",\\n    \\"description\\": \\"An opaque external ID (likely generated by compiler)\\",\\n    \\"type\\": [\\n      \\"number\\",\\n      \\"string\\"\\n    ],\\n    \\"examples\\": [\\n      5,\\n      \\"five\\"\\n    ]\\n  },\\n  \\"schema:ethdebug/format/materials/reference\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/materials/reference\\",\\n    \\"title\\": \\"ethdebug/format/materials/reference\\",\\n    \\"description\\": \\"A reference to an external resource by ID\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"id\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/materials/id\\"\\n      },\\n      \\"type\\": {\\n        \\"enum\\": [\\n          \\"compilation\\",\\n          \\"source\\"\\n        ]\\n      }\\n    },\\n    \\"required\\": [\\n      \\"id\\"\\n    ],\\n    \\"unevaluatedProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"id\\": 1\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/materials/source-range\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/materials/source-range\\",\\n    \\"title\\": \\"ethdebug/format/materials/source-range\\",\\n    \\"description\\": \\"A range of bytes in a particular source.\\\\n\\\\nNote that this refers to the bytes range in the original character encoding\\\\nfor the source, not the character encoding used for strings in this JSON\\\\nformat (UTF-8). For compilers that support input sources in encodings other\\\\nthan this format\'s transmission encoding, compilers **must** address source\\\\nranges in this original encoding, and debuggers **must** re-encode source\\\\ncontents obtained from this format _before_ performing any range addressing.\\\\n\\\\n(Compilers that only accept UTF-8 or ASCII are naturally exempt from this\\\\nconcern.)\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"compilation\\": {\\n        \\"title\\": \\"Compilation reference by ID\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/materials/reference\\"\\n      },\\n      \\"source\\": {\\n        \\"title\\": \\"Source reference by ID\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/materials/reference\\"\\n      },\\n      \\"range\\": {\\n        \\"title\\": \\"Bytes range within source contents\\",\\n        \\"description\\": \\"Ranges that span the entire source contents **may** omit this field\\\\nas a shorthand. This field is otherwise **required**.\\\\n\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"offset\\": {\\n            \\"description\\": \\"Byte offset at beginning of range.\\\\n\\",\\n            \\"$ref\\": \\"schema:ethdebug/format/data/value\\"\\n          },\\n          \\"length\\": {\\n            \\"description\\": \\"Number of bytes contained in range\\",\\n            \\"$ref\\": \\"schema:ethdebug/format/data/value\\"\\n          }\\n        },\\n        \\"unevaluatedProperties\\": false,\\n        \\"required\\": [\\n          \\"offset\\",\\n          \\"length\\"\\n        ]\\n      }\\n    },\\n    \\"unevaluatedProperties\\": false,\\n    \\"required\\": [\\n      \\"source\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"source\\": {\\n          \\"id\\": 5\\n        },\\n        \\"range\\": {\\n          \\"offset\\": 20,\\n          \\"length\\": 100\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/materials/source\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/materials/source\\",\\n    \\"title\\": \\"ethdebug/format/materials/source\\",\\n    \\"description\\": \\"An object representing one unit of compiler input, the raw text contents and\\\\nidentifying metadata (such as file path) that were given to the compiler as\\\\npart of a compilation.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"id\\": {\\n        \\"description\\": \\"Source identifier. This field **must** be unique for all sources\\\\nwithin a single compiler invocation (compilation).\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/materials/id\\"\\n      },\\n      \\"path\\": {\\n        \\"type\\": \\"string\\",\\n        \\"description\\": \\"Hierarchical file-system-like path to this source. This value may\\\\nbe an absolute path, a path relative to some root directory, a path\\\\nto some resource within a package, etc.\\\\n\\\\nThis value does not need to correspond to any file on disk (either\\\\nphysical or virtual), and might instead refer to a path identifier\\\\nfor a source that was generated by a compiler or other development tool.\\\\n\\\\nThis format makes no specific restrictions on how paths should be\\\\nspecified (e.g., no restriction on path separators, etc.), other than\\\\nthat values for this field should match what users observe elsewhere for\\\\nthe inputs/outputs of this particular compiler invocation.\\\\n\\\\nIf no path information is available for a particular source, e.g. if the\\\\nsource was provided to the compiler via shell standard input, this field\\\\nshould indicate that somehow (e.g., specifying `\\\\\\"path\\\\\\": \\\\\\"stdin\\\\\\"` or\\\\nsimilar).\\\\n\\\\nThis field\'s value **should** be unique across all sources within the\\\\nsame compilation.\\\\n\\"\\n      },\\n      \\"contents\\": {\\n        \\"description\\": \\"The full contents of the source, possibly re-encoded as UTF-8 to\\\\nmatch parent JSON encoding.\\\\n\\\\nIn cases where input source used a different encoding, this object\\\\n**must** also specify an `encoding` property to indicate the\\\\nencoding originally used. Where relevant, debuggers **must** also\\\\nconvert these `contents` back to the specified original encoding so\\\\nas to match code author expectations.\\\\n\\",\\n        \\"type\\": \\"string\\"\\n      },\\n      \\"encoding\\": {\\n        \\"description\\": \\"Character encoding of original source `contents`. This property\\\\nis **required** if this encoding does not match the JSON transmission\\\\nencoding (UTF-8), since the value of the `contents` property will\\\\nrepresent the text of the source of this JSON encoding.\\\\n\\\\nThis property **must not** appear in objects that do not specify\\\\na `contents` property.\\\\n\\",\\n        \\"type\\": \\"string\\"\\n      },\\n      \\"language\\": {\\n        \\"description\\": \\"The high-level language that the source contents are written in.\\\\n\\",\\n        \\"type\\": \\"string\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"id\\",\\n      \\"path\\",\\n      \\"contents\\",\\n      \\"language\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"id\\": 5,\\n        \\"path\\": \\"./contracts/SimpleStorage.sol\\",\\n        \\"contents\\": \\"// SPDX-License-Identifier: GPL-3.0\\\\npragma solidity >=0.4.16 <0.9.0;\\\\n\\\\ncontract SimpleStorage {\\\\n    uint storedData;\\\\n\\\\n    function set(uint x) public {\\\\n        storedData = x;\\\\n    }\\\\n\\\\n    function get() public view returns (uint) {\\\\n        return storedData;\\\\n    }\\\\n}\\\\n\\",\\n        \\"language\\": \\"Solidity\\"\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/collection/conditional\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/collection/conditional\\",\\n    \\"title\\": \\"ethdebug/format/pointer/collection/conditional\\",\\n    \\"description\\": \\"A pointer defined conditionally based on the non-zero-ness of some expression\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"if\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\"\\n      },\\n      \\"then\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer\\"\\n      },\\n      \\"else\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"if\\",\\n      \\"then\\"\\n    ],\\n    \\"additionalProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"if\\": 0,\\n        \\"then\\": {\\n          \\"location\\": \\"memory\\",\\n          \\"offset\\": 0,\\n          \\"length\\": 1\\n        },\\n        \\"else\\": {\\n          \\"location\\": \\"memory\\",\\n          \\"offset\\": 1,\\n          \\"length\\": 1\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/collection/group\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/collection/group\\",\\n    \\"title\\": \\"ethdebug/format/pointer/collection/group\\",\\n    \\"description\\": \\"A composite collection of pointers\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"group\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer\\"\\n        },\\n        \\"minItems\\": 1\\n      }\\n    },\\n    \\"required\\": [\\n      \\"group\\"\\n    ],\\n    \\"additionalProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"group\\": [\\n          {\\n            \\"name\\": \\"data-pointer\\",\\n            \\"location\\": \\"stack\\",\\n            \\"slot\\": 0\\n          },\\n          {\\n            \\"location\\": \\"memory\\",\\n            \\"offset\\": {\\n              \\"$read\\": \\"data-pointer\\"\\n            },\\n            \\"length\\": 32\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/collection/list\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/collection/list\\",\\n    \\"title\\": \\"ethdebug/format/pointer/collection/list\\",\\n    \\"description\\": \\"An ordered list of pointers, indexed starting at zero.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"list\\": {\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"count\\": {\\n            \\"description\\": \\"The size of the list that this collection represents.\\\\n\\",\\n            \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\"\\n          },\\n          \\"each\\": {\\n            \\"description\\": \\"An identifier name whose value as an expression resolves to the index\\\\nin the list\\\\n\\",\\n            \\"$ref\\": \\"schema:ethdebug/format/pointer/identifier\\"\\n          },\\n          \\"is\\": {\\n            \\"description\\": \\"The dynamically-generated pointer repeated as a list\\\\n\\",\\n            \\"$ref\\": \\"schema:ethdebug/format/pointer\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"count\\",\\n          \\"each\\",\\n          \\"is\\"\\n        ]\\n      }\\n    },\\n    \\"required\\": [\\n      \\"list\\"\\n    ],\\n    \\"additionalProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"list\\": {\\n          \\"count\\": 5,\\n          \\"each\\": \\"index\\",\\n          \\"is\\": {\\n            \\"location\\": \\"memory\\",\\n            \\"offset\\": {\\n              \\"$read\\": \\"index\\"\\n            },\\n            \\"length\\": 1\\n          }\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/collection/reference\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/collection/reference\\",\\n    \\"title\\": \\"ethdebug/format/pointer/collection/reference\\",\\n    \\"description\\": \\"A pointer by named reference to a pointer template (defined elsewhere).\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"template\\": {\\n        \\"title\\": \\"Template identifier\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/identifier\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"template\\"\\n    ],\\n    \\"additionalProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"template\\": \\"string-storage-pointer\\"\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/collection/scope\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/collection/scope\\",\\n    \\"title\\": \\"ethdebug/format/pointer/collection/scope\\",\\n    \\"description\\": \\"A pointer defined with the aid of additional variables with values specified\\\\nas expressions.\\\\n\\\\nVariables are specified by the `define` field as an object mapping of\\\\nexpression by identifier. Variables are specified **in order**, so that\\\\nlater appearing variables may reference earlier ones in the same object.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"define\\": {\\n        \\"title\\": \\"Mapping of variables to expression value\\",\\n        \\"type\\": \\"object\\",\\n        \\"patternProperties\\": {\\n          \\"^[a-zA-Z_\\\\\\\\-]+[a-zA-Z0-9$_\\\\\\\\-]*$\\": {\\n            \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\"\\n          }\\n        },\\n        \\"additionalProperties\\": false\\n      },\\n      \\"in\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"define\\",\\n      \\"in\\"\\n    ],\\n    \\"additionalProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"define\\": {\\n          \\"example-offset\\": {\\n            \\"$sum\\": [\\n              1,\\n              2\\n            ]\\n          },\\n          \\"example-length\\": {\\n            \\"$product\\": [\\n              2,\\n              \\"$wordsize\\"\\n            ]\\n          }\\n        },\\n        \\"in\\": {\\n          \\"name\\": \\"example\\",\\n          \\"location\\": \\"memory\\",\\n          \\"offset\\": \\"example-offset\\",\\n          \\"length\\": \\"example-length\\"\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/collection\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/collection\\",\\n    \\"title\\": \\"ethdebug/format/pointer/collection\\",\\n    \\"description\\": \\"A representation of a collection of pointers to data in the EVM\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"allOf\\": [\\n      {\\n        \\"oneOf\\": [\\n          {\\n            \\"required\\": [\\n              \\"group\\"\\n            ]\\n          },\\n          {\\n            \\"required\\": [\\n              \\"list\\"\\n            ]\\n          },\\n          {\\n            \\"required\\": [\\n              \\"if\\"\\n            ]\\n          },\\n          {\\n            \\"required\\": [\\n              \\"define\\"\\n            ]\\n          },\\n          {\\n            \\"required\\": [\\n              \\"template\\"\\n            ]\\n          }\\n        ]\\n      },\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"group\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/collection/group\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"list\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/collection/list\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"if\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/collection/conditional\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"define\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/collection/scope\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"template\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/collection/reference\\"\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/expression\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/expression\\",\\n    \\"title\\": \\"ethdebug/format/pointer/expression\\",\\n    \\"description\\": \\"A schema for describing expressions that evaluate to values.\\\\n\\",\\n    \\"oneOf\\": [\\n      {\\n        \\"$ref\\": \\"#/$defs/Literal\\"\\n      },\\n      {\\n        \\"$ref\\": \\"#/$defs/Variable\\"\\n      },\\n      {\\n        \\"$ref\\": \\"#/$defs/Constant\\"\\n      },\\n      {\\n        \\"$ref\\": \\"#/$defs/Arithmetic\\"\\n      },\\n      {\\n        \\"$ref\\": \\"#/$defs/Lookup\\"\\n      },\\n      {\\n        \\"$ref\\": \\"#/$defs/Read\\"\\n      },\\n      {\\n        \\"$ref\\": \\"#/$defs/Keccak256\\"\\n      },\\n      {\\n        \\"$ref\\": \\"#/$defs/Resize\\"\\n      }\\n    ],\\n    \\"$defs\\": {\\n      \\"Literal\\": {\\n        \\"title\\": \\"Literal value\\",\\n        \\"description\\": \\"An unsigned number or a `0x`-prefixed string of hexadecimal digits\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/data/value\\",\\n        \\"examples\\": [\\n          5,\\n          \\"0x0000000000000000000000000000000000000000000000000000000000000000\\"\\n        ]\\n      },\\n      \\"Constant\\": {\\n        \\"title\\": \\"Constant value\\",\\n        \\"type\\": \\"string\\",\\n        \\"enum\\": [\\n          \\"$wordsize\\"\\n        ]\\n      },\\n      \\"Variable\\": {\\n        \\"title\\": \\"Variable identifier\\",\\n        \\"description\\": \\"A string that matches an identifier used in an earlier declaration of\\\\na scalar variable. This expression evaluates to the value of that\\\\nvariable.\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/identifier\\"\\n      },\\n      \\"Arithmetic\\": {\\n        \\"title\\": \\"Arithmetic operation\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"$sum\\": {\\n            \\"description\\": \\"A list of expressions to be added together.\\\\n\\",\\n            \\"$ref\\": \\"#/$defs/Operands\\"\\n          },\\n          \\"$difference\\": {\\n            \\"description\\": \\"A tuple of two expressions where the second is to be subtracted from\\\\nthe first.\\\\n\\\\nIf the second operand is larger than the first, the result of this\\\\narithmetic operation is defined to equal zero (`0`).\\\\n\\\\n(i.e., `{ \\\\\\"$difference\\\\\\": [a, b] }` equals `a` minus `b`.)\\\\n\\",\\n            \\"$ref\\": \\"#/$defs/Operands\\",\\n            \\"minItems\\": 2,\\n            \\"maxItems\\": 2\\n          },\\n          \\"$product\\": {\\n            \\"description\\": \\"A list of expressions to be multiplied.\\\\n\\",\\n            \\"$ref\\": \\"#/$defs/Operands\\"\\n          },\\n          \\"$quotient\\": {\\n            \\"description\\": \\"A tuple of two expressions where the first corresponds to the\\\\ndividend and the second corresponds to the divisor, for the purposes\\\\nof doing integer division.\\\\n\\\\n(i.e., `{ \\\\\\"$quotient\\\\\\": [a, b] }` equals `a` divided by `b`.)\\\\n\\",\\n            \\"$ref\\": \\"#/$defs/Operands\\",\\n            \\"minItems\\": 2,\\n            \\"maxItems\\": 2\\n          },\\n          \\"$remainder\\": {\\n            \\"description\\": \\"A tuple of two expressions where the first corresponds to the\\\\ndividend and the second corresponds to the divisor, for the purposes\\\\nof computing the modular-arithmetic remainder.\\\\n\\\\n(i.e., `{ \\\\\\"$remainder\\\\\\": [a, b] }` equals `a` mod `b`.)\\\\n\\",\\n            \\"$ref\\": \\"#/$defs/Operands\\",\\n            \\"minItems\\": 2,\\n            \\"maxItems\\": 2\\n          }\\n        },\\n        \\"additionalProperties\\": false,\\n        \\"minProperties\\": 1,\\n        \\"maxProperties\\": 1,\\n        \\"examples\\": [\\n          {\\n            \\"$sum\\": [\\n              5,\\n              3,\\n              4\\n            ]\\n          },\\n          {\\n            \\"$difference\\": [\\n              5,\\n              3\\n            ]\\n          },\\n          {\\n            \\"$product\\": [\\n              5,\\n              3,\\n              0\\n            ]\\n          },\\n          {\\n            \\"$quotient\\": [\\n              5,\\n              3\\n            ]\\n          },\\n          {\\n            \\"$remainder\\": [\\n              {\\n                \\"$product\\": [\\n                  2,\\n                  2,\\n                  2,\\n                  2\\n                ]\\n              },\\n              3\\n            ]\\n          }\\n        ]\\n      },\\n      \\"Operands\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\"\\n        }\\n      },\\n      \\"Lookup\\": {\\n        \\"title\\": \\"Lookup region definition\\",\\n        \\"description\\": \\"An object of the form `{ \\\\\\".<property-name>\\\\\\": \\\\\\"<region>\\\\\\" }`, to\\\\ndenote that this expression is equivalent to the defined value for\\\\nthe property named `<property-name>` inside the region referenced as\\\\n`<region>`.\\\\n\\\\n`<property-name>` **must** be a valid and present property on the\\\\ncorresponding region, or it **must** correspond to an optional property\\\\nwhose schema specifies a default value for that property.\\\\n\\",\\n        \\"type\\": \\"object\\",\\n        \\"patternProperties\\": {\\n          \\"^\\\\\\\\.(offset|length|slot)$\\": {\\n            \\"$ref\\": \\"#/$defs/Reference\\"\\n          }\\n        },\\n        \\"additionalProperties\\": false,\\n        \\"minProperties\\": 1,\\n        \\"maxProperties\\": 1,\\n        \\"examples\\": [\\n          {\\n            \\".offset\\": \\"array-count\\"\\n          },\\n          {\\n            \\".length\\": \\"array-item\\"\\n          },\\n          {\\n            \\".offset\\": \\"$this\\"\\n          }\\n        ]\\n      },\\n      \\"Read\\": {\\n        \\"title\\": \\"Read region bytes\\",\\n        \\"description\\": \\"An object of the form `{ \\\\\\"$read\\\\\\": \\\\\\"<region>\\\\\\" }`. The value of this\\\\nexpression equals the raw bytes present in the running machine state\\\\nin the referenced region.\\\\n\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"$read\\": {\\n            \\"$ref\\": \\"#/$defs/Reference\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"$read\\"\\n        ],\\n        \\"additionalProperties\\": false,\\n        \\"examples\\": [\\n          {\\n            \\"$read\\": \\"struct-start\\"\\n          }\\n        ]\\n      },\\n      \\"Reference\\": {\\n        \\"title\\": \\"Region reference\\",\\n        \\"description\\": \\"A string value that **must** either be the `\\\\\\"name\\\\\\"` of at least one\\\\nregion declared with `{ \\\\\\"name\\\\\\": \\\\\\"<region>\\\\\\" }` previously in some root\\\\npointer representation, or it **must** be the literal value `\\\\\\"$this\\\\\\"`,\\\\nwhich indicates a reference to the region containing this expression.\\\\n\\\\nIf more than one region is defined with the same name, resolution is\\\\ndefined as firstly resolving to the latest earlier sibling that declares\\\\nthe matching name, then secondly resolving to the parent if it matches,\\\\nthen to parent\'s earlier siblings, and so on.\\\\n\\",\\n        \\"type\\": \\"string\\",\\n        \\"oneOf\\": [\\n          {\\n            \\"$ref\\": \\"schema:ethdebug/format/pointer/identifier\\"\\n          },\\n          {\\n            \\"const\\": \\"$this\\",\\n            \\"description\\": \\"Indicates a reference to the region containing this expression.\\\\n\\"\\n          }\\n        ]\\n      },\\n      \\"Keccak256\\": {\\n        \\"title\\": \\"Keccak256 hash\\",\\n        \\"description\\": \\"An object of the form `{ \\\\\\"$keccak256\\\\\\": [...values] }`, indicating that this\\\\nexpression evaluates to the Solidity-style keccak256 hash of the\\\\ntightly-packed bytes encoded by `values`.\\\\n\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"$keccak256\\": {\\n            \\"title\\": \\"Array of hashed values\\",\\n            \\"type\\": \\"array\\",\\n            \\"items\\": {\\n              \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\"\\n            }\\n          }\\n        },\\n        \\"additionalProperties\\": false,\\n        \\"required\\": [\\n          \\"$keccak256\\"\\n        ],\\n        \\"examples\\": [\\n          {\\n            \\"$keccak256\\": [\\n              0,\\n              \\"0x00\\"\\n            ]\\n          }\\n        ]\\n      },\\n      \\"Resize\\": {\\n        \\"title\\": \\"Resize data\\",\\n        \\"description\\": \\"A resize operation expression is either an object of the form\\\\n`{ \\\\\\"$sized<N>\\\\\\": <expression> }` or an object of the form\\\\n`{ \\\\\\"$wordsized\\\\\\": <expression> }`, where `<expression>` is an expression\\\\nwhose value is to be resized, and, if applicable, where `<N>` is the\\\\nsmallest decimal representation of an unsigned integer.\\\\n\\\\nThis object\'s value is evaluated as follows, based on the bytes width of\\\\nthe value `<expression>` evaluates to and based on `<N>` (using the\\\\nvalue of `\\\\\\"$wordsize\\\\\\"` for `<N>` in the case of the latter form above):\\\\n- If the width equals `<N>`, this object evaluates to the same value as\\\\n  `<expression>` (equivalent to the identity function or no-op).\\\\n- If the width is less than `<N>`, this object evaluates to the same value\\\\n  as `<expression>` but with additional zero-bytes (`0x00`) prepended on\\\\n  the left (most significant) side, such that the resulting bytes width\\\\n  equals `<N>`.\\\\n- If the width exceeds `<N>`, this object evaluates to the same value\\\\n  as `<expression>` but with a number of bytes removed from the left\\\\n  (most significant) side until the bytes width equals `<N>`.\\\\n\\\\n(These cases match the behavior that Solidity uses for resizing its\\\\n`bytesN`/`uintN` types.)\\\\n\\",\\n        \\"type\\": \\"object\\",\\n        \\"oneOf\\": [\\n          {\\n            \\"title\\": \\"Resize to literal number of bytes\\",\\n            \\"type\\": \\"object\\",\\n            \\"patternProperties\\": {\\n              \\"^\\\\\\\\$sized([1-9]+[0-9]*)$\\": {\\n                \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\"\\n              }\\n            },\\n            \\"additionalProperties\\": false\\n          },\\n          {\\n            \\"title\\": \\"Resize to word-size\\",\\n            \\"type\\": \\"object\\",\\n            \\"patternProperties\\": {\\n              \\"^\\\\\\\\$wordsized$\\": {\\n                \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\"\\n              }\\n            },\\n            \\"additionalProperties\\": false\\n          }\\n        ],\\n        \\"minProperties\\": 1,\\n        \\"maxProperties\\": 1,\\n        \\"examples\\": [\\n          {\\n            \\"$sized2\\": \\"0x00\\"\\n          },\\n          {\\n            \\"$sized2\\": \\"0xffffff\\"\\n          },\\n          {\\n            \\"$wordsized\\": \\"0x00\\"\\n          }\\n        ]\\n      }\\n    },\\n    \\"examples\\": [\\n      0,\\n      {\\n        \\"$sum\\": [\\n          {\\n            \\".offset\\": \\"array-start\\"\\n          },\\n          {\\n            \\".length\\": \\"array-start\\"\\n          },\\n          1\\n        ]\\n      },\\n      {\\n        \\"$keccak256\\": [\\n          5,\\n          {\\n            \\".offset\\": \\"array-start\\"\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/identifier\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/identifier\\",\\n    \\"title\\": \\"ethdebug/format/pointer/identifier\\",\\n    \\"description\\": \\"An identifier for use within the context of a root pointer\\\\n\\",\\n    \\"type\\": \\"string\\",\\n    \\"pattern\\": \\"^[a-zA-Z_\\\\\\\\-]+[a-zA-Z0-9$_\\\\\\\\-]*$\\",\\n    \\"examples\\": [\\n      \\"a\\",\\n      \\"a0\\",\\n      \\"-$\\",\\n      \\"__init__\\"\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/region/base\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/region/base\\",\\n    \\"title\\": \\"ethdebug/format/pointer/region/base\\",\\n    \\"description\\": \\"Common schema for all region schemas, regardless of `\\\\\\"location\\\\\\": ...`.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"name\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/identifier\\"\\n      },\\n      \\"location\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"location\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"name\\": \\"array-item\\",\\n        \\"location\\": \\"memory\\"\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/region/calldata\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/region/calldata\\",\\n    \\"title\\": \\"ethdebug/format/pointer/region/calldata\\",\\n    \\"description\\": \\"A schema for representing a region of data in message calldata.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the slice addressing scheme.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"allOf\\": [\\n      {\\n        \\"title\\": \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"calldata\\\\\\"\xa0}\\",\\n        \\"properties\\": {\\n          \\"location\\": {\\n            \\"const\\": \\"calldata\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"location\\"\\n        ]\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/region/base\\"\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/scheme/slice\\"\\n      }\\n    ],\\n    \\"unevaluatedProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"location\\": \\"calldata\\",\\n        \\"offset\\": \\"0x04\\",\\n        \\"length\\": 32\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/region/code\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/region/code\\",\\n    \\"title\\": \\"ethdebug/format/pointer/region/code\\",\\n    \\"description\\": \\"A schema for representing a region of data in EVM bytecode.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the slice addressing scheme.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"allOf\\": [\\n      {\\n        \\"title\\": \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"code\\\\\\"\xa0}\\",\\n        \\"properties\\": {\\n          \\"location\\": {\\n            \\"const\\": \\"code\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"location\\"\\n        ]\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/region/base\\"\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/scheme/slice\\"\\n      }\\n    ],\\n    \\"unevaluatedProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"location\\": \\"code\\",\\n        \\"offset\\": \\"0x04\\",\\n        \\"length\\": 32\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/region/memory\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/region/memory\\",\\n    \\"title\\": \\"ethdebug/format/pointer/region/memory\\",\\n    \\"description\\": \\"A schema for representing a region of data in EVM memory. Pointer regions\\\\nwithin memory represent a single/atomic sequence of byte locations.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the slice addressing scheme.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"allOf\\": [\\n      {\\n        \\"title\\": \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"memory\\\\\\"\xa0}\\",\\n        \\"properties\\": {\\n          \\"location\\": {\\n            \\"const\\": \\"memory\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"location\\"\\n        ]\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/region/base\\"\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/scheme/slice\\"\\n      }\\n    ],\\n    \\"unevaluatedProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"location\\": \\"memory\\",\\n        \\"offset\\": \\"0x04\\",\\n        \\"length\\": 32\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/region/returndata\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/region/returndata\\",\\n    \\"title\\": \\"ethdebug/format/pointer/region/returndata\\",\\n    \\"description\\": \\"A schema for representing a region of data in message returndata.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the slice addressing scheme.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"allOf\\": [\\n      {\\n        \\"title\\": \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"returndata\\\\\\"\xa0}\\",\\n        \\"properties\\": {\\n          \\"location\\": {\\n            \\"const\\": \\"returndata\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"location\\"\\n        ]\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/region/base\\"\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/scheme/slice\\"\\n      }\\n    ],\\n    \\"unevaluatedProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"location\\": \\"returndata\\",\\n        \\"offset\\": \\"0x04\\",\\n        \\"length\\": 32\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/region/stack\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/region/stack\\",\\n    \\"title\\": \\"ethdebug/format/pointer/region/stack\\",\\n    \\"description\\": \\"A schema for representing a region of data in the EVM.\\\\n\\\\nDescribes stack slots as number of positions from the top (at time of\\\\nobservation). Debuggers reading this information **should** immediately\\\\nconvert these positions to absolute positions from the bottom.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the segment addressing scheme.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"allOf\\": [\\n      {\\n        \\"title\\": \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"stack\\\\\\"\xa0}\\",\\n        \\"properties\\": {\\n          \\"location\\": {\\n            \\"const\\": \\"stack\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"location\\"\\n        ]\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/region/base\\"\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/scheme/segment\\"\\n      }\\n    ],\\n    \\"unevaluatedProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"location\\": \\"stack\\",\\n        \\"slot\\": 0\\n      },\\n      {\\n        \\"location\\": \\"stack\\",\\n        \\"slot\\": 1,\\n        \\"length\\": {\\n          \\"$product\\": [\\n            \\"$wordsize\\",\\n            2\\n          ]\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/region/storage\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/region/storage\\",\\n    \\"title\\": \\"ethdebug/format/pointer/region/storage\\",\\n    \\"description\\": \\"A schema for representing a region of data in EVM storage.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the segment addressing scheme.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"allOf\\": [\\n      {\\n        \\"title\\": \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"storage\\\\\\"\xa0}\\",\\n        \\"properties\\": {\\n          \\"location\\": {\\n            \\"const\\": \\"storage\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"location\\"\\n        ]\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/region/base\\"\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/scheme/segment\\"\\n      }\\n    ],\\n    \\"unevaluatedProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"location\\": \\"storage\\",\\n        \\"slot\\": \\"0x03\\"\\n      },\\n      {\\n        \\"location\\": \\"storage\\",\\n        \\"slot\\": \\"0x06\\",\\n        \\"length\\": {\\n          \\"$product\\": [\\n            \\"$wordsize\\",\\n            2\\n          ]\\n        }\\n      },\\n      {\\n        \\"location\\": \\"storage\\",\\n        \\"slot\\": \\"0x08\\",\\n        \\"offset\\": {\\n          \\"$quotient\\": [\\n            \\"$wordsize\\",\\n            2\\n          ]\\n        },\\n        \\"length\\": {\\n          \\"$quotient\\": [\\n            \\"$wordsize\\",\\n            2\\n          ]\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/region/transient\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/region/transient\\",\\n    \\"title\\": \\"ethdebug/format/pointer/region/transient\\",\\n    \\"description\\": \\"A schema for representing a region of data in EVM transient storage.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the segment addressing scheme.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"allOf\\": [\\n      {\\n        \\"title\\": \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"transient\\\\\\"\xa0}\\",\\n        \\"properties\\": {\\n          \\"location\\": {\\n            \\"const\\": \\"transient\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"location\\"\\n        ]\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/region/base\\"\\n      },\\n      {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/scheme/segment\\"\\n      }\\n    ],\\n    \\"unevaluatedProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"location\\": \\"transient\\",\\n        \\"slot\\": \\"0x03\\"\\n      },\\n      {\\n        \\"location\\": \\"transient\\",\\n        \\"slot\\": \\"0x06\\",\\n        \\"length\\": {\\n          \\"$product\\": [\\n            \\"$wordsize\\",\\n            2\\n          ]\\n        }\\n      },\\n      {\\n        \\"location\\": \\"transient\\",\\n        \\"slot\\": \\"0x08\\",\\n        \\"offset\\": {\\n          \\"$quotient\\": [\\n            \\"$wordsize\\",\\n            2\\n          ]\\n        },\\n        \\"length\\": {\\n          \\"$quotient\\": [\\n            \\"$wordsize\\",\\n            2\\n          ]\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/region\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/region\\",\\n    \\"title\\": \\"ethdebug/format/pointer/region\\",\\n    \\"description\\": \\"A representation of a region of data in the EVM\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"location\\": {\\n        \\"$ref\\": \\"#/$defs/Location\\"\\n      }\\n    },\\n    \\"allOf\\": [\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"location\\": {\\n              \\"const\\": \\"stack\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/region/stack\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"location\\": {\\n              \\"const\\": \\"memory\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/region/memory\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"location\\": {\\n              \\"const\\": \\"storage\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/region/storage\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"location\\": {\\n              \\"const\\": \\"calldata\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/region/calldata\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"location\\": {\\n              \\"const\\": \\"returndata\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/region/returndata\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"location\\": {\\n              \\"const\\": \\"transient\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/region/transient\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"location\\": {\\n              \\"const\\": \\"code\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/region/code\\"\\n        }\\n      }\\n    ],\\n    \\"$defs\\": {\\n      \\"Location\\": {\\n        \\"type\\": \\"string\\",\\n        \\"enum\\": [\\n          \\"stack\\",\\n          \\"memory\\",\\n          \\"storage\\",\\n          \\"calldata\\",\\n          \\"returndata\\",\\n          \\"transient\\",\\n          \\"code\\"\\n        ]\\n      }\\n    },\\n    \\"unevaluatedProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"location\\": \\"storage\\",\\n        \\"slot\\": \\"0x0000000000000000000000000000000000000000000000000000000000000000\\"\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/scheme/segment\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/scheme/segment\\",\\n    \\"title\\": \\"ethdebug/format/pointer/scheme/segment\\",\\n    \\"description\\": \\"An addressing scheme for pointing to a range of bytes in a data location\\\\narranged as individually-addressable word-sized slots.\\\\n\\\\n**Note** that this addressing scheme permits addressing byte ranges that\\\\nextend beyond the last byte of a particular slot, or even covering the range\\\\nof multiple slots.\\\\n\\\\nIn such cases, this schema defines the range as the concatenation of bytes\\\\nacross slots such that the address of the first byte after the end of slot\\\\n`p` (i.e., `{ \\\\\\"offset\\\\\\": \\\\\\"$wordsize\\\\\\" }`) is interpreted as the first byte of\\\\nslot `p + 1`.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"slot\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\"\\n      },\\n      \\"offset\\": {\\n        \\"description\\": \\"The starting byte index within the slot.\\\\n\\\\nThis field is **optional**. If unspecified, it has the default value of\\\\n`0`, indicating that the segment begins at the start of the specified\\\\nslot.\\\\n\\\\nThis field\'s expression must resolve to a value _n_ such that\\\\n0&nbsp;\u2264&nbsp;_n_&nbsp;\\\\\\\\<&nbsp;`$wordsize` (i.e., the offset **must**\\\\nbegin inside the slot).\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\",\\n        \\"default\\": 0\\n      },\\n      \\"length\\": {\\n        \\"description\\": \\"The length of the bytes range this segment represents.\\\\n\\\\nThis field is **optional**. If unspecified, its default value indicates\\\\nthat the segment ends at the end of the slot.\\\\n\\\\nIf this field has value larger than the default value, i.e., if the\\\\nsegment extends beyond the last byte in the slot, then this segment is\\\\ndefined to be the concatenation of the sequentially-addressed slot(s)\\\\nfollowing following the slot specified.\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\",\\n        \\"default\\": {\\n          \\"$difference\\": [\\n            \\"$wordsize\\",\\n            {\\n              \\".offset\\": \\"$this\\"\\n            }\\n          ]\\n        }\\n      }\\n    },\\n    \\"required\\": [\\n      \\"slot\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"slot\\": 0\\n      },\\n      {\\n        \\"slot\\": 1,\\n        \\"length\\": {\\n          \\"$product\\": [\\n            \\"$wordsize\\",\\n            3\\n          ]\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/scheme/slice\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/scheme/slice\\",\\n    \\"title\\": \\"ethdebug/format/pointer/scheme/slice\\",\\n    \\"description\\": \\"An addressing scheme for pointing to a range of sequential bytes inside\\\\na data location whose structure is that of a regular bytes array\\\\n(i.e., where bytes are indexed by byte offset, with no concept of word).\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"offset\\": {\\n        \\"description\\": \\"The index of the byte (starting from zero) in the data location where\\\\nthe slice begins.\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\"\\n      },\\n      \\"length\\": {\\n        \\"description\\": \\"The length of the slice in number of bytes.\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer/expression\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"offset\\",\\n      \\"length\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"offset\\": 0,\\n        \\"length\\": 32\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer/template\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer/template\\",\\n    \\"title\\": \\"ethdebug/format/pointer/template\\",\\n    \\"description\\": \\"A schema for representing a pointer defined in terms of some variables whose\\\\nvalues are to be provided when invoking the template.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"expect\\": {\\n        \\"title\\": \\"Template variables\\",\\n        \\"description\\": \\"An array of variable identifiers used in the definition of the\\\\npointer template.\\\\n\\",\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/pointer/identifier\\"\\n        },\\n        \\"additionalItems\\": false\\n      },\\n      \\"for\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/pointer\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"expect\\",\\n      \\"for\\"\\n    ],\\n    \\"additionalProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"expect\\": [\\n          \\"slot\\"\\n        ],\\n        \\"for\\": {\\n          \\"location\\": \\"storage\\",\\n          \\"slot\\": \\"slot\\"\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/pointer\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/pointer\\",\\n    \\"title\\": \\"ethdebug/format/pointer\\",\\n    \\"description\\": \\"A schema for representing a pointer to a data position or a range of data\\\\npositions in the EVM.\\\\n\\\\nAn **ethdebug/format/pointer** is either a single region or a structured\\\\ncollection of other pointers.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"if\\": {\\n      \\"required\\": [\\n        \\"location\\"\\n      ]\\n    },\\n    \\"then\\": {\\n      \\"$ref\\": \\"schema:ethdebug/format/pointer/region\\"\\n    },\\n    \\"else\\": {\\n      \\"$ref\\": \\"schema:ethdebug/format/pointer/collection\\"\\n    },\\n    \\"examples\\": [\\n      {\\n        \\"location\\": \\"storage\\",\\n        \\"slot\\": 2\\n      },\\n      {\\n        \\"define\\": {\\n          \\"uint256-array-memory-pointer-slot\\": 0\\n        },\\n        \\"in\\": {\\n          \\"group\\": [\\n            {\\n              \\"name\\": \\"array-start\\",\\n              \\"location\\": \\"stack\\",\\n              \\"slot\\": \\"uint256-array-memory-pointer-slot\\"\\n            },\\n            {\\n              \\"name\\": \\"array-count\\",\\n              \\"location\\": \\"memory\\",\\n              \\"offset\\": {\\n                \\"$read\\": \\"array-start\\"\\n              },\\n              \\"length\\": \\"$wordsize\\"\\n            },\\n            {\\n              \\"list\\": {\\n                \\"count\\": {\\n                  \\"$read\\": \\"array-count\\"\\n                },\\n                \\"each\\": \\"item-index\\",\\n                \\"is\\": {\\n                  \\"name\\": \\"array-item\\",\\n                  \\"location\\": \\"memory\\",\\n                  \\"offset\\": {\\n                    \\"$sum\\": [\\n                      {\\n                        \\".offset\\": \\"array-count\\"\\n                      },\\n                      {\\n                        \\".length\\": \\"array-count\\"\\n                      },\\n                      {\\n                        \\"$product\\": [\\n                          \\"item-index\\",\\n                          {\\n                            \\".length\\": \\"$this\\"\\n                          }\\n                        ]\\n                      }\\n                    ]\\n                  },\\n                  \\"length\\": \\"$wordsize\\"\\n                }\\n              }\\n            }\\n          ]\\n        }\\n      },\\n      {\\n        \\"define\\": {\\n          \\"struct-storage-contract-variable-slot\\": 0\\n        },\\n        \\"in\\": {\\n          \\"group\\": [\\n            {\\n              \\"name\\": \\"x\\",\\n              \\"location\\": \\"storage\\",\\n              \\"slot\\": \\"struct-storage-contract-variable-slot\\",\\n              \\"offset\\": {\\n                \\"$difference\\": [\\n                  \\"$wordsize\\",\\n                  {\\n                    \\".length\\": \\"$this\\"\\n                  }\\n                ]\\n              },\\n              \\"length\\": 1\\n            },\\n            {\\n              \\"name\\": \\"y\\",\\n              \\"location\\": \\"storage\\",\\n              \\"slot\\": \\"struct-storage-contract-variable-slot\\",\\n              \\"offset\\": {\\n                \\"$difference\\": [\\n                  {\\n                    \\".offset\\": \\"x\\"\\n                  },\\n                  {\\n                    \\".length\\": \\"$this\\"\\n                  }\\n                ]\\n              },\\n              \\"length\\": 1\\n            },\\n            {\\n              \\"name\\": \\"salt\\",\\n              \\"location\\": \\"storage\\",\\n              \\"slot\\": \\"struct-storage-contract-variable-slot\\",\\n              \\"offset\\": {\\n                \\"$difference\\": [\\n                  {\\n                    \\".offset\\": \\"y\\"\\n                  },\\n                  {\\n                    \\".length\\": \\"$this\\"\\n                  }\\n                ]\\n              },\\n              \\"length\\": 4\\n            }\\n          ]\\n        }\\n      },\\n      {\\n        \\"group\\": [\\n          {\\n            \\"name\\": \\"array-start\\",\\n            \\"location\\": \\"stack\\",\\n            \\"slot\\": 0\\n          },\\n          {\\n            \\"name\\": \\"array-count\\",\\n            \\"location\\": \\"memory\\",\\n            \\"offset\\": {\\n              \\"$read\\": \\"array-start\\"\\n            },\\n            \\"length\\": \\"$wordsize\\"\\n          },\\n          {\\n            \\"list\\": {\\n              \\"count\\": {\\n                \\"$read\\": \\"array-count\\"\\n              },\\n              \\"each\\": \\"item-index\\",\\n              \\"is\\": {\\n                \\"group\\": [\\n                  {\\n                    \\"name\\": \\"struct-pointer\\",\\n                    \\"location\\": \\"memory\\",\\n                    \\"offset\\": {\\n                      \\"$sum\\": [\\n                        {\\n                          \\".offset\\": \\"array-count\\"\\n                        },\\n                        {\\n                          \\".length\\": \\"array-count\\"\\n                        },\\n                        {\\n                          \\"$product\\": [\\n                            \\"item-index\\",\\n                            {\\n                              \\".length\\": \\"struct-pointer\\"\\n                            }\\n                          ]\\n                        }\\n                      ]\\n                    },\\n                    \\"length\\": \\"$wordsize\\"\\n                  },\\n                  {\\n                    \\"name\\": \\"struct-member-0\\",\\n                    \\"location\\": \\"memory\\",\\n                    \\"offset\\": {\\n                      \\"$read\\": \\"struct-pointer\\"\\n                    },\\n                    \\"length\\": \\"$wordsize\\"\\n                  },\\n                  {\\n                    \\"name\\": \\"struct-member-1\\",\\n                    \\"location\\": \\"memory\\",\\n                    \\"offset\\": {\\n                      \\"$sum\\": [\\n                        {\\n                          \\".offset\\": \\"struct-member-0\\"\\n                        },\\n                        {\\n                          \\".length\\": \\"struct-member-0\\"\\n                        }\\n                      ]\\n                    },\\n                    \\"length\\": \\"$wordsize\\"\\n                  }\\n                ]\\n              }\\n            }\\n          }\\n        ]\\n      },\\n      {\\n        \\"define\\": {\\n          \\"string-storage-contract-variable-slot\\": 0\\n        },\\n        \\"in\\": {\\n          \\"group\\": [\\n            {\\n              \\"name\\": \\"length-flag\\",\\n              \\"location\\": \\"storage\\",\\n              \\"slot\\": \\"string-storage-contract-variable-slot\\",\\n              \\"offset\\": {\\n                \\"$difference\\": [\\n                  \\"$wordsize\\",\\n                  1\\n                ]\\n              },\\n              \\"length\\": 1\\n            },\\n            {\\n              \\"if\\": {\\n                \\"$remainder\\": [\\n                  {\\n                    \\"$sum\\": [\\n                      {\\n                        \\"$read\\": \\"length-flag\\"\\n                      },\\n                      1\\n                    ]\\n                  },\\n                  2\\n                ]\\n              },\\n              \\"then\\": {\\n                \\"define\\": {\\n                  \\"string-length\\": {\\n                    \\"$quotient\\": [\\n                      {\\n                        \\"$read\\": \\"length-flag\\"\\n                      },\\n                      2\\n                    ]\\n                  }\\n                },\\n                \\"in\\": {\\n                  \\"name\\": \\"string\\",\\n                  \\"location\\": \\"storage\\",\\n                  \\"slot\\": \\"string-storage-contract-variable-slot\\",\\n                  \\"offset\\": 0,\\n                  \\"length\\": \\"string-length\\"\\n                }\\n              },\\n              \\"else\\": {\\n                \\"group\\": [\\n                  {\\n                    \\"name\\": \\"long-string-length-data\\",\\n                    \\"location\\": \\"storage\\",\\n                    \\"slot\\": \\"string-storage-contract-variable-slot\\",\\n                    \\"offset\\": 0,\\n                    \\"length\\": \\"$wordsize\\"\\n                  },\\n                  {\\n                    \\"define\\": {\\n                      \\"string-length\\": {\\n                        \\"$quotient\\": [\\n                          {\\n                            \\"$difference\\": [\\n                              {\\n                                \\"$read\\": \\"long-string-length-data\\"\\n                              },\\n                              1\\n                            ]\\n                          },\\n                          2\\n                        ]\\n                      },\\n                      \\"start-slot\\": {\\n                        \\"$keccak256\\": [\\n                          {\\n                            \\"$wordsized\\": \\"string-storage-contract-variable-slot\\"\\n                          }\\n                        ]\\n                      },\\n                      \\"total-slots\\": {\\n                        \\"$quotient\\": [\\n                          {\\n                            \\"$sum\\": [\\n                              \\"string-length\\",\\n                              {\\n                                \\"$difference\\": [\\n                                  \\"$wordsize\\",\\n                                  1\\n                                ]\\n                              }\\n                            ]\\n                          },\\n                          \\"$wordsize\\"\\n                        ]\\n                      }\\n                    },\\n                    \\"in\\": {\\n                      \\"list\\": {\\n                        \\"count\\": \\"total-slots\\",\\n                        \\"each\\": \\"i\\",\\n                        \\"is\\": {\\n                          \\"define\\": {\\n                            \\"current-slot\\": {\\n                              \\"$sum\\": [\\n                                \\"start-slot\\",\\n                                \\"i\\"\\n                              ]\\n                            },\\n                            \\"previous-length\\": {\\n                              \\"$product\\": [\\n                                \\"i\\",\\n                                \\"$wordsize\\"\\n                              ]\\n                            }\\n                          },\\n                          \\"in\\": {\\n                            \\"if\\": {\\n                              \\"$difference\\": [\\n                                \\"string-length\\",\\n                                {\\n                                  \\"$sum\\": [\\n                                    \\"previous-length\\",\\n                                    \\"$wordsize\\"\\n                                  ]\\n                                }\\n                              ]\\n                            },\\n                            \\"then\\": {\\n                              \\"name\\": \\"string\\",\\n                              \\"location\\": \\"storage\\",\\n                              \\"slot\\": \\"current-slot\\"\\n                            },\\n                            \\"else\\": {\\n                              \\"name\\": \\"string\\",\\n                              \\"location\\": \\"storage\\",\\n                              \\"slot\\": \\"current-slot\\",\\n                              \\"offset\\": 0,\\n                              \\"length\\": {\\n                                \\"$difference\\": [\\n                                  \\"string-length\\",\\n                                  \\"previous-length\\"\\n                                ]\\n                              }\\n                            }\\n                          }\\n                        }\\n                      }\\n                    }\\n                  }\\n                ]\\n              }\\n            }\\n          ]\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/program/context/code\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/program/context/code\\",\\n    \\"title\\": \\"ethdebug/format/program/context/code\\",\\n    \\"description\\": \\"Information about the source code range corresponding to this point in\\\\nmachine execution.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"code\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/materials/source-range\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"code\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"code\\": {\\n          \\"source\\": {\\n            \\"id\\": 5\\n          },\\n          \\"range\\": {\\n            \\"offset\\": 68,\\n            \\"length\\": 16\\n          }\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/program/context/frame\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/program/context/frame\\",\\n    \\"title\\": \\"ethdebug/format/program/context/frame\\",\\n    \\"description\\": \\"A context may specify a `\\\\\\"frame\\\\\\"` property to indicate that its facts apply\\\\nonly to one of several possible compilation frames, e.g. for compilers with\\\\ndistinct frontend/backends to specify debugging data for the IR separately\\\\nfrom the debugging data for the source language.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"frame\\": {\\n        \\"title\\": \\"Relevant compilation frame\\",\\n        \\"type\\": \\"string\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"frame\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"frame\\": \\"ir\\"\\n      },\\n      {\\n        \\"frame\\": \\"source\\"\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/program/context/gather\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/program/context/gather\\",\\n    \\"title\\": \\"ethdebug/format/program/context/gather\\",\\n    \\"description\\": \\"A context specifying the `\\\\\\"gather\\\\\\"` property with a list of contexts\\\\nindicates that all specified contexts apply simultaneously.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"gather\\": {\\n        \\"title\\": \\"Contexts to gather\\",\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/program/context\\"\\n        },\\n        \\"minItems\\": 2,\\n        \\"additionalItems\\": false\\n      }\\n    },\\n    \\"required\\": [\\n      \\"gather\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"gather\\": [\\n          {\\n            \\"frame\\": \\"ir\\",\\n            \\"code\\": {\\n              \\"source\\": {\\n                \\"id\\": 0\\n              },\\n              \\"range\\": {\\n                \\"offset\\": 8,\\n                \\"length\\": 11\\n              }\\n            }\\n          },\\n          {\\n            \\"frame\\": \\"source\\",\\n            \\"code\\": {\\n              \\"source\\": {\\n                \\"id\\": 3\\n              },\\n              \\"range\\": {\\n                \\"offset\\": 113,\\n                \\"length\\": 19\\n              }\\n            }\\n          }\\n        ]\\n      },\\n      {\\n        \\"gather\\": [\\n          {\\n            \\"variables\\": [\\n              {\\n                \\"identifier\\": \\"x\\",\\n                \\"declaration\\": {\\n                  \\"source\\": {\\n                    \\"id\\": 5\\n                  },\\n                  \\"range\\": {\\n                    \\"offset\\": 10,\\n                    \\"length\\": 56\\n                  }\\n                },\\n                \\"type\\": {\\n                  \\"kind\\": \\"string\\"\\n                }\\n              }\\n            ]\\n          },\\n          {\\n            \\"variables\\": [\\n              {\\n                \\"identifier\\": \\"x\\",\\n                \\"declaration\\": {\\n                  \\"source\\": {\\n                    \\"id\\": 5\\n                  },\\n                  \\"range\\": {\\n                    \\"offset\\": 10,\\n                    \\"length\\": 56\\n                  }\\n                },\\n                \\"pointer\\": {\\n                  \\"location\\": \\"storage\\",\\n                  \\"slot\\": 0\\n                }\\n              }\\n            ]\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/program/context/name\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/program/context/name\\",\\n    \\"title\\": \\"ethdebug/format/program/context/name\\",\\n    \\"description\\": \\"The name of the context, for use in disambiguating future instruction\\\\nannotations that specify one of several possible contexts based on\\\\ninformation only available at runtime.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"name\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"name\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"name\\": \\"Array<T=bytes32>\\"\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/program/context/pick\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/program/context/pick\\",\\n    \\"title\\": \\"ethdebug/format/program/context/pick\\",\\n    \\"description\\": \\"A program context that specifies the `\\\\\\"pick\\\\\\"` property indicates that\\\\none of several possible contexts are known to be true, possibly requiring\\\\nadditional information to disambiguate.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"pick\\": {\\n        \\"title\\": \\"Contexts to pick from\\",\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/program/context\\"\\n        },\\n        \\"minItems\\": 2,\\n        \\"additionalItems\\": false\\n      }\\n    },\\n    \\"required\\": [\\n      \\"pick\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"pick\\": [\\n          {\\n            \\"code\\": {\\n              \\"source\\": {\\n                \\"id\\": 5\\n              },\\n              \\"range\\": {\\n                \\"offset\\": 68,\\n                \\"length\\": 16\\n              }\\n            }\\n          },\\n          {\\n            \\"code\\": {\\n              \\"source\\": {\\n                \\"id\\": 5\\n              },\\n              \\"range\\": {\\n                \\"offset\\": 132,\\n                \\"length\\": 16\\n              }\\n            }\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/program/context/remark\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/program/context/remark\\",\\n    \\"title\\": \\"ethdebug/format/program/context/remark\\",\\n    \\"description\\": \\"Human-readable information about the instruction. This field is intended\\\\nprimarily not for compilers to use directly, but rather for humans\\\\n(directly or indirectly) to use as an annotation field.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"remark\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"remark\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"remark\\": \\"jump to end if zero\\"\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/program/context/variables\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/program/context/variables\\",\\n    \\"title\\": \\"ethdebug/format/program/context/variables\\",\\n    \\"description\\": \\"Information about known variables at this context\'s point in code\\\\nexecution, specified as an array whose items each correspond to a unique\\\\nvariable.\\\\n\\\\nItems in this array **should not** have duplicate non-empty `identifier`\\\\nvalues except where high-level language semantics require it. Where\\\\npossible, use other mechanisms provided by this format to indicate that\\\\nan identifier\'s corresponding variable is ambiguous.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"variables\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"#/$defs/Variable\\"\\n        },\\n        \\"minItems\\": 1,\\n        \\"additionalItems\\": false\\n      }\\n    },\\n    \\"required\\": [\\n      \\"variables\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"variables\\": [\\n          {\\n            \\"identifier\\": \\"x\\",\\n            \\"declaration\\": {\\n              \\"source\\": {\\n                \\"id\\": 5\\n              },\\n              \\"range\\": {\\n                \\"offset\\": 10,\\n                \\"length\\": 56\\n              }\\n            },\\n            \\"type\\": {\\n              \\"kind\\": \\"string\\"\\n            },\\n            \\"pointer\\": {\\n              \\"location\\": \\"storage\\",\\n              \\"slot\\": 0\\n            }\\n          }\\n        ]\\n      }\\n    ],\\n    \\"$defs\\": {\\n      \\"Variable\\": {\\n        \\"title\\": \\"Variable\\",\\n        \\"description\\": \\"The information known about a variable at a particular point in the code\\\\nexecution.\\\\n\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"identifier\\": {\\n            \\"type\\": \\"string\\",\\n            \\"minLength\\": 1\\n          },\\n          \\"declaration\\": {\\n            \\"description\\": \\"Source range corresponding to where the variable was declared.\\\\n\\",\\n            \\"$ref\\": \\"schema:ethdebug/format/materials/source-range\\"\\n          },\\n          \\"type\\": {\\n            \\"description\\": \\"The variable\'s static type, if it exists. This **must** be specified\\\\neither as a full **ethdebug/format/type** representation, or an\\\\n`{ \\\\\\"id\\\\\\": \\\\\\"...\\\\\\" }` type reference object.\\\\n\\",\\n            \\"oneOf\\": [\\n              {\\n                \\"$ref\\": \\"schema:ethdebug/format/type\\"\\n              },\\n              {\\n                \\"$ref\\": \\"schema:ethdebug/format/type/reference\\"\\n              }\\n            ]\\n          },\\n          \\"pointer\\": {\\n            \\"description\\": \\"Allocation information for the variable, if it exists.\\\\n\\",\\n            \\"$ref\\": \\"schema:ethdebug/format/pointer\\"\\n          }\\n        },\\n        \\"minProperties\\": 1,\\n        \\"unevaluatedProperties\\": false,\\n        \\"examples\\": [\\n          {\\n            \\"identifier\\": \\"x\\",\\n            \\"declaration\\": {\\n              \\"source\\": {\\n                \\"id\\": 5\\n              },\\n              \\"range\\": {\\n                \\"offset\\": 10,\\n                \\"length\\": 56\\n              }\\n            }\\n          }\\n        ]\\n      }\\n    }\\n  },\\n  \\"schema:ethdebug/format/program/context\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/program/context\\",\\n    \\"title\\": \\"ethdebug/format/program/context\\",\\n    \\"description\\": \\"An **ethdebug/format/program/context** object represents compile-time\\\\ninformation about the high-level runtime execution state at a specific point\\\\nin a program\'s bytecode.\\\\n\\\\nThis schema provides a formal specification for this format\'s model of what\\\\ninformation can be known at compile-time about the high-level runtime. This\\\\nincludes data such as a particular machine instruction\'s source mapping or\\\\nwhat variables exist in runtime state following some instruction.\\\\n\\\\nThe context object supports dynamic context combination and selection through\\\\nthe use of `gather`, and `pick` properties. This allows for flexible\\\\ncomposition and extraction of context information.\\\\n\\\\nContexts serve as a bridge between low-level EVM execution and high-level\\\\nlanguage constructs. Debuggers can use these compile-time guarantees to\\\\nmaintain a coherent view of the high-level language runtime throughout\\\\nprogram execution. This enables debugging tools to map execution points to\\\\nsource code, reconstruct variable states, provide meaningful stack traces,\\\\nand offer insights into control flow and data structures.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"allOf\\": [\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"code\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/program/context/code\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"variables\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/program/context/variables\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"remark\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/program/context/remark\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"pick\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/program/context/pick\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"gather\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/program/context/gather\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"frame\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/program/context/frame\\"\\n        }\\n      }\\n    ],\\n    \\"unevaluatedProperties\\": false,\\n    \\"examples\\": [\\n      {\\n        \\"variables\\": [\\n          {\\n            \\"identifier\\": \\"x\\",\\n            \\"declaration\\": {\\n              \\"source\\": {\\n                \\"id\\": 5\\n              },\\n              \\"range\\": {\\n                \\"offset\\": 10,\\n                \\"length\\": 56\\n              }\\n            },\\n            \\"type\\": {\\n              \\"kind\\": \\"string\\"\\n            },\\n            \\"pointer\\": {\\n              \\"location\\": \\"storage\\",\\n              \\"slot\\": 0\\n            }\\n          }\\n        ],\\n        \\"code\\": {\\n          \\"source\\": {\\n            \\"id\\": 5\\n          },\\n          \\"range\\": {\\n            \\"offset\\": 68,\\n            \\"length\\": 16\\n          }\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/program/instruction\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/program/instruction\\",\\n    \\"title\\": \\"ethdebug/format/program/instruction\\",\\n    \\"description\\": \\"A schema for representing the information pertaining to a particular\\\\ninstruction in machine code.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"offset\\": {\\n        \\"title\\": \\"Instruction byte offset\\",\\n        \\"description\\": \\"The byte offset where the instruction begins within the bytecode.\\\\n\\\\nFor legacy contract bytecode (non-EOF), this value is equivalent to the\\\\ninstruction\'s program counter. For EOF bytecode, this value **must** be\\\\nthe offset from the start of the container, not the start of a particular\\\\ncode section within that container.\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/data/value\\"\\n      },\\n      \\"operation\\": {\\n        \\"title\\": \\"Machine operation information\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"mnemonic\\": {\\n            \\"description\\": \\"The mnemonic operation code (PUSH1, e.g.)\\",\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"arguments\\": {\\n            \\"description\\": \\"The immediate arguments to the operation, if relevant.\\",\\n            \\"type\\": \\"array\\",\\n            \\"minItems\\": 1,\\n            \\"items\\": {\\n              \\"description\\": \\"An immediate value specified as argument to the opcode\\\\n\\",\\n              \\"$ref\\": \\"schema:ethdebug/format/data/value\\"\\n            }\\n          }\\n        },\\n        \\"required\\": [\\n          \\"mnemonic\\"\\n        ]\\n      },\\n      \\"context\\": {\\n        \\"description\\": \\"The context known to exist following the execution of this instruction.\\\\n\\\\nThis field is **optional**. Omitting it is equivalent to specifying the\\\\nempty context value (`{}`).\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/program/context\\",\\n        \\"default\\": {}\\n      }\\n    },\\n    \\"required\\": [\\n      \\"offset\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"offset\\": 0,\\n        \\"operation\\": {\\n          \\"mnemonic\\": \\"PUSH1\\",\\n          \\"arguments\\": [\\n            \\"0x60\\"\\n          ]\\n        },\\n        \\"context\\": {\\n          \\"code\\": {\\n            \\"source\\": {\\n              \\"id\\": 5\\n            },\\n            \\"range\\": {\\n              \\"offset\\": 10,\\n              \\"length\\": 30\\n            }\\n          }\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/program\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/program\\",\\n    \\"title\\": \\"ethdebug/format/program\\",\\n    \\"description\\": \\"Debugging information about a particular bytecode in a compilation.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"compilation\\": {\\n        \\"title\\": \\"Compilation reference by ID\\",\\n        \\"description\\": \\"A reference to the compilation as an `{ \\\\\\"id\\\\\\": ... }` object.\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/materials/reference\\"\\n      },\\n      \\"contract\\": {\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"name\\": {\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"definition\\": {\\n            \\"$ref\\": \\"schema:ethdebug/format/materials/source-range\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"definition\\"\\n        ]\\n      },\\n      \\"environment\\": {\\n        \\"title\\": \\"Bytecode execution environment\\",\\n        \\"description\\": \\"Whether this bytecode is for contract creation or runtime calls.\\\\n\\",\\n        \\"type\\": \\"string\\",\\n        \\"enum\\": [\\n          \\"call\\",\\n          \\"create\\"\\n        ]\\n      },\\n      \\"context\\": {\\n        \\"description\\": \\"The context known to exist prior to the execution of the first\\\\ninstruction in the bytecode.\\\\n\\\\nThis field is **optional**. Omitting it is equivalent to specifying the\\\\nempty context value (`{}`).\\\\n\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/program/context\\",\\n        \\"default\\": {}\\n      },\\n      \\"instructions\\": {\\n        \\"type\\": \\"array\\",\\n        \\"description\\": \\"The full array of instructions for the bytecode.\\\\n\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/program/instruction\\"\\n        },\\n        \\"additionalItems\\": false\\n      }\\n    },\\n    \\"required\\": [\\n      \\"contract\\",\\n      \\"environment\\",\\n      \\"instructions\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"contract\\": {\\n          \\"name\\": \\"Incrementer\\",\\n          \\"definition\\": {\\n            \\"source\\": {\\n              \\"id\\": 0\\n            }\\n          }\\n        },\\n        \\"environment\\": \\"call\\",\\n        \\"context\\": {\\n          \\"variables\\": [\\n            {\\n              \\"identifier\\": \\"storedValue\\",\\n              \\"type\\": {\\n                \\"kind\\": \\"uint\\",\\n                \\"bits\\": 256\\n              },\\n              \\"pointer\\": {\\n                \\"location\\": \\"storage\\",\\n                \\"slot\\": 0\\n              }\\n            }\\n          ]\\n        },\\n        \\"instructions\\": [\\n          {\\n            \\"offset\\": 0,\\n            \\"operation\\": {\\n              \\"mnemonic\\": \\"PUSH0\\"\\n            },\\n            \\"context\\": {\\n              \\"variables\\": [\\n                {\\n                  \\"identifier\\": \\"storedValue\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"uint\\",\\n                    \\"bits\\": 256\\n                  },\\n                  \\"pointer\\": {\\n                    \\"location\\": \\"storage\\",\\n                    \\"slot\\": 0\\n                  }\\n                }\\n              ]\\n            }\\n          },\\n          {\\n            \\"offset\\": 1,\\n            \\"operation\\": {\\n              \\"mnemonic\\": \\"SLOAD\\"\\n            },\\n            \\"context\\": {\\n              \\"variables\\": [\\n                {\\n                  \\"identifier\\": \\"storedValue\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"uint\\",\\n                    \\"bits\\": 256\\n                  },\\n                  \\"pointer\\": {\\n                    \\"location\\": \\"storage\\",\\n                    \\"slot\\": 0\\n                  }\\n                },\\n                {\\n                  \\"identifier\\": \\"localValue\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"uint\\",\\n                    \\"bits\\": 256\\n                  },\\n                  \\"pointer\\": {\\n                    \\"location\\": \\"stack\\",\\n                    \\"slot\\": 0\\n                  }\\n                }\\n              ]\\n            }\\n          },\\n          {\\n            \\"offset\\": 2,\\n            \\"operation\\": {\\n              \\"mnemonic\\": \\"PUSH1\\",\\n              \\"arguments\\": [\\n                \\"0x01\\"\\n              ]\\n            },\\n            \\"context\\": {\\n              \\"variables\\": [\\n                {\\n                  \\"identifier\\": \\"storedValue\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"uint\\",\\n                    \\"bits\\": 256\\n                  },\\n                  \\"pointer\\": {\\n                    \\"location\\": \\"storage\\",\\n                    \\"slot\\": 0\\n                  }\\n                },\\n                {\\n                  \\"<<\\": {\\n                    \\"identifier\\": \\"localValue\\",\\n                    \\"type\\": {\\n                      \\"kind\\": \\"uint\\",\\n                      \\"bits\\": 256\\n                    },\\n                    \\"pointer\\": {\\n                      \\"location\\": \\"stack\\",\\n                      \\"slot\\": 0\\n                    }\\n                  },\\n                  \\"pointer\\": {\\n                    \\"location\\": \\"stack\\",\\n                    \\"slot\\": 1\\n                  }\\n                }\\n              ]\\n            }\\n          },\\n          {\\n            \\"offset\\": 4,\\n            \\"operation\\": {\\n              \\"mnemonic\\": \\"ADD\\"\\n            },\\n            \\"context\\": {\\n              \\"variables\\": [\\n                {\\n                  \\"identifier\\": \\"storedValue\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"uint\\",\\n                    \\"bits\\": 256\\n                  },\\n                  \\"pointer\\": {\\n                    \\"location\\": \\"storage\\",\\n                    \\"slot\\": 0\\n                  }\\n                },\\n                {\\n                  \\"identifier\\": \\"localValue\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"uint\\",\\n                    \\"bits\\": 256\\n                  },\\n                  \\"pointer\\": {\\n                    \\"location\\": \\"stack\\",\\n                    \\"slot\\": 0\\n                  }\\n                }\\n              ]\\n            }\\n          },\\n          {\\n            \\"offset\\": 5,\\n            \\"operation\\": {\\n              \\"mnemonic\\": \\"PUSH0\\"\\n            },\\n            \\"context\\": {\\n              \\"variables\\": [\\n                {\\n                  \\"identifier\\": \\"storedValue\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"uint\\",\\n                    \\"bits\\": 256\\n                  },\\n                  \\"pointer\\": {\\n                    \\"location\\": \\"storage\\",\\n                    \\"slot\\": 0\\n                  }\\n                },\\n                {\\n                  \\"<<\\": {\\n                    \\"identifier\\": \\"localValue\\",\\n                    \\"type\\": {\\n                      \\"kind\\": \\"uint\\",\\n                      \\"bits\\": 256\\n                    },\\n                    \\"pointer\\": {\\n                      \\"location\\": \\"stack\\",\\n                      \\"slot\\": 0\\n                    }\\n                  },\\n                  \\"pointer\\": {\\n                    \\"location\\": \\"stack\\",\\n                    \\"slot\\": 1\\n                  }\\n                }\\n              ]\\n            }\\n          },\\n          {\\n            \\"offset\\": 6,\\n            \\"operation\\": {\\n              \\"mnemonic\\": \\"SSTORE\\"\\n            },\\n            \\"context\\": {\\n              \\"variables\\": [\\n                {\\n                  \\"identifier\\": \\"storedValue\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"uint\\",\\n                    \\"bits\\": 256\\n                  },\\n                  \\"pointer\\": {\\n                    \\"location\\": \\"storage\\",\\n                    \\"slot\\": 0\\n                  }\\n                }\\n              ]\\n            }\\n          }\\n        ]\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/base\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/base\\",\\n    \\"title\\": \\"ethdebug/format/type/base\\",\\n    \\"description\\": \\"Defines the minimally necessary schema for a data type. Types belong to a particular `class` (`\\\\\\"elementary\\\\\\"` or `\\\\\\"complex\\\\\\"`), and are further identified by a particular `kind`.\\",\\n    \\"type\\": \\"object\\",\\n    \\"oneOf\\": [\\n      {\\n        \\"$ref\\": \\"#/$defs/ElementaryType\\"\\n      },\\n      {\\n        \\"$ref\\": \\"#/$defs/ComplexType\\"\\n      }\\n    ],\\n    \\"$defs\\": {\\n      \\"ElementaryType\\": {\\n        \\"title\\": \\"Base elementary type\\",\\n        \\"description\\": \\"Represents an elementary type (one that does not compose other types)\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"class\\": {\\n            \\"type\\": \\"string\\",\\n            \\"const\\": \\"elementary\\"\\n          },\\n          \\"kind\\": {\\n            \\"type\\": \\"string\\"\\n          },\\n          \\"contains\\": {\\n            \\"not\\": {\\n              \\"description\\": \\"Elementary types **must not** specify a `contains` field (to make it easier to discriminate elementary vs. complex)\\"\\n            }\\n          }\\n        },\\n        \\"required\\": [\\n          \\"kind\\"\\n        ],\\n        \\"examples\\": [\\n          {\\n            \\"kind\\": \\"uint\\",\\n            \\"bits\\": 256\\n          }\\n        ]\\n      },\\n      \\"ComplexType\\": {\\n        \\"title\\": \\"Base complex type\\",\\n        \\"description\\": \\"Represents a complex type, one that composes other types (e.g., arrays, structs, mappings)\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"class\\": {\\n            \\"type\\": \\"string\\",\\n            \\"const\\": \\"complex\\",\\n            \\"description\\": \\"Indicates that this is a complex type\\"\\n          },\\n          \\"kind\\": {\\n            \\"type\\": \\"string\\",\\n            \\"description\\": \\"The specific kind of complex type, e.g., array or struct\\"\\n          },\\n          \\"contains\\": {\\n            \\"title\\": \\"Complex type `contains` field\\",\\n            \\"description\\": \\"Either a type wrapper, an array of type wrappers, or an object mapping to type wrappers.\\",\\n            \\"oneOf\\": [\\n              {\\n                \\"$ref\\": \\"#/$defs/TypeWrapper\\"\\n              },\\n              {\\n                \\"$ref\\": \\"#/$defs/TypeWrapperArray\\"\\n              },\\n              {\\n                \\"$ref\\": \\"#/$defs/TypeWrapperObject\\"\\n              }\\n            ]\\n          }\\n        },\\n        \\"required\\": [\\n          \\"kind\\",\\n          \\"contains\\"\\n        ],\\n        \\"examples\\": [\\n          {\\n            \\"kind\\": \\"array\\",\\n            \\"contains\\": {\\n              \\"type\\": {\\n                \\"kind\\": \\"uint\\",\\n                \\"bits\\": 256\\n              }\\n            }\\n          },\\n          {\\n            \\"kind\\": \\"struct\\",\\n            \\"contains\\": [\\n              {\\n                \\"member\\": \\"x\\",\\n                \\"type\\": {\\n                  \\"kind\\": \\"uint\\",\\n                  \\"bits\\": 256\\n                }\\n              },\\n              {\\n                \\"member\\": \\"y\\",\\n                \\"type\\": {\\n                  \\"kind\\": \\"uint\\",\\n                  \\"bits\\": 256\\n                }\\n              }\\n            ]\\n          },\\n          {\\n            \\"kind\\": \\"mapping\\",\\n            \\"contains\\": {\\n              \\"key\\": {\\n                \\"type\\": {\\n                  \\"kind\\": \\"address\\",\\n                  \\"payable\\": true\\n                }\\n              },\\n              \\"value\\": {\\n                \\"type\\": {\\n                  \\"kind\\": \\"uint\\",\\n                  \\"bits\\": 256\\n                }\\n              }\\n            }\\n          }\\n        ]\\n      },\\n      \\"TypeWrapper\\": {\\n        \\"title\\": \\"{ \\\\\\"type\\\\\\": ... }\\",\\n        \\"description\\": \\"A wrapper around a type. Defines a `\\\\\\"type\\\\\\"` field that may include a full Type representation or a reference to a known Type by ID. Note that this schema permits additional properties on the same object.\\",\\n        \\"type\\": \\"object\\",\\n        \\"properties\\": {\\n          \\"type\\": {\\n            \\"oneOf\\": [\\n              {\\n                \\"$ref\\": \\"schema:ethdebug/format/type/base\\"\\n              },\\n              {\\n                \\"$ref\\": \\"schema:ethdebug/format/type/reference\\"\\n              }\\n            ]\\n          }\\n        },\\n        \\"required\\": [\\n          \\"type\\"\\n        ]\\n      },\\n      \\"TypeWrapperArray\\": {\\n        \\"title\\": \\"{ \\\\\\"type\\\\\\": ... }[]\\",\\n        \\"description\\": \\"A list of wrapped types, where the wrapper may add fields\\",\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"#/$defs/TypeWrapper\\"\\n        }\\n      },\\n      \\"TypeWrapperObject\\": {\\n        \\"title\\": \\"{ \\\\\\"key\\\\\\": { \\\\\\"type\\\\\\": ... }, ... }\\",\\n        \\"description\\": \\"A key-value mapping of wrapped types, where the wrapper may add fields\\",\\n        \\"type\\": \\"object\\",\\n        \\"additionalProperties\\": {\\n          \\"$ref\\": \\"#/$defs/TypeWrapper\\"\\n        }\\n      }\\n    }\\n  },\\n  \\"schema:ethdebug/format/type/complex/alias\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/complex/alias\\",\\n    \\"title\\": \\"ethdebug/format/type/complex/alias\\",\\n    \\"description\\": \\"Schema representing a type alias to another type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"complex\\"\\n      },\\n      \\"kind\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"alias\\"\\n      },\\n      \\"contains\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n      },\\n      \\"definition\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/type/definition\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\",\\n      \\"contains\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"alias\\",\\n        \\"contains\\": {\\n          \\"type\\": {\\n            \\"kind\\": \\"uint\\",\\n            \\"bits\\": 256\\n          }\\n        }\\n      },\\n      {\\n        \\"kind\\": \\"alias\\",\\n        \\"contains\\": {\\n          \\"type\\": {\\n            \\"kind\\": \\"array\\",\\n            \\"contains\\": {\\n              \\"type\\": {\\n                \\"class\\": \\"elementary\\",\\n                \\"kind\\": \\"super-uint\\",\\n                \\"blits\\": -256\\n              }\\n            }\\n          }\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/complex/array\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/complex/array\\",\\n    \\"title\\": \\"ethdebug/format/type/complex/array\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"complex\\"\\n      },\\n      \\"kind\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"array\\"\\n      },\\n      \\"contains\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\",\\n      \\"contains\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"array\\",\\n        \\"contains\\": {\\n          \\"type\\": {\\n            \\"kind\\": \\"uint\\",\\n            \\"bits\\": 256\\n          }\\n        }\\n      },\\n      {\\n        \\"kind\\": \\"array\\",\\n        \\"contains\\": {\\n          \\"type\\": {\\n            \\"kind\\": \\"array\\",\\n            \\"contains\\": {\\n              \\"type\\": {\\n                \\"class\\": \\"elementary\\",\\n                \\"kind\\": \\"super-uint\\",\\n                \\"blits\\": -256\\n              }\\n            }\\n          }\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/complex/function\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/complex/function\\",\\n    \\"title\\": \\"ethdebug/format/type/complex/function\\",\\n    \\"description\\": \\"Schema for representing a function type.\\\\n\\\\nType representations must indicate whether they represent a function that is\\\\ncalled internally (within the semantics of the language) or a function that\\\\nis called externally (via EVM contract call semantics and the Solidity ABI).\\\\nInternal function types require the `\\\\\\"internal\\\\\\": true` field; external\\\\nfunction types require `\\\\\\"external\\\\\\": true`.\\\\n\\\\nNote that external function types may include a representation of the\\\\ncontract type that defines or provides this function as an external\\\\ninterface.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"complex\\"\\n      },\\n      \\"kind\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"function\\"\\n      },\\n      \\"contains\\": {\\n        \\"type\\": \\"object\\",\\n        \\"title\\": \\"Parameter and return types\\",\\n        \\"description\\": \\"Types this function type composes. Function types inherently compose\\\\ntwo groupings of types (an ordered list of parameter types and typically\\\\neither a return value or return parameters). Function types\' `contains`\\\\nfield is organized as a mapping of `parameters` types (a type wrapper for\\\\na tuple type) and an optional `returns` type (either a generic type\\\\nwrapper or a type wrapper for a tuple type).\\\\n\\\\nThis definition applies for both cases (internal and external function\\\\ntypes). Each of those specific types may expand this `contains` field\\\\nschema with other semantic details (such as an external function type\\\\nindicating the contract type from which it is exposed).\\\\n\\",\\n        \\"properties\\": {\\n          \\"parameters\\": {\\n            \\"$ref\\": \\"#/$defs/Parameters\\"\\n          },\\n          \\"returns\\": {\\n            \\"type\\": \\"object\\",\\n            \\"title\\": \\"Return type (or tuple of types)\\",\\n            \\"description\\": \\"To accommodate languages differing in whether functions return single\\\\nvalues or lists of values, this field may be either a generic type\\\\nwrapper or explicitly defined as a type wrapper around a tuple type.\\\\n\\\\nDebuggers that implement this schema **should** be aware that\\\\nlanguages whose functions return sole values might return tuple\\\\ntypes. Resolving this ambiguity remains outside the scope of the\\\\nschema (but compilers **must** be consistent when representing\\\\nfunction types in this schema).\\\\n\\",\\n            \\"anyOf\\": [\\n              {\\n                \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n              },\\n              {\\n                \\"$ref\\": \\"#/$defs/Parameters\\"\\n              }\\n            ]\\n          }\\n        },\\n        \\"required\\": [\\n          \\"parameters\\"\\n        ]\\n      },\\n      \\"definition\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/type/definition\\"\\n      }\\n    },\\n    \\"oneOf\\": [\\n      {\\n        \\"type\\": \\"object\\",\\n        \\"title\\": \\"External function type\\",\\n        \\"properties\\": {\\n          \\"internal\\": {\\n            \\"const\\": false\\n          },\\n          \\"external\\": {\\n            \\"const\\": true\\n          },\\n          \\"contains\\": {\\n            \\"type\\": \\"object\\",\\n            \\"title\\": \\"Additional contents\\",\\n            \\"properties\\": {\\n              \\"contract\\": {\\n                \\"type\\": \\"object\\",\\n                \\"title\\": \\"Contract type providing external function\\",\\n                \\"description\\": \\"A wrapper around the contract type that composes this external function type.\\",\\n                \\"allOf\\": [\\n                  {\\n                    \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n                  },\\n                  {\\n                    \\"type\\": \\"object\\",\\n                    \\"title\\": \\"Contract type wrapper\\",\\n                    \\"properties\\": {\\n                      \\"type\\": {\\n                        \\"$ref\\": \\"schema:ethdebug/format/type/elementary/contract\\"\\n                      }\\n                    }\\n                  }\\n                ]\\n              }\\n            }\\n          }\\n        },\\n        \\"required\\": [\\n          \\"external\\"\\n        ]\\n      },\\n      {\\n        \\"type\\": \\"object\\",\\n        \\"title\\": \\"Internal function type\\",\\n        \\"properties\\": {\\n          \\"internal\\": {\\n            \\"const\\": true\\n          },\\n          \\"external\\": {\\n            \\"const\\": false\\n          }\\n        },\\n        \\"required\\": [\\n          \\"internal\\"\\n        ]\\n      }\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"function\\",\\n        \\"internal\\": true,\\n        \\"definition\\": {\\n          \\"name\\": \\"increment\\"\\n        },\\n        \\"contains\\": {\\n          \\"parameters\\": {\\n            \\"type\\": {\\n              \\"kind\\": \\"tuple\\",\\n              \\"contains\\": [\\n                {\\n                  \\"name\\": \\"value\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"uint\\",\\n                    \\"bits\\": 256\\n                  }\\n                }\\n              ]\\n            }\\n          },\\n          \\"returns\\": {\\n            \\"type\\": {\\n              \\"kind\\": \\"uint\\",\\n              \\"bits\\": 256\\n            }\\n          }\\n        }\\n      },\\n      {\\n        \\"kind\\": \\"function\\",\\n        \\"external\\": true,\\n        \\"definition\\": {\\n          \\"name\\": \\"withdraw\\"\\n        },\\n        \\"contains\\": {\\n          \\"contract\\": {\\n            \\"type\\": {\\n              \\"kind\\": \\"contract\\",\\n              \\"payable\\": true,\\n              \\"interface\\": true,\\n              \\"definition\\": {\\n                \\"name\\": \\"Bank\\"\\n              }\\n            }\\n          },\\n          \\"parameters\\": {\\n            \\"type\\": {\\n              \\"kind\\": \\"tuple\\",\\n              \\"contains\\": [\\n                {\\n                  \\"name\\": \\"beneficiary\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"address\\",\\n                    \\"payable\\": true\\n                  }\\n                },\\n                {\\n                  \\"name\\": \\"amount\\",\\n                  \\"type\\": {\\n                    \\"kind\\": \\"ufixed\\",\\n                    \\"bits\\": 128,\\n                    \\"places\\": 18\\n                  }\\n                }\\n              ]\\n            }\\n          },\\n          \\"returns\\": {\\n            \\"type\\": {\\n              \\"kind\\": \\"tuple\\",\\n              \\"contains\\": []\\n            }\\n          }\\n        }\\n      }\\n    ],\\n    \\"$defs\\": {\\n      \\"Parameters\\": {\\n        \\"type\\": \\"object\\",\\n        \\"title\\": \\"Parameters\\",\\n        \\"description\\": \\"A type wrapper around a tuple of types. This schema uses a tuple type to represent an ordered list of types.\\",\\n        \\"allOf\\": [\\n          {\\n            \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n          },\\n          {\\n            \\"title\\": \\"Tuple type wrapper\\",\\n            \\"type\\": \\"object\\",\\n            \\"properties\\": {\\n              \\"type\\": {\\n                \\"$ref\\": \\"schema:ethdebug/format/type/complex/tuple\\"\\n              }\\n            }\\n          }\\n        ]\\n      }\\n    }\\n  },\\n  \\"schema:ethdebug/format/type/complex/mapping\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/complex/mapping\\",\\n    \\"title\\": \\"ethdebug/format/type/complex/mapping\\",\\n    \\"description\\": \\"Schema for representing mapping types\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"complex\\"\\n      },\\n      \\"kind\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"mapping\\"\\n      },\\n      \\"contains\\": {\\n        \\"type\\": \\"object\\",\\n        \\"title\\": \\"Mapping key/value types\\",\\n        \\"properties\\": {\\n          \\"key\\": {\\n            \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n          },\\n          \\"value\\": {\\n            \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"key\\",\\n          \\"value\\"\\n        ]\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\",\\n      \\"contains\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"mapping\\",\\n        \\"contains\\": {\\n          \\"key\\": {\\n            \\"type\\": {\\n              \\"kind\\": \\"address\\"\\n            }\\n          },\\n          \\"value\\": {\\n            \\"type\\": {\\n              \\"kind\\": \\"uint\\",\\n              \\"bits\\": 256\\n            }\\n          }\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/complex/struct\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/complex/struct\\",\\n    \\"title\\": \\"ethdebug/format/type/complex/struct\\",\\n    \\"description\\": \\"Schema for representing struct types\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"complex\\"\\n      },\\n      \\"kind\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"struct\\"\\n      },\\n      \\"contains\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"#/$defs/MemberField\\"\\n        }\\n      },\\n      \\"definition\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/type/definition\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\",\\n      \\"contains\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"struct\\",\\n        \\"contains\\": [\\n          {\\n            \\"name\\": \\"x\\",\\n            \\"type\\": {\\n              \\"kind\\": \\"uint\\",\\n              \\"bits\\": 128\\n            }\\n          },\\n          {\\n            \\"name\\": \\"y\\",\\n            \\"type\\": {\\n              \\"kind\\": \\"uint\\",\\n              \\"bits\\": 128\\n            }\\n          }\\n        ]\\n      }\\n    ],\\n    \\"$defs\\": {\\n      \\"MemberField\\": {\\n        \\"type\\": \\"object\\",\\n        \\"title\\": \\"MemberField\\",\\n        \\"description\\": \\"A schema representing a member field inside a struct type. This is an **ethdebug/format/type/wrapper** with additional fields.\\",\\n        \\"allOf\\": [\\n          {\\n            \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n          },\\n          {\\n            \\"title\\": \\"Additional fields\\",\\n            \\"description\\": \\"An object with optional `name` property for identifying named struct member fields. **Note** that this language does not specify that a struct must be consistent in its use of naming for all fields or none\\",\\n            \\"type\\": \\"object\\",\\n            \\"properties\\": {\\n              \\"name\\": {\\n                \\"type\\": \\"string\\"\\n              }\\n            }\\n          }\\n        ]\\n      }\\n    }\\n  },\\n  \\"schema:ethdebug/format/type/complex/tuple\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/complex/tuple\\",\\n    \\"title\\": \\"ethdebug/format/type/complex/tuple\\",\\n    \\"description\\": \\"Schema for representing tuple types\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"complex\\"\\n      },\\n      \\"kind\\": {\\n        \\"type\\": \\"string\\",\\n        \\"const\\": \\"tuple\\"\\n      },\\n      \\"contains\\": {\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"#/$defs/Element\\"\\n        }\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\",\\n      \\"contains\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"tuple\\",\\n        \\"contains\\": []\\n      },\\n      {\\n        \\"kind\\": \\"tuple\\",\\n        \\"contains\\": [\\n          {\\n            \\"name\\": \\"x\\",\\n            \\"type\\": {\\n              \\"kind\\": \\"uint\\",\\n              \\"bits\\": 128\\n            }\\n          },\\n          {\\n            \\"name\\": \\"y\\",\\n            \\"type\\": {\\n              \\"kind\\": \\"uint\\",\\n              \\"bits\\": 128\\n            }\\n          }\\n        ]\\n      }\\n    ],\\n    \\"$defs\\": {\\n      \\"Element\\": {\\n        \\"type\\": \\"object\\",\\n        \\"title\\": \\"Element\\",\\n        \\"description\\": \\"An optionally named element type within a tuple. This is an **ethdebug/format/type/wrapper** with additional fields.\\",\\n        \\"allOf\\": [\\n          {\\n            \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n          },\\n          {\\n            \\"title\\": \\"Additional fields\\",\\n            \\"type\\": \\"object\\",\\n            \\"properties\\": {\\n              \\"name\\": {\\n                \\"type\\": \\"string\\",\\n                \\"description\\": \\"For tuple types where positional element types are identified by name, this field **should** include this information.\\\\nThis schema makes no restriction on whether all-or-no elements have names, and so this field may be sparse across elements of the same tuple.\\"\\n              }\\n            }\\n          }\\n        ]\\n      }\\n    }\\n  },\\n  \\"schema:ethdebug/format/type/complex\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/complex\\",\\n    \\"title\\": \\"ethdebug/format/type/complex\\",\\n    \\"description\\": \\"Canonical representation of a complex type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"kind\\": {\\n        \\"$ref\\": \\"#/$defs/Kind\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\"\\n    ],\\n    \\"allOf\\": [\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"alias\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/complex/alias\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"tuple\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/complex/tuple\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"array\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/complex/array\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"mapping\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/complex/mapping\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"struct\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/complex/struct\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"function\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/complex/function\\"\\n        }\\n      }\\n    ],\\n    \\"$defs\\": {\\n      \\"Kind\\": {\\n        \\"title\\": \\"Known complex kind\\",\\n        \\"description\\": \\"A schema for the values of `kind` reserved for known complex types included in ethdebug/format\\",\\n        \\"type\\": \\"string\\",\\n        \\"enum\\": [\\n          \\"alias\\",\\n          \\"tuple\\",\\n          \\"array\\",\\n          \\"mapping\\",\\n          \\"struct\\",\\n          \\"function\\"\\n        ]\\n      }\\n    }\\n  },\\n  \\"schema:ethdebug/format/type/definition\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/definition\\",\\n    \\"title\\": \\"ethdebug/format/type/definition\\",\\n    \\"description\\": \\"Object containing name and location information for a type.\\\\n\\\\nThis schema does not require any particular field, but it **must** contain\\\\nat least one property.\\\\n\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"name\\": {\\n        \\"type\\": \\"string\\"\\n      },\\n      \\"location\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/materials/source-range\\"\\n      }\\n    },\\n    \\"anyOf\\": [\\n      {\\n        \\"title\\": \\"Required `name`\\",\\n        \\"required\\": [\\n          \\"name\\"\\n        ]\\n      },\\n      {\\n        \\"title\\": \\"Required `location`\\",\\n        \\"required\\": [\\n          \\"location\\"\\n        ]\\n      }\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"name\\": \\"Ballot\\",\\n        \\"location\\": {\\n          \\"source\\": {\\n            \\"id\\": 5\\n          },\\n          \\"range\\": {\\n            \\"offset\\": 10,\\n            \\"length\\": 56\\n          }\\n        }\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary/address\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary/address\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary/address\\",\\n    \\"description\\": \\"Schema describing the representation of an address type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"const\\": \\"elementary\\"\\n      },\\n      \\"kind\\": {\\n        \\"const\\": \\"address\\"\\n      },\\n      \\"payable\\": {\\n        \\"type\\": \\"boolean\\",\\n        \\"description\\": \\"If this field is omitted, this type represents an address whose payability is not known.\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"address\\"\\n      },\\n      {\\n        \\"kind\\": \\"address\\",\\n        \\"payable\\": true\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary/bool\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary/bool\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary/bool\\",\\n    \\"description\\": \\"Schema describing the representation of the boolean type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"const\\": \\"elementary\\"\\n      },\\n      \\"kind\\": {\\n        \\"const\\": \\"bool\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"bool\\"\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary/bytes\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary/bytes\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary/bytes\\",\\n    \\"description\\": \\"Schema describing the representation of a type of bytes string (either dynamic or static)\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"const\\": \\"elementary\\"\\n      },\\n      \\"kind\\": {\\n        \\"const\\": \\"bytes\\"\\n      },\\n      \\"size\\": {\\n        \\"description\\": \\"The number of bytes in the bytes string. If this field is omitted, this type is the dynamic bytes string type.\\",\\n        \\"$ref\\": \\"schema:ethdebug/format/data/unsigned\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"bytes\\",\\n        \\"size\\": 32\\n      },\\n      {\\n        \\"kind\\": \\"bytes\\"\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary/contract\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary/contract\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary/contract\\",\\n    \\"description\\": \\"Schema describing the representation of a contract type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"const\\": \\"elementary\\"\\n      },\\n      \\"kind\\": {\\n        \\"const\\": \\"contract\\"\\n      },\\n      \\"payable\\": {\\n        \\"type\\": \\"boolean\\",\\n        \\"description\\": \\"If this field is omitted, this type represents an address whose payability is not known.\\"\\n      },\\n      \\"definition\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/type/definition\\"\\n      }\\n    },\\n    \\"oneOf\\": [\\n      {\\n        \\"title\\": \\"Normal contract type\\",\\n        \\"properties\\": {\\n          \\"library\\": {\\n            \\"const\\": false\\n          },\\n          \\"interface\\": {\\n            \\"const\\": false\\n          }\\n        }\\n      },\\n      {\\n        \\"title\\": \\"Contract library type\\",\\n        \\"properties\\": {\\n          \\"library\\": {\\n            \\"const\\": true,\\n            \\"description\\": \\"Indicates that this is a type representing a library\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"library\\"\\n        ]\\n      },\\n      {\\n        \\"title\\": \\"Contract interface type\\",\\n        \\"properties\\": {\\n          \\"interface\\": {\\n            \\"const\\": true,\\n            \\"description\\": \\"Indicates that this is a type representing an interface\\"\\n          }\\n        },\\n        \\"required\\": [\\n          \\"interface\\"\\n        ]\\n      }\\n    ],\\n    \\"required\\": [\\n      \\"kind\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"contract\\"\\n      },\\n      {\\n        \\"kind\\": \\"contract\\",\\n        \\"library\\": false,\\n        \\"interface\\": false,\\n        \\"payable\\": true\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary/enum\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary/enum\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary/enum\\",\\n    \\"description\\": \\"Schema describing the representation of an enumerated type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"const\\": \\"elementary\\"\\n      },\\n      \\"kind\\": {\\n        \\"const\\": \\"enum\\"\\n      },\\n      \\"values\\": {\\n        \\"description\\": \\"The allowed values of an enum. This format makes no restriction on which values are allowed here.\\",\\n        \\"type\\": \\"array\\",\\n        \\"items\\": true\\n      },\\n      \\"definition\\": {\\n        \\"$ref\\": \\"schema:ethdebug/format/type/definition\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\",\\n      \\"values\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"enum\\",\\n        \\"values\\": [\\n          \\"A\\",\\n          \\"B\\",\\n          \\"C\\"\\n        ]\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary/fixed\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary/fixed\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary/fixed\\",\\n    \\"description\\": \\"Schema describing the representation of a signed fixed decimal type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"const\\": \\"elementary\\"\\n      },\\n      \\"kind\\": {\\n        \\"const\\": \\"fixed\\"\\n      },\\n      \\"bits\\": {\\n        \\"type\\": \\"integer\\",\\n        \\"multipleOf\\": 8,\\n        \\"minimum\\": 8,\\n        \\"maximum\\": 256\\n      },\\n      \\"places\\": {\\n        \\"type\\": \\"integer\\",\\n        \\"description\\": \\"How many decimal places, implying that a raw value `v` of this type should be interpreted as `v / (10**places)`\\",\\n        \\"minimum\\": 1,\\n        \\"maximum\\": 80\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\",\\n      \\"bits\\",\\n      \\"places\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"fixed\\",\\n        \\"bits\\": 256,\\n        \\"places\\": 10\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary/int\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary/int\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary/int\\",\\n    \\"description\\": \\"Schema describing the representation of a signed integer type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"const\\": \\"elementary\\"\\n      },\\n      \\"kind\\": {\\n        \\"const\\": \\"int\\"\\n      },\\n      \\"bits\\": {\\n        \\"type\\": \\"integer\\",\\n        \\"multipleOf\\": 8,\\n        \\"minimum\\": 8,\\n        \\"maximum\\": 256\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\",\\n      \\"bits\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"int\\",\\n        \\"bits\\": 256\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary/string\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary/string\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary/string\\",\\n    \\"description\\": \\"Schema describing the representation of a string type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"const\\": \\"elementary\\"\\n      },\\n      \\"kind\\": {\\n        \\"const\\": \\"string\\"\\n      },\\n      \\"encoding\\": {\\n        \\"type\\": \\"string\\",\\n        \\"default\\": \\"utf-8\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"string\\"\\n      },\\n      {\\n        \\"kind\\": \\"string\\",\\n        \\"encoding\\": \\"utf-16\\"\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary/ufixed\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary/ufixed\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary/ufixed\\",\\n    \\"description\\": \\"Schema describing the representation of an unsigned fixed decimal type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"const\\": \\"elementary\\"\\n      },\\n      \\"kind\\": {\\n        \\"const\\": \\"ufixed\\"\\n      },\\n      \\"bits\\": {\\n        \\"type\\": \\"integer\\",\\n        \\"multipleOf\\": 8,\\n        \\"minimum\\": 8,\\n        \\"maximum\\": 256\\n      },\\n      \\"places\\": {\\n        \\"type\\": \\"integer\\",\\n        \\"description\\": \\"How many decimal places, implying that a raw value `v` of this type should be interpreted as `v / (10**places)`\\",\\n        \\"minimum\\": 1,\\n        \\"maximum\\": 80\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\",\\n      \\"bits\\",\\n      \\"places\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"ufixed\\",\\n        \\"bits\\": 256,\\n        \\"places\\": 10\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary/uint\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary/uint\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary/uint\\",\\n    \\"description\\": \\"Schema describing the representation of an unsigned integer type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"class\\": {\\n        \\"const\\": \\"elementary\\"\\n      },\\n      \\"kind\\": {\\n        \\"const\\": \\"uint\\"\\n      },\\n      \\"bits\\": {\\n        \\"type\\": \\"integer\\",\\n        \\"multipleOf\\": 8,\\n        \\"minimum\\": 8,\\n        \\"maximum\\": 256\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\",\\n      \\"bits\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"kind\\": \\"uint\\",\\n        \\"bits\\": 256\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/elementary\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/elementary\\",\\n    \\"title\\": \\"ethdebug/format/type/elementary\\",\\n    \\"description\\": \\"Canonical representation of an elementary type\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"kind\\": {\\n        \\"$ref\\": \\"#/$defs/Kind\\"\\n      }\\n    },\\n    \\"required\\": [\\n      \\"kind\\"\\n    ],\\n    \\"allOf\\": [\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"uint\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/elementary/uint\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"int\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/elementary/int\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"bool\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/elementary/bool\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"bytes\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/elementary/bytes\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"string\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/elementary/string\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"ufixed\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/elementary/ufixed\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"fixed\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/elementary/fixed\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"address\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/elementary/address\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"contract\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/elementary/contract\\"\\n        }\\n      },\\n      {\\n        \\"if\\": {\\n          \\"properties\\": {\\n            \\"kind\\": {\\n              \\"const\\": \\"enum\\"\\n            }\\n          }\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/elementary/enum\\"\\n        }\\n      }\\n    ],\\n    \\"$defs\\": {\\n      \\"Kind\\": {\\n        \\"title\\": \\"Known elementary kind\\",\\n        \\"description\\": \\"A schema for the values of `kind` reserved for known elementary types included in ethdebug/format\\",\\n        \\"type\\": \\"string\\",\\n        \\"enum\\": [\\n          \\"uint\\",\\n          \\"int\\",\\n          \\"bool\\",\\n          \\"bytes\\",\\n          \\"string\\",\\n          \\"ufixed\\",\\n          \\"fixed\\",\\n          \\"address\\",\\n          \\"contract\\",\\n          \\"enum\\"\\n        ]\\n      }\\n    }\\n  },\\n  \\"schema:ethdebug/format/type/reference\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/reference\\",\\n    \\"title\\": \\"ethdebug/format/type/reference\\",\\n    \\"description\\": \\"A reference to a known type by ID\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"id\\": {\\n        \\"type\\": [\\n          \\"string\\",\\n          \\"number\\"\\n        ]\\n      }\\n    },\\n    \\"additionalProperties\\": false,\\n    \\"required\\": [\\n      \\"id\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"id\\": 5\\n      }\\n    ]\\n  },\\n  \\"schema:ethdebug/format/type/wrapper\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type/wrapper\\",\\n    \\"title\\": \\"ethdebug/format/type/wrapper\\",\\n    \\"description\\": \\"A wrapper around a type. Defines a `\\\\\\"type\\\\\\"` field that may include a full Type representation or a reference to a known Type by ID. Note that this schema permits additional properties on the same object.\\",\\n    \\"type\\": \\"object\\",\\n    \\"properties\\": {\\n      \\"type\\": {\\n        \\"if\\": {\\n          \\"required\\": [\\n            \\"id\\"\\n          ]\\n        },\\n        \\"then\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/reference\\"\\n        },\\n        \\"else\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type\\"\\n        }\\n      }\\n    },\\n    \\"required\\": [\\n      \\"type\\"\\n    ],\\n    \\"examples\\": [\\n      {\\n        \\"name\\": \\"beneficiary\\",\\n        \\"type\\": {\\n          \\"kind\\": \\"address\\",\\n          \\"payable\\": true\\n        }\\n      },\\n      {\\n        \\"type\\": {\\n          \\"id\\": \\"<opaque-id>\\"\\n        }\\n      }\\n    ],\\n    \\"$defs\\": {\\n      \\"Array\\": {\\n        \\"title\\": \\"{ \\\\\\"type\\\\\\": ... }[]\\",\\n        \\"description\\": \\"A list of wrapped types, where the wrapper may add fields\\",\\n        \\"type\\": \\"array\\",\\n        \\"items\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n        }\\n      },\\n      \\"Object\\": {\\n        \\"title\\": \\"{ \\\\\\"key\\\\\\": { \\\\\\"type\\\\\\": ... }, ... }\\",\\n        \\"description\\": \\"A key-value mapping of wrapped types, where the wrapper may add fields\\",\\n        \\"type\\": \\"object\\",\\n        \\"additionalProperties\\": {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n        }\\n      }\\n    }\\n  },\\n  \\"schema:ethdebug/format/type\\": {\\n    \\"$schema\\": \\"https://json-schema.org/draft/2020-12/schema\\",\\n    \\"$id\\": \\"schema:ethdebug/format/type\\",\\n    \\"title\\": \\"ethdebug/format/type\\",\\n    \\"description\\": \\"Canonical representation for all types.\\",\\n    \\"type\\": \\"object\\",\\n    \\"if\\": {\\n      \\"type\\": \\"object\\",\\n      \\"title\\": \\"Known kind\\",\\n      \\"description\\": \\"If `kind` adheres to the set of known kinds defined by this format\\",\\n      \\"properties\\": {\\n        \\"kind\\": {\\n          \\"anyOf\\": [\\n            {\\n              \\"$ref\\": \\"schema:ethdebug/format/type/elementary#/$defs/Kind\\"\\n            },\\n            {\\n              \\"$ref\\": \\"schema:ethdebug/format/type/complex#/$defs/Kind\\"\\n            }\\n          ]\\n        }\\n      }\\n    },\\n    \\"then\\": {\\n      \\"type\\": \\"object\\",\\n      \\"title\\": \\"KnownType\\",\\n      \\"description\\": \\"Then the object must adhere to exactly one known kind of type\\",\\n      \\"allOf\\": [\\n        {\\n          \\"if\\": {\\n            \\"properties\\": {\\n              \\"kind\\": {\\n                \\"$ref\\": \\"schema:ethdebug/format/type/elementary#/$defs/Kind\\"\\n              }\\n            }\\n          },\\n          \\"then\\": {\\n            \\"$ref\\": \\"schema:ethdebug/format/type/elementary\\"\\n          }\\n        },\\n        {\\n          \\"if\\": {\\n            \\"properties\\": {\\n              \\"kind\\": {\\n                \\"$ref\\": \\"schema:ethdebug/format/type/complex#/$defs/Kind\\"\\n              }\\n            }\\n          },\\n          \\"then\\": {\\n            \\"$ref\\": \\"schema:ethdebug/format/type/complex\\"\\n          }\\n        }\\n      ]\\n    },\\n    \\"else\\": {\\n      \\"type\\": \\"object\\",\\n      \\"description\\": \\"Else the object must be a valid **ethdebug/format/type/base** with additional constraints\\",\\n      \\"allOf\\": [\\n        {\\n          \\"$ref\\": \\"schema:ethdebug/format/type/base\\"\\n        },\\n        {\\n          \\"title\\": \\"Required `class` field\\",\\n          \\"required\\": [\\n            \\"class\\"\\n          ]\\n        },\\n        {\\n          \\"title\\": \\"Specialized complex type `contains` field\\",\\n          \\"type\\": \\"object\\",\\n          \\"if\\": {\\n            \\"description\\": \\"If this object is a complex type\\",\\n            \\"properties\\": {\\n              \\"class\\": {\\n                \\"const\\": \\"complex\\"\\n              }\\n            }\\n          },\\n          \\"then\\": {\\n            \\"description\\": \\"Then the `contains` field must adhere to **ethdebug/format/type/wrapper** schemas, not the **ethdebug/format/type/base** equivalent.\\\\n(i.e., these additional constraints must apply recursively)\\",\\n            \\"properties\\": {\\n              \\"contains\\": {\\n                \\"oneOf\\": [\\n                  {\\n                    \\"$ref\\": \\"schema:ethdebug/format/type/wrapper\\"\\n                  },\\n                  {\\n                    \\"$ref\\": \\"schema:ethdebug/format/type/wrapper#/$defs/Array\\"\\n                  },\\n                  {\\n                    \\"$ref\\": \\"schema:ethdebug/format/type/wrapper#/$defs/Object\\"\\n                  }\\n                ]\\n              }\\n            }\\n          }\\n        }\\n      ]\\n    }\\n  }\\n} as const;\\n\\nexport type Schema<Id extends keyof typeof rawSchemas> =\\n  (typeof rawSchemas)[Id];\\n\\n"},{"filePath":"src/types/index.ts","text":"export * from \\"./data\\";\\nexport * from \\"./materials\\";\\nexport * from \\"./type\\";\\nexport * from \\"./pointer\\";\\nexport * from \\"./program\\";\\n"},{"filePath":"src/types/data/index.test.ts","text":"import { testSchemaGuards } from \\"../../../test/guards\\";\\n\\nimport { Data } from \\"./index.js\\";\\n\\ntestSchemaGuards(\\"ethdebug/format/data\\", [\\n  {\\n    schema: \\"schema:ethdebug/format/data/value\\",\\n    guard: Data.isValue\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/data/unsigned\\",\\n    guard: Data.isUnsigned\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/data/hex\\",\\n    guard: Data.isHex\\n  },\\n]);\\n"},{"filePath":"src/types/data/index.ts","text":"export namespace Data {\\n  export type Value =\\n    | Unsigned\\n    | Hex;\\n\\n  export const isValue = (value: unknown): value is Value =>\\n    [isUnsigned, isHex].some(guard => guard(value));\\n\\n  export type Unsigned = number;\\n\\n  export const isUnsigned = (value: unknown): value is Unsigned =>\\n    typeof value === \\"number\\" && value >= 0;\\n\\n  export type Hex = string;\\n\\n  const hexPattern = new RegExp(/^0x[0-9a-fA-F]{1,}$/);\\n\\n  export const isHex = (value: unknown): value is Hex =>\\n    typeof value === \\"string\\" && hexPattern.test(value);\\n}\\n"},{"filePath":"src/types/materials/index.test.ts","text":"import { testSchemaGuards } from \\"../../../test/guards\\";\\nimport { Materials } from \\"./index\\";\\n\\ntestSchemaGuards(\\"ethdebug/format/materials\\", [\\n  {\\n    schema: \\"schema:ethdebug/format/materials/id\\",\\n    guard: Materials.isId\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/materials/reference\\",\\n    guard: Materials.isReference\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/materials/compilation\\",\\n    guard: Materials.isCompilation\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/materials/source\\",\\n    guard: Materials.isSource\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/materials/source-range\\",\\n    guard: Materials.isSourceRange\\n  },\\n]);\\n"},{"filePath":"src/types/materials/index.ts","text":"import { Data } from \\"../data\\";\\n\\nexport namespace Materials {\\n  export type Id =\\n    | number\\n    | string;\\n\\n  export const isId = (value: unknown): value is Id =>\\n    [\\"number\\", \\"string\\"].includes(typeof value);\\n\\n  // this and `toReference` are a bit janky to ensure Reference<X> can\'t\\n  // be assigned to Reference<Y> unless X can be assigned to Y\\n  export type Reference<O extends { id: Id; }> = OmitNever<\\n    & OmitNever<{\\n        [K in keyof O]-?: K extends \\"id\\" ? O[K] : never;\\n      }>\\n    & (\\n        Reference.Type<O> extends string\\n          ? { type?: Reference.Type<O>; }\\n          : { type?: string;}\\n      )\\n  >;\\n\\n  export const isReference = <O extends { id: Id; }>(\\n    value: unknown\\n  ): value is Reference<O> =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"id\\" in value && isId(value.id);\\n\\n  export function toReference<O extends { id: Id; }>(object: O): Reference<O> {\\n    return {\\n      id: object.id,\\n      ...(\\n        ([\\n          [isCompilation, \\"compilation\\"],\\n          [isSource, \\"source\\"]\\n        ] as const)\\n          .filter(([guard]) => guard(object))\\n          .map(([_, type]) => ({ type }))\\n          [0] || {}\\n      )\\n    } as unknown as Reference<O>;\\n  }\\n\\n\\n  type OmitNever<T> = {\\n    [K in keyof T as T[K] extends never ? never : K]: T[K]\\n  };\\n\\n\\n  export namespace Reference {\\n    export type Type<O extends { id: Id; }> = {\\n      [T in keyof Types]: O extends Types[T] ? T : never;\\n    }[keyof Types];\\n\\n\\n    type Types = {\\n      \\"compilation\\": Compilation,\\n      \\"source\\": Source\\n    };\\n\\n  }\\n\\n  export interface Compilation {\\n    id: Id;\\n    compiler: {\\n      name: string;\\n      version: string;\\n    };\\n    settings?: any;\\n    sources: Source[];\\n  }\\n\\n  export const isCompilation = (value: unknown): value is Compilation =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"id\\" in value && isId(value.id) &&\\n      \\"compiler\\" in value && typeof value.compiler === \\"object\\" && !!value.compiler &&\\n        \\"name\\" in value.compiler && typeof value.compiler.name === \\"string\\" &&\\n        \\"version\\" in value.compiler && typeof value.compiler.version === \\"string\\" &&\\n      \\"sources\\" in value && value.sources instanceof Array &&\\n        value.sources.every(isSource);\\n\\n  export interface Source {\\n    id: Id;\\n    path: string;\\n    contents: string;\\n    encoding?: string;\\n    language: string;\\n  }\\n\\n  export const isSource = (value: unknown): value is Source =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"id\\" in value && isId(value.id) &&\\n      \\"path\\" in value && typeof value.path === \\"string\\" &&\\n      \\"contents\\" in value && typeof value.contents === \\"string\\" &&\\n      \\"language\\" in value && typeof value.language === \\"string\\" &&\\n      (\\n        !(\\"encoding\\" in value) || typeof value.encoding === \\"string\\"\\n      );\\n\\n\\n  export interface SourceRange {\\n    compilation?: Reference<Compilation>;\\n    source: Reference<Source>;\\n    range?: {\\n      offset: Data.Value;\\n      length: Data.Value;\\n    };\\n  }\\n\\n  export const isSourceRange = (value: unknown): value is SourceRange =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"source\\" in value && isReference<Source>(value.source) &&\\n      (\\n        !(\\"range\\" in value) ||\\n        (\\n          typeof value.range === \\"object\\" && !!value.range &&\\n            \\"offset\\" in value.range && Data.isValue(value.range.offset) &&\\n            \\"length\\" in value.range && Data.isValue(value.range.length)\\n        )\\n      ) &&\\n      (\\n        !(\\"compilation\\" in value) || isReference<Compilation>(value.compilation)\\n      );\\n\\n}\\n"},{"filePath":"src/types/pointer/index.ts","text":"export { Pointer, isPointer } from \\"./pointer\\";\\n"},{"filePath":"src/types/pointer/pointer.test.ts","text":"import { testSchemaGuards } from \\"../../../test/guards\\";\\n\\nimport { Pointer, isPointer } from \\"./pointer\\";\\n\\nconst expressionSchema = \\"schema:ethdebug/format/pointer/expression\\";\\ntestSchemaGuards(\\"ethdebug/format/pointer\\", [\\n  {\\n    schema: expressionSchema,\\n    guard: Pointer.isExpression\\n  },\\n  {\\n    schema: expressionSchema,\\n    pointer: \\"#/$defs/Literal\\",\\n    guard: Pointer.Expression.isLiteral\\n  },\\n  {\\n    schema: expressionSchema,\\n    pointer: \\"#/$defs/Constant\\",\\n    guard: Pointer.Expression.isConstant\\n  },\\n  {\\n    schema: expressionSchema,\\n    pointer: \\"#/$defs/Variable\\",\\n    guard: Pointer.Expression.isVariable\\n  },\\n  {\\n    schema: expressionSchema,\\n    pointer: \\"#/$defs/Arithmetic\\",\\n    guard: Pointer.Expression.isArithmetic\\n  },\\n  {\\n    schema: expressionSchema,\\n    pointer: \\"#/$defs/Lookup\\",\\n    guard: Pointer.Expression.isLookup\\n  },\\n  {\\n    schema: expressionSchema,\\n    pointer: \\"#/$defs/Read\\",\\n    guard: Pointer.Expression.isRead\\n  },\\n  {\\n    schema: expressionSchema,\\n    pointer: \\"#/$defs/Reference\\",\\n    guard: Pointer.Expression.isReference\\n  },\\n  {\\n    schema: expressionSchema,\\n    pointer: \\"#/$defs/Keccak256\\",\\n    guard: Pointer.Expression.isKeccak256\\n  },\\n  {\\n    schema: expressionSchema,\\n    pointer: \\"#/$defs/Resize\\",\\n    guard: Pointer.Expression.isResize\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/region\\",\\n    guard: Pointer.isRegion\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/region/stack\\",\\n    guard: Pointer.Region.isStack\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/region/memory\\",\\n    guard: Pointer.Region.isMemory\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/region/storage\\",\\n    guard: Pointer.Region.isStorage\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/region/calldata\\",\\n    guard: Pointer.Region.isCalldata\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/region/returndata\\",\\n    guard: Pointer.Region.isReturndata\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/region/transient\\",\\n    guard: Pointer.Region.isTransient\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/region/code\\",\\n    guard: Pointer.Region.isCode\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/collection/group\\",\\n    guard: Pointer.Collection.isGroup\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/collection/list\\",\\n    guard: Pointer.Collection.isList\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer\\",\\n    guard: isPointer\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/pointer/template\\",\\n    guard: Pointer.isTemplate\\n  },\\n] as const);\\n"},{"filePath":"src/types/pointer/pointer.ts","text":"export type Pointer =\\n  | Pointer.Region\\n  | Pointer.Collection;\\n\\nexport const isPointer = (value: unknown): value is Pointer =>\\n  [\\n    Pointer.isRegion,\\n    Pointer.isCollection\\n  ].some(guard => guard(value));\\n\\nexport namespace Pointer {\\n  export type Identifier = string;\\n  export const isIdentifier = (value: unknown): value is Identifier =>\\n    typeof value === \\"string\\" && /^[a-zA-Z_\\\\\\\\-]+[a-zA-Z0-9$_\\\\\\\\-]*$/.test(value);\\n\\n  export type Region =\\n    | Region.Stack\\n    | Region.Memory\\n    | Region.Storage\\n    | Region.Calldata\\n    | Region.Returndata\\n    | Region.Transient\\n    | Region.Code;\\n\\n  export const isRegion = (value: unknown): value is Region =>\\n    [\\n      Region.isStack,\\n      Region.isMemory,\\n      Region.isStorage,\\n      Region.isCalldata,\\n      Region.isReturndata,\\n      Region.isTransient,\\n      Region.isCode\\n    ].some(guard => guard(value));\\n\\n  export namespace Region {\\n    export interface Base {\\n      name?: string;\\n      location: string;\\n    }\\n    export const isBase = (value: unknown): value is Base =>\\n      !!value &&\\n        typeof value === \\"object\\" &&\\n        (!(\\"name\\" in value) || typeof value.name === \\"string\\") &&\\n        \\"location\\" in value &&\\n        typeof value.location === \\"string\\";\\n\\n    export type Name = Base[\\"name\\"];\\n\\n    export type Stack =\\n      & Base\\n      & Scheme.Segment\\n      & { location: \\"stack\\" };\\n    export const isStack = (value: unknown): value is Stack =>\\n      isBase(value) && Scheme.isSegment(value) && value.location === \\"stack\\";\\n\\n    export type Memory =\\n      & Base\\n      & Scheme.Slice\\n      & { location: \\"memory\\" };\\n    export const isMemory = (value: unknown): value is Memory =>\\n      isBase(value) && Scheme.isSlice(value) && value.location === \\"memory\\";\\n\\n    export type Storage =\\n      & Base\\n      & Scheme.Segment\\n      & { location: \\"storage\\" };\\n    export const isStorage = (value: unknown): value is Storage =>\\n      isBase(value) && Scheme.isSegment(value) && value.location === \\"storage\\";\\n\\n    export type Calldata =\\n      & Base\\n      & Scheme.Slice\\n      & { location: \\"calldata\\" };\\n    export const isCalldata = (value: unknown): value is Calldata =>\\n      isBase(value) && Scheme.isSlice(value) && value.location === \\"calldata\\";\\n\\n    export type Returndata =\\n      & Base\\n      & Scheme.Slice\\n      & { location: \\"returndata\\" };\\n    export const isReturndata = (value: unknown): value is Returndata =>\\n      isBase(value) && Scheme.isSlice(value) && value.location === \\"returndata\\";\\n\\n    export type Transient =\\n      & Base\\n      & Scheme.Segment\\n      & { location: \\"transient\\" };\\n    export const isTransient = (value: unknown): value is Transient =>\\n      isBase(value) && Scheme.isSegment(value) && value.location === \\"transient\\";\\n\\n    export type Code =\\n      & Base\\n      & Scheme.Slice\\n      & { location: \\"code\\" };\\n    export const isCode = (value: unknown): value is Code =>\\n      isBase(value) && Scheme.isSlice(value) && value.location === \\"code\\";\\n  }\\n\\n  export namespace Scheme {\\n    export interface Segment {\\n      slot: Expression;\\n      offset?: Expression;\\n      length?: Expression;\\n    }\\n    export const isSegment = (value: unknown): value is Segment =>\\n      !!value &&\\n        typeof value === \\"object\\" &&\\n        \\"slot\\" in value &&\\n        isExpression(value.slot) &&\\n        (!(\\"offset\\" in value) || isExpression(value.offset)) &&\\n        (!(\\"length\\" in value) || isExpression(value.length));\\n\\n    export interface Slice {\\n      offset: Expression;\\n      length: Expression;\\n    }\\n\\n    export const isSlice = (value: unknown): value is Slice =>\\n      !!value &&\\n        typeof value === \\"object\\" &&\\n        \\"offset\\" in value &&\\n        isExpression(value.offset) &&\\n        \\"length\\" in value &&\\n        isExpression(value.length);\\n  }\\n\\n  export type Collection =\\n    | Collection.Group\\n    | Collection.List\\n    | Collection.Conditional\\n    | Collection.Scope\\n    | Collection.Reference;\\n\\n  export const isCollection = (value: unknown): value is Collection =>\\n    [\\n      Collection.isGroup,\\n      Collection.isList,\\n      Collection.isConditional,\\n      Collection.isScope,\\n      Collection.isReference\\n    ].some(guard => guard(value));\\n\\n  export namespace Collection {\\n    export interface Group {\\n      group: Pointer[];\\n    }\\n    export const isGroup = (value: unknown): value is Group =>\\n      !!value &&\\n        typeof value === \\"object\\" &&\\n        Object.keys(value).length === 1 &&\\n        \\"group\\" in value &&\\n        value.group instanceof Array &&\\n        value.group.length >= 1 &&\\n        value.group.every(isPointer);\\n\\n    export interface List {\\n      list: {\\n        count: Expression;\\n        each: Identifier;\\n        is: Pointer;\\n      }\\n    }\\n    export const isList = (value: unknown): value is List =>\\n      !!value &&\\n        typeof value === \\"object\\" &&\\n        Object.keys(value).length === 1 &&\\n        \\"list\\" in value &&\\n        !!value.list &&\\n        typeof value.list === \\"object\\" &&\\n        Object.keys(value.list).length === 3 &&\\n        \\"count\\" in value.list &&\\n        isExpression(value.list.count) &&\\n        \\"each\\" in value.list &&\\n        isIdentifier(value.list.each) &&\\n        \\"is\\" in value.list &&\\n        isPointer(value.list.is);\\n\\n    export interface Conditional {\\n      if: Expression;\\n      then: Pointer;\\n      else?: Pointer;\\n    }\\n    export const isConditional = (value: unknown): value is Conditional =>\\n      !!value &&\\n        typeof value === \\"object\\" &&\\n        \\"if\\" in value &&\\n        isExpression(value.if) &&\\n        \\"then\\" in value &&\\n        isPointer(value.then) &&\\n        (!(\\"else\\" in value) || isPointer(value.else));\\n\\n    export interface Scope {\\n      define: {\\n        [identifier: string]: Expression;\\n      }\\n      in: Pointer;\\n    }\\n\\n    export const isScope = (value: unknown): value is Scope =>\\n      !!value &&\\n        typeof value === \\"object\\" &&\\n        \\"define\\" in value &&\\n        typeof value.define === \\"object\\" && !!value.define &&\\n        Object.keys(value.define).every(key => isIdentifier(key)) &&\\n        \\"in\\" in value &&\\n        isPointer(value.in);\\n\\n    export interface Reference {\\n      template: string;\\n    }\\n\\n    export const isReference = (value: unknown): value is Reference =>\\n      !!value &&\\n        typeof value === \\"object\\" &&\\n        \\"template\\" in value &&\\n        typeof value.template === \\"string\\" && !!value.template\\n  }\\n\\n  export type Expression =\\n    | Expression.Literal\\n    | Expression.Constant\\n    | Expression.Variable\\n    | Expression.Arithmetic\\n    | Expression.Lookup\\n    | Expression.Read\\n    | Expression.Keccak256\\n    | Expression.Resize;\\n\\n  export const isExpression = (value: unknown): value is Expression =>\\n    [\\n      Expression.isLiteral,\\n      Expression.isConstant,\\n      Expression.isVariable,\\n      Expression.isArithmetic,\\n      Expression.isLookup,\\n      Expression.isRead,\\n      Expression.isKeccak256,\\n      Expression.isResize\\n    ].some(guard => guard(value));\\n\\n  export namespace Expression {\\n    export type Literal = number | `0x${string}`;\\n    export const isLiteral = (value: unknown): value is Literal =>\\n      typeof value === \\"number\\" ||\\n        typeof value === \\"string\\" && /^0x[0-9a-fA-F]+$/.test(value);\\n\\n    export type Constant =\\n      | \\"$wordsize\\";\\n    export const isConstant = (value: unknown): value is Constant =>\\n      typeof value === \\"string\\" && [\\"$wordsize\\"].includes(value);\\n\\n    export type Variable = string;\\n    export const isVariable = (value: unknown): value is Variable =>\\n      isIdentifier(value);\\n\\n    export type Arithmetic =\\n      | Arithmetic.Sum\\n      | Arithmetic.Difference\\n      | Arithmetic.Product\\n      | Arithmetic.Quotient\\n      | Arithmetic.Remainder;\\n\\n    export const isArithmetic = (value: unknown): value is Arithmetic =>\\n      [\\n        Arithmetic.isSum,\\n        Arithmetic.isDifference,\\n        Arithmetic.isProduct,\\n        Arithmetic.isQuotient,\\n        Arithmetic.isRemainder\\n      ].some(guard => guard(value));\\n\\n    const makeIsOperation = <\\n      O extends string,\\n      T extends { [K in O]: any; }\\n    >(\\n      operation: O,\\n      checkOperands: (operands: unknown) => operands is T[O]\\n    ) => (value: unknown): value is T =>\\n      !!value &&\\n        typeof value === \\"object\\" &&\\n        Object.keys(value).length === 1 &&\\n        operation in value &&\\n        checkOperands(value[operation as keyof typeof value]);\\n\\n    export type Operands = Expression[];\\n    export const isOperands =\\n      (value: unknown): value is Expression[] =>\\n        value instanceof Array && value.every(isExpression);\\n\\n    export namespace Arithmetic {\\n      export type Operation =\\n        | keyof Sum\\n        | keyof Difference\\n        | keyof Product\\n        | keyof Quotient\\n        | keyof Remainder;\\n\\n      export const isTwoOperands =\\n        (value: unknown): value is [Expression, Expression] =>\\n          isOperands(value) && value.length === 2;\\n\\n      export interface Sum {\\n        $sum: Expression[];\\n      }\\n      export const isSum =\\n        makeIsOperation<\\"$sum\\", Sum>(\\"$sum\\", isOperands);\\n\\n      export interface Difference {\\n        $difference: [Expression, Expression];\\n      }\\n      export const isDifference =\\n        makeIsOperation<\\"$difference\\", Difference>(\\"$difference\\", isTwoOperands);\\n\\n      export interface Product {\\n        $product: Expression[];\\n      }\\n      export const isProduct =\\n        makeIsOperation<\\"$product\\", Product>(\\"$product\\", isOperands);\\n\\n      export interface Quotient {\\n        $quotient: [Expression, Expression];\\n      }\\n      export const isQuotient =\\n        makeIsOperation<\\"$quotient\\", Quotient>(\\"$quotient\\", isTwoOperands);\\n\\n      export interface Remainder {\\n        $remainder: [Expression, Expression];\\n      }\\n      export const isRemainder =\\n        makeIsOperation<\\"$remainder\\", Remainder>(\\"$remainder\\", isTwoOperands);\\n    }\\n\\n    export type Reference =\\n      | Identifier\\n      | \\"$this\\";\\n    export const isReference = (value: unknown): value is Reference =>\\n      isIdentifier(value) || value === \\"$this\\";\\n\\n    export type Lookup =\\n      | Lookup.Offset\\n      | Lookup.Length\\n      | Lookup.Slot;\\n    export const isLookup = (value: unknown): value is Lookup =>\\n      [\\n        Lookup.isOffset,\\n        Lookup.isLength,\\n        Lookup.isSlot\\n      ].some(guard => guard(value));\\n\\n    export namespace Lookup {\\n      export type Operation =\\n        | keyof Offset\\n        | keyof Length\\n        | keyof Slot;\\n\\n      export type ForOperation<O extends Operation> =\\n        & Lookup\\n        & { [K in O]: any };\\n\\n      export const propertyFrom = <O extends Operation>(\\n        operation: O\\n      ): \\"slot\\" | \\"offset\\" | \\"length\\" => {\\n        return operation.slice(1) as \\"slot\\" | \\"offset\\" | \\"length\\";\\n      }\\n\\n      export interface Offset {\\n        \\".offset\\": Reference;\\n      }\\n      export const isOffset =\\n        makeIsOperation<\\".offset\\", Offset>(\\".offset\\", isReference);\\n\\n      export interface Length {\\n        \\".length\\": Reference;\\n      }\\n      export const isLength =\\n        makeIsOperation<\\".length\\", Length>(\\".length\\", isReference);\\n\\n      export interface Slot {\\n        \\".slot\\": Reference;\\n      }\\n      export const isSlot =\\n        makeIsOperation<\\".slot\\", Slot>(\\".slot\\", isReference);\\n    }\\n\\n    export interface Read {\\n      $read: Reference\\n    }\\n    export const isRead = makeIsOperation<\\"$read\\", Read>(\\"$read\\", isReference);\\n\\n    export interface Keccak256 {\\n      $keccak256: Expression[];\\n    }\\n    export const isKeccak256 =\\n      makeIsOperation<\\"$keccak256\\", Keccak256>(\\"$keccak256\\", isOperands);\\n\\n    export type Resize<N extends number = number> =\\n      | Resize.ToNumber<N>\\n      | Resize.ToWordsize;\\n    export const isResize = <N extends number>(\\n      value: unknown\\n    ): value is Resize<N> =>\\n      [\\n        Resize.isToWordsize,\\n        Resize.isToNumber,\\n      ].some(guard => guard(value));\\n\\n    export namespace Resize {\\n      export type ToNumber<N extends number> = {\\n        [K in `$sized${N}`]: Expression;\\n      };\\n      export const isToNumber = <N extends number>(\\n        value: unknown\\n      ): value is ToNumber<N> => {\\n        if (\\n          !value ||\\n            typeof value !== \\"object\\" ||\\n            Object.keys(value).length !== 1\\n        ) {\\n          return false;\\n        }\\n        const [key] = Object.keys(value);\\n\\n        return typeof key === \\"string\\" && /^\\\\$sized([1-9]+[0-9]*)$/.test(key);\\n      };\\n\\n      export type ToWordsize = {\\n        $wordsized: Expression;\\n      }\\n      export const isToWordsize = (value: unknown): value is ToWordsize =>\\n        !!value &&\\n          typeof value === \\"object\\" &&\\n          Object.keys(value).length === 1 &&\\n          \\"$wordsized\\" in value &&\\n          typeof value.$wordsized !== \\"undefined\\" &&\\n          isExpression(value.$wordsized);\\n    }\\n  }\\n\\n  export interface Templates {\\n    [identifier: string]: Pointer.Template;\\n  }\\n\\n  export const isTemplates = (value: unknown): value is Templates =>\\n    !!value &&\\n      typeof value === \\"object\\" &&\\n      Object.keys(value).every(isIdentifier) &&\\n      Object.values(value).every(isTemplate);\\n\\n  export interface Template {\\n    expect: string[];\\n    for: Pointer;\\n  }\\n\\n  export const isTemplate = (value: unknown): value is Template =>\\n    !!value &&\\n      typeof value === \\"object\\" &&\\n      Object.keys(value).length === 2 &&\\n      \\"expect\\" in value &&\\n      value.expect instanceof Array &&\\n      value.expect.every(isIdentifier) &&\\n      \\"for\\" in value &&\\n      isPointer(value.for);\\n\\n}\\n"},{"filePath":"src/types/program/context.test.ts","text":"import { testSchemaGuards } from \\"../../../test/guards\\";\\nimport { Context, isContext } from \\"./context\\";\\n\\ntestSchemaGuards(\\"ethdebug/format/program/context\\", [\\n  {\\n    schema: \\"schema:ethdebug/format/program/context\\",\\n    guard: isContext\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/program/context/code\\",\\n    guard: Context.isCode\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/program/context/variables\\",\\n    guard: Context.isVariables\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/program/context/remark\\",\\n    guard: Context.isRemark\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/program/context/pick\\",\\n    guard: Context.isPick\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/program/context/gather\\",\\n    guard: Context.isGather\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/program/context/frame\\",\\n    guard: Context.isFrame\\n  },\\n] as const);\\n"},{"filePath":"src/types/program/context.ts","text":"import { Materials } from \\"../materials\\";\\nimport { Type, isType } from \\"../type\\";\\nimport { Pointer, isPointer } from \\"../pointer\\";\\n\\nexport type Context =\\n  | Context.Code\\n  | Context.Variables\\n  | Context.Remark\\n  | Context.Pick\\n  | Context.Gather\\n  | Context.Frame;\\n\\nexport const isContext = (value: unknown): value is Context => [\\n  Context.isCode,\\n  Context.isVariables,\\n  Context.isRemark,\\n  Context.isPick,\\n  Context.isFrame,\\n  Context.isGather,\\n].some(guard => guard(value));\\n\\nexport namespace Context {\\n  export interface Code {\\n    code: Materials.SourceRange;\\n  }\\n\\n  export const isCode = (value: unknown): value is Code =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"code\\" in value && Materials.isSourceRange(value.code);\\n\\n  export interface Variables {\\n    variables: Variables.Variable[]\\n  }\\n\\n  export const isVariables = (value: unknown): value is Variables =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"variables\\" in value && value.variables instanceof Array &&\\n      value.variables.length > 0 &&\\n      value.variables.every(Variables.isVariable);\\n\\n  export namespace Variables {\\n    export interface Variable {\\n      identifier?: string;\\n      declaration?: Materials.SourceRange;\\n      type?: Type;\\n      pointer?: Pointer;\\n    }\\n\\n    const allowedKeys = new Set([\\n      \\"identifier\\",\\n      \\"declaration\\",\\n      \\"type\\",\\n      \\"pointer\\"\\n    ]);\\n\\n    export const isVariable = (value: unknown): value is Variable =>\\n      typeof value === \\"object\\" && !!value &&\\n        Object.keys(value).length > 0 &&\\n        Object.keys(value).every(key => allowedKeys.has(key)) &&\\n        (\\n          !(\\"identifier\\" in value) ||\\n            typeof value.identifier === \\"string\\"\\n        ) &&\\n        (\\n          !(\\"declaration\\" in value) ||\\n            Materials.isSourceRange(value.declaration)\\n        ) &&\\n        (\\n          !(\\"type\\" in value) ||\\n            isType(value.type)\\n        ) &&\\n        (\\n          !(\\"pointer\\" in value) ||\\n            isPointer(value.pointer)\\n        );\\n  }\\n\\n  export interface Remark {\\n    remark: string;\\n  }\\n\\n  export const isRemark = (value: unknown): value is Remark =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"remark\\" in value && typeof value.remark === \\"string\\";\\n\\n  export interface Pick {\\n    pick: Context[];\\n  }\\n\\n  export const isPick = (value: unknown): value is Pick =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"pick\\" in value && Array.isArray(value.pick) &&\\n      value.pick.every(isContext);\\n\\n  export interface Gather {\\n    gather: Context[];\\n  }\\n\\n  export const isGather = (value: unknown): value is Gather =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"gather\\" in value && Array.isArray(value.gather) &&\\n      value.gather.every(isContext);\\n\\n  export interface Frame {\\n    frame: string;\\n  }\\n\\n  export const isFrame = (value: unknown): value is Frame =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"frame\\" in value && typeof value.frame === \\"string\\";\\n}\\n"},{"filePath":"src/types/program/index.ts","text":"export { Program, isProgram } from \\"./program\\";\\n"},{"filePath":"src/types/program/instruction.test.ts","text":"import { testSchemaGuards } from \\"../../../test/guards\\";\\nimport { Instruction, isInstruction } from \\"./instruction\\";\\n\\ntestSchemaGuards(\\"ethdebug/format/program/instruction\\", [\\n  {\\n    schema: \\"schema:ethdebug/format/program/instruction\\",\\n    guard: isInstruction\\n  },\\n] as const);\\n"},{"filePath":"src/types/program/instruction.ts","text":"import { Data } from \\"../data\\";\\n\\nimport { Context, isContext } from \\"./context\\";\\n\\nexport interface Instruction {\\n  offset: Data.Value;\\n  context?: Context;\\n  operation?: Instruction.Operation;\\n}\\n\\nexport const isInstruction = (value: unknown): value is Instruction =>\\n  typeof value === \\"object\\" && !!value &&\\n    \\"offset\\" in value && Data.isValue(value.offset) &&\\n    (!(\\"context\\" in value) || isContext(value.context)) &&\\n    (!(\\"operation\\" in value) || Instruction.isOperation(value.operation));\\n\\n\\nexport namespace Instruction {\\n  export interface Operation {\\n    mnemonic: string;\\n    arguments?: Data.Value[];\\n  }\\n\\n  export const isOperation = (value: unknown): value is Operation =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"mnemonic\\" in value && typeof value.mnemonic === \\"string\\" &&\\n      (\\n        !(\\"arguments\\" in value) || (\\n          value.arguments instanceof Array &&\\n            value.arguments.every(Data.isValue)\\n        )\\n      )\\n}\\n"},{"filePath":"src/types/program/program.test.ts","text":"import { testSchemaGuards } from \\"../../../test/guards\\";\\nimport { Program, isProgram } from \\"./program\\";\\n\\ntestSchemaGuards(\\"ethdebug/format/program\\", [\\n  {\\n    schema: \\"schema:ethdebug/format/program\\",\\n    guard: isProgram\\n  },\\n] as const);\\n"},{"filePath":"src/types/program/program.ts","text":"import { Materials } from \\"../materials\\";\\n\\nimport {\\n  Context as _Context,\\n  isContext as _isContext\\n} from \\"./context\\";\\n\\nimport {\\n  Instruction as _Instruction,\\n  isInstruction as _isInstruction\\n} from \\"./instruction\\";\\n\\nexport interface Program {\\n  compilation?: Materials.Reference<Materials.Compilation>;\\n  contract: Program.Contract;\\n  environment: Program.Environment;\\n  context?: Program.Context;\\n  instructions: Program.Instruction[];\\n}\\n\\nexport const isProgram = (value: unknown): value is Program =>\\n  typeof value === \\"object\\" && !!value &&\\n    \\"contract\\" in value && Program.isContract(value.contract) &&\\n    \\"environment\\" in value && Program.isEnvironment(value.environment) &&\\n    \\"instructions\\" in value && value.instructions instanceof Array &&\\n      value.instructions.every(Program.isInstruction) &&\\n    (\\n      !(\\"compilation\\" in value) ||\\n        Materials.isReference<Materials.Compilation>(value.compilation)\\n    ) &&\\n    (\\n      !(\\"context\\" in value) ||\\n        Program.isContext(value.context)\\n    );\\n\\nexport namespace Program {\\n  export import Context = _Context;\\n  export const isContext = _isContext;\\n  export import Instruction = _Instruction;\\n  export const isInstruction = _isInstruction;\\n  export type Environment =\\n    | \\"call\\"\\n    | \\"create\\";\\n\\n  export const isEnvironment = (value: unknown): value is Environment =>\\n    typeof value === \\"string\\" &&\\n      [\\"call\\", \\"create\\"].includes(value);\\n\\n  export interface Contract {\\n    name?: string;\\n    definition: Materials.SourceRange;\\n  }\\n\\n  export const isContract = (value: unknown): value is Contract =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"definition\\" in value && Materials.isSourceRange(value.definition) &&\\n      (!(\\"name\\" in value) || typeof value.name === \\"string\\");\\n}\\n"},{"filePath":"src/types/type/base.test.ts","text":"import { testSchemaGuards } from \\"../../../test/guards\\";\\nimport * as Base from \\"./base\\";\\n\\ntestSchemaGuards(\\"ethdebug/format/type/base\\", [\\n  {\\n    schema: \\"schema:ethdebug/format/type/base\\",\\n    pointer: \\"#/$defs/ElementaryType\\",\\n    guard: Base.isElementary\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/base\\",\\n    pointer: \\"#/$defs/ComplexType\\",\\n    guard: Base.isComplex\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/base\\",\\n    pointer: \\"#/$defs/TypeWrapper\\",\\n    guard: Base.isWrapper\\n  },\\n] as const);\\n"},{"filePath":"src/types/type/base.ts","text":"export type Type =\\n  | Elementary\\n  | Complex;\\n\\nexport const isType = (value: unknown): value is Type =>\\n  [\\n    isElementary,\\n    isComplex\\n  ].some(guard => guard(value));\\n\\nexport interface Elementary {\\n  class?: \\"elementary\\";\\n  kind: string;\\n}\\n\\nexport const isElementary = (value: unknown): value is Elementary =>\\n  typeof value === \\"object\\" && !!value &&\\n    \\"kind\\" in value && typeof value.kind === \\"string\\" &&\\n    (\\n      !(\\"class\\" in value) || value.class === \\"elementary\\"\\n    ) &&\\n    !(\\"contains\\" in value);\\n\\nexport interface Complex {\\n  class?: \\"complex\\";\\n  kind: string;\\n  contains:\\n    | Wrapper\\n    | Wrapper[]\\n    | {\\n        [key: string]: Wrapper\\n      };\\n}\\n\\nexport const isComplex = (value: unknown): value is Complex =>\\n  typeof value === \\"object\\" && !!value &&\\n    \\"kind\\" in value && typeof value.kind === \\"string\\" &&\\n    (\\n      !(\\"class\\" in value) || value.class === \\"complex\\"\\n    ) &&\\n    \\"contains\\" in value && !!value.contains && (\\n      isWrapper(value.contains) ||\\n      (\\n        value.contains instanceof Array &&\\n        value.contains.every(isWrapper)\\n      ) ||\\n      (\\n        typeof value.contains === \\"object\\" &&\\n        Object.values(value.contains).every(isWrapper)\\n      )\\n    );\\n\\nexport interface Wrapper {\\n  type:\\n    | Type\\n    | { id: any; };\\n}\\n\\nexport const isWrapper = (value: unknown): value is Wrapper =>\\n  typeof value === \\"object\\" && !!value &&\\n    \\"type\\" in value && (\\n      isType(value.type) ||\\n      (\\n        typeof value.type === \\"object\\" && !!value.type &&\\n          \\"id\\" in value.type\\n      )\\n    );\\n"},{"filePath":"src/types/type/index.test.ts","text":"import { testSchemaGuards } from \\"../../../test/guards\\";\\nimport { Type, isType } from \\"./index\\";\\n\\n\\ntestSchemaGuards(\\"ethdebug/format/type\\", [\\n  {\\n    schema: \\"schema:ethdebug/format/type\\",\\n    guard: isType\\n  },\\n\\n  // elementary types\\n\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary\\",\\n    guard: Type.isElementary\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary/uint\\",\\n    guard: Type.Elementary.isUint\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary/int\\",\\n    guard: Type.Elementary.isInt\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary/ufixed\\",\\n    guard: Type.Elementary.isUfixed\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary/fixed\\",\\n    guard: Type.Elementary.isFixed\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary/bool\\",\\n    guard: Type.Elementary.isBool\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary/bytes\\",\\n    guard: Type.Elementary.isBytes\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary/string\\",\\n    guard: Type.Elementary.isString\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary/address\\",\\n    guard: Type.Elementary.isAddress\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary/contract\\",\\n    guard: Type.Elementary.isContract\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/elementary/enum\\",\\n    guard: Type.Elementary.isEnum\\n  },\\n\\n  // complex types\\n\\n  {\\n    schema: \\"schema:ethdebug/format/type/complex\\",\\n    guard: Type.isComplex\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/complex/alias\\",\\n    guard: Type.Complex.isAlias\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/complex/tuple\\",\\n    guard: Type.Complex.isTuple\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/complex/array\\",\\n    guard: Type.Complex.isArray\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/complex/mapping\\",\\n    guard: Type.Complex.isMapping\\n  },\\n  {\\n    schema: \\"schema:ethdebug/format/type/complex/struct\\",\\n    guard: Type.Complex.isStruct\\n  },\\n] as const);\\n"},{"filePath":"src/types/type/index.ts","text":"import { Data } from \\"../data\\";\\nimport { Materials } from \\"../materials\\";\\n\\nimport * as _Base from \\"./base\\";\\n\\nexport type Type =\\n  | Type.Known\\n  | Type.Unknown;\\n\\nexport const isType = (value: unknown): value is Type =>\\n  (Type.hasElementaryKind(value) || Type.hasComplexKind(value))\\n    ? Type.isKnown(value)\\n    : Type.isUnknown(value);\\n\\nexport namespace Type {\\n  export import Base = _Base;\\n\\n  export type Known =\\n    | Elementary\\n    | Complex;\\n\\n  export const isKnown = (value: unknown): value is Known =>\\n    [\\n      isElementary,\\n      isComplex\\n    ].some(guard => guard(value));\\n\\n  export type Unknown =\\n    & Base.Type\\n    & { class: Exclude<Base.Type[\\"class\\"], undefined> };\\n\\n  export const isUnknown = (value: unknown): value is Unknown =>\\n    Base.isType(value) &&\\n      \\"class\\" in value &&\\n      (\\n        !(\\"contains\\" in value) || Type.isWrapper(value.contains) ||\\n        (\\n          value.contains instanceof Array &&\\n          value.contains.every(Type.isWrapper)\\n        ) ||\\n        (\\n          typeof value.contains === \\"object\\" &&\\n          Object.values(value.contains).every(Type.isWrapper)\\n        )\\n      );\\n\\n  export interface Wrapper {\\n    type:\\n      | Type\\n      | { id: any; }\\n  }\\n\\n  export const isWrapper = (value: unknown): value is Wrapper =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"type\\" in value && (\\n        isType(value.type) ||\\n        (\\n          typeof value.type === \\"object\\" && !!value.type &&\\n            \\"id\\" in value.type\\n        )\\n      );\\n\\n  export type Elementary =\\n    | Elementary.Uint\\n    | Elementary.Int\\n    | Elementary.Ufixed\\n    | Elementary.Fixed\\n    | Elementary.Bool\\n    | Elementary.Bytes\\n    | Elementary.String\\n    | Elementary.Address\\n    | Elementary.Contract\\n    | Elementary.Enum;\\n\\n  export const hasElementaryKind = (value: unknown): value is {\\n    kind: Elementary[\\"kind\\"]\\n  } =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"kind\\" in value && typeof value.kind === \\"string\\" &&\\n      [\\n        \\"uint\\",\\n        \\"int\\",\\n        \\"ufixed\\",\\n        \\"fixed\\",\\n        \\"bool\\",\\n        \\"bytes\\",\\n        \\"string\\",\\n        \\"address\\",\\n        \\"contract\\",\\n        \\"enum\\"\\n      ].includes(value.kind);\\n\\n  export const isElementary = (value: unknown): value is Elementary =>\\n    [\\n      Elementary.isUint,\\n      Elementary.isInt,\\n      Elementary.isUfixed,\\n      Elementary.isFixed,\\n      Elementary.isBool,\\n      Elementary.isBytes,\\n      Elementary.isString,\\n      Elementary.isAddress,\\n      Elementary.isContract,\\n      Elementary.isEnum\\n    ].some(guard => guard(value));\\n\\n  export namespace Elementary {\\n    export interface Uint {\\n      class?: \\"elementary\\";\\n      kind: \\"uint\\";\\n      bits: number;\\n    }\\n\\n    export const isUint = (value: unknown): value is Uint =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"elementary\\") &&\\n        hasKind(value, \\"uint\\") &&\\n        \\"bits\\" in value && typeof value.bits === \\"number\\" &&\\n          value.bits >= 8 && value.bits <= 256 && value.bits % 8 === 0;\\n\\n    export interface Int {\\n      class?: \\"elementary\\";\\n      kind: \\"int\\";\\n      bits: number;\\n    }\\n\\n    export const isInt = (value: unknown): value is Int =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"elementary\\") &&\\n        hasKind(value, \\"int\\") &&\\n        \\"bits\\" in value && typeof value.bits === \\"number\\" &&\\n          value.bits >= 8 && value.bits <= 256 && value.bits % 8 === 0;\\n\\n    export interface Ufixed {\\n      class?: \\"elementary\\";\\n      kind: \\"ufixed\\";\\n      bits: number;\\n      places: number;\\n    }\\n\\n    export const isUfixed = (value: unknown): value is Ufixed =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"elementary\\") &&\\n        hasKind(value, \\"ufixed\\") &&\\n        \\"bits\\" in value && typeof value.bits === \\"number\\" &&\\n          value.bits >= 8 && value.bits <= 256 && value.bits % 8 === 0 &&\\n        \\"places\\" in value && typeof value.places === \\"number\\" &&\\n          value.places >= 1 && value.places <= 80;\\n\\n    export interface Fixed {\\n      class?: \\"elementary\\";\\n      kind: \\"fixed\\";\\n      bits: number;\\n      places: number;\\n    }\\n\\n    export const isFixed = (value: unknown): value is Fixed =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"elementary\\") &&\\n        hasKind(value, \\"fixed\\") &&\\n        \\"bits\\" in value && typeof value.bits === \\"number\\" &&\\n          value.bits >= 8 && value.bits <= 256 && value.bits % 8 === 0 &&\\n        \\"places\\" in value && typeof value.places === \\"number\\" &&\\n          value.places >= 1 && value.places <= 80;\\n\\n    export interface Bool {\\n      class?: \\"elementary\\";\\n      kind: \\"bool\\";\\n    }\\n\\n    export const isBool = (value: unknown): value is Bool =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"elementary\\") &&\\n        hasKind(value, \\"bool\\");\\n\\n    export interface Bytes {\\n      class?: \\"elementary\\";\\n      kind: \\"bytes\\";\\n      size?: Data.Unsigned;\\n    }\\n\\n    export const isBytes = (value: unknown): value is Bytes =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"elementary\\") &&\\n        hasKind(value, \\"bytes\\") &&\\n        (\\n          !(\\"size\\" in value) || Data.isUnsigned(value.size)\\n        );\\n\\n    export interface String {\\n      class?: \\"elementary\\";\\n      kind: \\"string\\";\\n      encoding?: string;\\n    }\\n\\n    export const isString = (value: unknown): value is String =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"elementary\\") &&\\n        hasKind(value, \\"string\\") &&\\n        (\\n          !(\\"encoding\\" in value) || typeof value.encoding === \\"string\\"\\n        );\\n\\n    export interface Address {\\n      class?: \\"elementary\\";\\n      kind: \\"address\\";\\n      payable?: boolean;\\n    }\\n\\n    export const isAddress = (value: unknown): value is Address =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"elementary\\") &&\\n        hasKind(value, \\"address\\") &&\\n        (\\n          !(\\"payable\\" in value) || typeof value.payable === \\"boolean\\"\\n        );\\n\\n    export interface Contract {\\n      class?: \\"elementary\\";\\n      kind: \\"contract\\";\\n      payable?: boolean;\\n      definition?: Definition;\\n    }\\n\\n    export const isContract = (value: unknown): value is Contract =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"elementary\\") &&\\n        hasKind(value, \\"contract\\") &&\\n        (\\n          !(\\"payable\\" in value) || typeof value.payable === \\"boolean\\"\\n        ) &&\\n        (\\n          !(\\"definition\\" in value) || isDefinition(value.definition)\\n        );\\n\\n    export interface Enum {\\n      class?: \\"elementary\\";\\n      kind: \\"enum\\";\\n      values: any[];\\n      definition?: Definition;\\n    }\\n\\n    export const isEnum = (value: unknown): value is Enum =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"elementary\\") &&\\n        hasKind(value, \\"enum\\") &&\\n        \\"values\\" in value && value.values instanceof Array &&\\n        (\\n          !(\\"definition\\" in value) || isDefinition(value.definition)\\n        );\\n  }\\n\\n  export type Complex =\\n    | Complex.Alias\\n    | Complex.Tuple\\n    | Complex.Array\\n    | Complex.Mapping\\n    | Complex.Struct\\n    /* currently unsupported: | Complex.Function */;\\n\\n  export const hasComplexKind = (value: unknown): value is {\\n    kind: Complex[\\"kind\\"]\\n  } =>\\n    typeof value === \\"object\\" && !!value &&\\n      \\"kind\\" in value && typeof value.kind === \\"string\\" &&\\n      [\\n        \\"alias\\",\\n        \\"tuple\\",\\n        \\"array\\",\\n        \\"mapping\\",\\n        \\"struct\\",\\n        // \\"function\\"\\n      ].includes(value.kind);\\n\\n  export const isComplex = (value: unknown): value is Complex =>\\n    [\\n      Complex.isAlias,\\n      Complex.isTuple,\\n      Complex.isArray,\\n      Complex.isMapping,\\n      Complex.isStruct,\\n    ].some(guard => guard(value));\\n\\n  export namespace Complex {\\n    export interface Alias {\\n      class?: \\"complex\\";\\n      kind: \\"alias\\";\\n      contains: Wrapper;\\n      definition?: Definition;\\n    }\\n\\n    export const isAlias = (value: unknown): value is Alias =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"complex\\") &&\\n        hasKind(value, \\"alias\\") &&\\n        \\"contains\\" in value && isWrapper(value.contains) &&\\n        (\\n          !(\\"definition\\" in value) || isDefinition(value.definition)\\n        );\\n\\n    export interface Tuple {\\n      class?: \\"complex\\";\\n      kind: \\"tuple\\";\\n      contains: (\\n        & Wrapper\\n        & { name?: string }\\n      )[];\\n    }\\n\\n    export const isTuple = (value: unknown): value is Tuple =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"complex\\") &&\\n        hasKind(value, \\"tuple\\") &&\\n        \\"contains\\" in value && value.contains instanceof Array &&\\n        value.contains.every(\\n          (element) =>\\n            isWrapper(element) &&\\n            (\\n              !(\\"name\\" in element) || typeof element.name === \\"string\\"\\n            )\\n        );\\n\\n    export interface Array {\\n      class?: \\"complex\\";\\n      kind: \\"array\\";\\n      contains: Wrapper;\\n    }\\n\\n    export const isArray = (value: unknown): value is Array =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"complex\\") &&\\n        hasKind(value, \\"array\\") &&\\n        \\"contains\\" in value && isWrapper(value.contains);\\n\\n    export interface Mapping {\\n      class?: \\"complex\\";\\n      kind: \\"mapping\\";\\n      contains: {\\n        key: Wrapper\\n        value: Wrapper\\n      };\\n    }\\n\\n    export const isMapping = (value: unknown): value is Mapping =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"complex\\") &&\\n        hasKind(value, \\"mapping\\") &&\\n        \\"contains\\" in value &&\\n          typeof value.contains === \\"object\\" && !!value.contains &&\\n            \\"key\\" in value.contains && isWrapper(value.contains.key) &&\\n            \\"value\\" in value.contains && isWrapper(value.contains.value);\\n\\n    export interface Struct {\\n      class?: \\"complex\\";\\n      kind: \\"struct\\";\\n      contains: (\\n        & Wrapper\\n        & { name?: string }\\n      )[];\\n      definition?: Definition;\\n    }\\n\\n    export const isStruct = (value: unknown): value is Struct =>\\n      typeof value === \\"object\\" && !!value &&\\n        mayHaveClass(value, \\"complex\\") &&\\n        hasKind(value, \\"struct\\") &&\\n        \\"contains\\" in value && value.contains instanceof Array &&\\n        value.contains.every(\\n          (field) =>\\n            isWrapper(field) &&\\n            (\\n              !(\\"name\\" in field) || typeof field.name === \\"string\\"\\n            )\\n        ) &&\\n        (\\n          !(\\"definition\\" in value) || isDefinition(value.definition)\\n        );\\n  }\\n\\n  export interface Definition {\\n    name?: string;\\n    location?: Materials.SourceRange;\\n  }\\n\\n  export const isDefinition = (value: unknown): value is Definition =>\\n    typeof value === \\"object\\" && !!value &&\\n      (\\n        !(\\"name\\" in value) || typeof value.name === \\"string\\"\\n      ) &&\\n      (\\n        !(\\"location\\" in value) || Materials.isSourceRange(value.location)\\n      ) &&\\n      (\\n        Object.keys(value).includes(\\"name\\") ||\\n        Object.keys(value).includes(\\"location\\")\\n      );\\n\\n}\\n\\nexport const mayHaveClass = <Class extends string>(\\n  object: object,\\n  class_: Class\\n): object is { class: Class } =>\\n  !(\\"class\\" in object) || object.class === class_;\\n\\n\\nexport const hasKind = <Kind extends string>(\\n  object: object,\\n  kind: Kind\\n): object is { kind: Kind } =>\\n  \\"kind\\" in object && object.kind === kind;\\n"}]},"@ethdebug/pointers":{"sourceFiles":[{"filePath":"typings.d.ts","text":"declare module \\"solc\\" {\\n  function compile(input: string): string;\\n}\\n"},{"filePath":"vitest.config.ts","text":"import { defineProject } from \\"vitest/config\\";\\n\\nexport default defineProject({\\n  test: {\\n  }\\n});\\n"},{"filePath":"bin/run-example.ts","text":"import chalk from \\"chalk\\";\\nimport { highlight } from \\"cli-highlight\\";\\nimport { describeSchema } from \\"@ethdebug/format\\";\\n\\nimport {\\n  type Cursor,\\n  Data\\n} from \\"../src/index.js\\";\\n\\nimport { observeTrace } from \\"../test/index.js\\";\\n\\nimport { observeTraceTests } from \\"../src/test-cases.js\\";\\n\\nexport async function run() {\\n  const {\\n    pointer,\\n    compileOptions,\\n    observe\\n  } = observeTraceTests[\\"string storage\\"];\\n\\n  console.log(\\n    chalk.bold(chalk.cyan(\\n      \\"demo: run compiled solidity and watch a changing ethdebug/format pointer\\\\n\\"\\n    ))\\n  );\\n\\n  console.group(chalk.bold(\\"ethdebug/format pointer used by demo\\"));\\n  console.log(\\n    highlight(\\n      describeSchema({\\n        schema: { id: \\"schema:ethdebug/format/pointer\\" },\\n        pointer: \\"#/examples/4\\"\\n      }).yaml,\\n      { language: \\"yaml\\" }\\n    ).trim()\\n  );\\n  console.groupEnd();\\n  console.log(\\"\\");\\n\\n  console.group(chalk.bold(\\"solidity source code used by demo\\"));\\n  console.log(\\n    compileOptions.sources[\\"StringStorage.sol\\"].content.trim()\\n  );\\n  console.groupEnd();\\n  console.log(\\"\\");\\n\\n  console.group(chalk.bold(\\"observing deployment trace\\"));\\n\\n  const observedValues =\\n    await observeTrace({ pointer, compileOptions, observe });\\n\\n  console.groupEnd();\\n  console.log(\\"\\");\\n\\n  console.group(chalk.bold(\\"observed values:\\"));\\n  for (const value of observedValues) {\\n    console.log(\\"- %o\\", value);\\n  }\\n  console.groupEnd();\\n  console.log(\\"\\");\\n}\\n\\nawait run();\\n"},{"filePath":"src/cursor.ts","text":"import type { Pointer } from \\"@ethdebug/format\\";\\nimport type { Machine } from \\"./machine.js\\";\\nimport type { Data } from \\"./data.js\\";\\n\\n/**\\n * The result of dereferencing a pointer\\n */\\nexport interface Cursor {\\n  view(state: Machine.State): Promise<Cursor.View>;\\n}\\n\\nexport namespace Cursor {\\n  /**\\n   * The result of viewing a Cursor with a given Machine.State\\n   */\\n  export interface View {\\n    /**\\n     * A collection of concrete Cursor.Regions; this is a plain array of\\n     * regions and also provides filtering/lookup of regions by name\\n     * (according to the scoping rules outlined in the specification)\\n     */\\n    regions: Cursor.Regions;\\n\\n    /**\\n     * Read bytes from the machine state corresponding to the bytes range\\n     * for a particular concrete Cursor.Region\\n     */\\n    read(region: Cursor.Region): Promise<Data>;\\n  }\\n\\n  /**\\n   * A Pointer region where all dynamic expressions have been replaced with\\n   * concrete bytes values.\\n   */\\n  export type Region<R extends Pointer.Region = Pointer.Region> = {\\n    [K in keyof R]: K extends \\"slot\\" | \\"offset\\" | \\"length\\"\\n      ? R[K] extends Pointer.Expression\\n        ? Data\\n        : R[K] extends Pointer.Expression | undefined\\n          ? Data | undefined\\n          : R[K]\\n      : R[K];\\n  }\\n\\n  /**\\n   * A collection of concrete regions.\\n   *\\n   * This collection serves as a plain array of regions, for simple iteration\\n   * and whatever filtering.\\n   *\\n   * It also provides a couple interfaces of its own for accessing regions by\\n   * name.\\n   */\\n  export type Regions =\\n    & Cursor.Region[]\\n    & {\\n        /**\\n         * Obtain an ordered list of all regions with a particular name.\\n         *\\n         * This is useful, e.g., when looking to concatenate a series of\\n         * sequential regions that were generated by index from a list\\n         * collection\\n         */\\n        named(name: string): Cursor.Region[];\\n\\n        /**\\n         * Retrieve the last concrete region generated with a particular name\\n         */\\n        lookup: { [name: string]: Cursor.Region };\\n      };\\n}\\n"},{"filePath":"src/data.test.ts","text":"import { expect, describe, it } from \\"vitest\\";\\n\\nimport { Data } from \\"./data.js\\";\\n\\ndescribe(\\"Data\\", () => {\\n  describe(\\".prototype.asUint()\\", () => {\\n    it(\\"correctly converts to integers (big endian)\\", () => {\\n      const data = new Data([0x01, 0x00]);\\n\\n      expect(`${data.asUint()}`).toBe(\\"256\\");\\n    });\\n  });\\n\\n  describe(\\".fromUint()\\", () => {\\n    it(\\"correctly creates Data instances from bigints\\", () => {\\n      const data1 = Data.fromUint(0n);\\n      expect(data1).toEqual(new Data([]));\\n\\n      const data2 = Data.fromUint(255n);\\n      expect(data2).toEqual(new Data([0xff]));\\n\\n      const data3 = Data.fromUint(256n);\\n      expect(data3).toEqual(new Data([0x01, 0x00]));\\n\\n      const data4 = Data.fromUint(1234567890n);\\n      expect(data4).toEqual(new Data([0x49, 0x96, 0x02, 0xd2]));\\n    });\\n  });\\n\\n  describe(\\".fromNumber()\\", () => {\\n    it(\\"correctly creates Data instances from numbers\\", () => {\\n      const data1 = Data.fromNumber(0);\\n      expect(data1).toEqual(Data.zero());\\n\\n      const data2 = Data.fromNumber(255);\\n      expect(data2).toEqual(new Data([0xff]));\\n\\n      const data3 = Data.fromNumber(256);\\n      expect(data3).toEqual(new Data([0x01, 0x00]));\\n    });\\n  });\\n\\n  describe(\\".fromHex()\\", () => {\\n    it(\\"correctly creates Data instances from hex strings\\", () => {\\n      const data1 = Data.fromHex(\\"0x00\\");\\n      expect(data1).toEqual(new Data([0x00]));\\n\\n      const data2 = Data.fromHex(\\"0xff\\");\\n      expect(data2).toEqual(new Data([0xff]));\\n\\n      const data3 = Data.fromHex(\\"0x0100\\");\\n      expect(data3).toEqual(new Data([0x01, 0x00]));\\n\\n      const data4 = Data.fromHex(\\"0x499602d2\\");\\n      expect(data4).toEqual(new Data([0x49, 0x96, 0x02, 0xd2]));\\n    });\\n\\n    it(\\"throws an error for invalid hex string format\\", () => {\\n      expect(() => Data.fromHex(\\"ff\\")).toThrow(\\"Invalid hex string format. Expected \\\\\\"0x\\\\\\" prefix.\\");\\n    });\\n  });\\n});\\n"},{"filePath":"src/data.ts","text":"import { toHex } from \\"ethereum-cryptography/utils\\";\\n\\nimport type * as Util from \\"util\\";\\n\\nlet util: typeof Util | undefined;\\ntry {\\n  util = await import(\\"util\\");\\n} catch {}\\n\\nexport class Data extends Uint8Array {\\n  static zero(): Data {\\n    return new Data([]);\\n  }\\n\\n  static fromUint(value: bigint): Data {\\n    if (value === 0n) {\\n      return this.zero();\\n    }\\n\\n    const byteCount = Math.ceil(Number(value.toString(2).length) / 8);\\n    const bytes = new Uint8Array(byteCount);\\n    for (let i = byteCount - 1; i >= 0; i--) {\\n      bytes[i] = Number(value & 0xffn);\\n      value >>= 8n;\\n    }\\n    return new Data(bytes);\\n  }\\n\\n  static fromNumber(value: number): Data {\\n    const byteCount = Math.ceil(Math.log2(value + 1) / 8);\\n    const bytes = new Uint8Array(byteCount);\\n    for (let i = byteCount - 1; i >= 0; i--) {\\n      bytes[i] = value & 0xff;\\n      value >>= 8;\\n    }\\n    return new Data(bytes);\\n  }\\n\\n  static fromHex(hex: string): Data {\\n    if (!hex.startsWith(\'0x\')) {\\n      throw new Error(\'Invalid hex string format. Expected \\"0x\\" prefix.\');\\n    }\\n    const bytes = new Uint8Array((hex.length - 2) / 2 + 0.5);\\n    for (let i = 2; i < hex.length; i += 2) {\\n      bytes[i / 2 - 1] = parseInt(hex.slice(i, i + 2), 16);\\n    }\\n    return new Data(bytes);\\n  }\\n\\n  static fromBytes(bytes: Uint8Array): Data {\\n    return new Data(bytes);\\n  }\\n\\n  asUint(): bigint {\\n    const bits = 8n;\\n\\n    let value = 0n;\\n    for (const byte of this.values()) {\\n      const byteValue = BigInt(byte)\\n      value = (value << bits) + byteValue\\n    }\\n    return value;\\n  }\\n\\n  toHex(): string {\\n    return `0x${toHex(this)}`;\\n  }\\n\\n  padUntilAtLeast(length: number): Data {\\n    if (this.length >= length) {\\n      return this;\\n    }\\n\\n    const padded = new Uint8Array(length);\\n    padded.set(this, length - this.length);\\n    return Data.fromBytes(padded);\\n  }\\n\\n  resizeTo(length: number): Data {\\n    if (this.length === length) {\\n      return this;\\n    }\\n\\n    const resized = new Uint8Array(length);\\n\\n    if (this.length < length) {\\n      resized.set(this, length - this.length);\\n    } else {\\n      resized.set(this.slice(this.length - length));\\n    }\\n\\n    return Data.fromBytes(resized);\\n  }\\n\\n  concat(...others: Data[]): Data {\\n    // HACK concatenate via string representation\\n    const concatenatedHex = [this, ...others]\\n      .map(data => data.toHex().slice(2))\\n      .reduce((accumulator, hex) => `${accumulator}${hex}`, \\"0x\\");\\n\\n    return Data.fromHex(concatenatedHex);\\n  }\\n\\n  inspect(\\n    depth: number,\\n    options: Util.InspectOptionsStylized,\\n    inspect: typeof Util.inspect\\n  ): string {\\n    return `Data[${options.stylize(this.toHex(), \\"number\\")}]`;\\n  }\\n\\n  [\\n    util && \\"inspect\\" in util && typeof util.inspect === \\"object\\"\\n      ? util.inspect.custom\\n      : \\"_inspect\\"\\n  ](\\n    depth: number,\\n    options: Util.InspectOptionsStylized,\\n    inspect: typeof Util.inspect\\n  ): string {\\n    return this.inspect(depth, options, inspect);\\n  }\\n\\n}\\n"},{"filePath":"src/evaluate.test.ts","text":"import { expect, describe, it, beforeEach } from \\"vitest\\";\\n\\nimport { keccak256 } from \\"ethereum-cryptography/keccak\\";\\nimport { toHex } from \\"ethereum-cryptography/utils\\";\\n\\nimport { Pointer } from \\"@ethdebug/format\\";\\n\\nimport { Machine } from \\"./machine.js\\";\\nimport { Data } from \\"./data.js\\";\\nimport { Cursor } from \\"./cursor.js\\";\\nimport { evaluate, type EvaluateOptions } from \\"./evaluate.js\\";\\n\\n// Create a stub for the Machine.State interface\\nconst state: Machine.State = {\\n  traceIndex: Promise.resolve(0n),\\n  opcode: Promise.resolve(\\"PUSH1\\"),\\n  programCounter: Promise.resolve(10n),\\n  stack: {\\n    length: 50n\\n  } as any,\\n  memory: {} as any,\\n  storage: {} as any,\\n  calldata: {} as any,\\n  returndata: {} as any,\\n  transient: {} as any,\\n  code: {} as any,\\n};\\n\\ndescribe(\\"evaluate\\", () => {\\n  let regions: { [identifier: string]: Cursor.Region };\\n  let variables: { [identifier: string]: Data };\\n  let cursor: Cursor;\\n  let options: EvaluateOptions;\\n\\n  beforeEach(() => {\\n    variables = {\\n      foo: Data.fromNumber(42),\\n      bar: Data.fromHex(\\"0x1f\\"),\\n    };\\n\\n    regions = {\\n      stack: {\\n        name: \\"stack\\",\\n        location: \\"stack\\",\\n        slot: Data.fromNumber(42),\\n        offset: Data.fromNumber(0x60),\\n        length: Data.fromNumber(0x1f / 2)\\n      },\\n      memory: {\\n        name: \\"memory\\",\\n        location: \\"memory\\",\\n        offset: Data.fromNumber(0x20 * 0x05),\\n        length: Data.fromNumber(42 - 0x1f)\\n      }\\n    } ;\\n\\n    options = {\\n      state,\\n      variables,\\n      regions\\n    }\\n  });\\n\\n  it(\\"evaluates literal expressions\\", async () => {\\n    expect(await evaluate(42, options))\\n      .toEqual(Data.fromNumber(42));\\n\\n    expect(await evaluate(\\"0x1f\\", options))\\n      .toEqual(Data.fromHex(\\"0x1f\\"));\\n  });\\n\\n  it(\\"evaluates constant expressions\\", async () => {\\n    expect(await evaluate(\\"$wordsize\\", options))\\n      .toEqual(Data.fromHex(\\"0x20\\"));\\n  });\\n\\n  it(\\"evaluates variable expressions\\", async () => {\\n    expect(await evaluate(\\"foo\\", options))\\n      .toEqual(Data.fromNumber(42));\\n\\n    expect(await evaluate(\\"bar\\", options))\\n      .toEqual(Data.fromHex(\\"0x1f\\"));\\n  });\\n\\n  it(\\"evaluates sum expressions\\", async () => {\\n    const expression: Pointer.Expression = {\\n      $sum: [42, \\"0x1f\\", \\"foo\\", \\"bar\\"]\\n    };\\n\\n    expect(await evaluate(expression, options))\\n      .toEqual(Data.fromUint(42n + 0x1fn + 42n + 0x1fn));\\n  });\\n\\n  it(\\"evaluates difference expressions\\", async () => {\\n    const expression: Pointer.Expression = {\\n      $difference: [\\"foo\\", \\"bar\\"]\\n    };\\n\\n    expect(await evaluate(expression, options))\\n      .toEqual(Data.fromUint(42n - 0x1fn));\\n  });\\n\\n  it(\\"evaluates product expressions\\", async () => {\\n    const expression: Pointer.Expression = {\\n      $product: [42, \\"0x1f\\", \\"foo\\", \\"bar\\"]\\n    };\\n\\n    expect(await evaluate(expression, options))\\n      .toEqual(Data.fromUint(42n * 0x1fn * 42n * 0x1fn));\\n  });\\n\\n  it(\\"evaluates quotient expressions\\", async () => {\\n    const expression: Pointer.Expression = {\\n      $quotient: [\\"foo\\", \\"bar\\"]\\n    };\\n\\n    expect(await evaluate(expression, options))\\n      .toEqual(Data.fromUint(42n / 0x1fn));\\n  });\\n\\n  it(\\"evaluates remainder expressions\\", async () => {\\n    const expression: Pointer.Expression = {\\n      $remainder: [\\"foo\\", \\"bar\\"]\\n    };\\n\\n    expect(await evaluate(expression, options))\\n      .toEqual(Data.fromUint(42n % 0x1fn));\\n  });\\n\\n  // skipped because test does not perform proper padding\\n  it.skip(\\"evaluates keccak256 expressions\\", async () => {\\n    const expression: Pointer.Expression = {\\n      $keccak256: [\\"foo\\", \\"bar\\", 42, \\"0x1f\\"]\\n    };\\n\\n    const expectedHash = keccak256(\\n      Buffer.from(\\n        toHex(Data.fromNumber(42)).slice(2) +\\n        toHex(Data.fromHex(\\"0x1f\\")).slice(2) +\\n        toHex(variables.foo).slice(2) +\\n        toHex(variables.bar).slice(2),\\n        \\"hex\\"\\n      )\\n    );\\n\\n    expect(await evaluate(expression, options))\\n      .toEqual(Data.fromBytes(expectedHash));\\n  });\\n\\n  it(\\"evaluates offset lookup expressions\\", async () => {\\n    const expression: Pointer.Expression = {\\n      \\".offset\\": \\"stack\\"\\n    };\\n\\n    expect(await evaluate(expression, options))\\n      .toEqual(Data.fromUint(0x60n));\\n  });\\n\\n  it(\\"evaluates offset lookup expressions with $this\\", async () => {\\n    const expression: Pointer.Expression = {\\n      \\".offset\\": \\"$this\\"\\n    };\\n\\n    const $this = {\\n      name: \\"$this\\",\\n      location: \\"memory\\",\\n      offset: Data.fromNumber(0x120),\\n      length: Data.fromNumber(0x40)\\n    } as const;\\n\\n    expect(\\n      await evaluate(expression, {\\n        ...options,\\n        regions: {\\n          ...regions,\\n          $this\\n        }\\n      })\\n    ).toEqual(Data.fromUint(0x120n));\\n  });\\n\\n  it(\\"evaluates length lookup expressions\\", async () => {\\n    const expression: Pointer.Expression = {\\n      \\".length\\": \\"memory\\"\\n    };\\n\\n    expect(await evaluate(expression, options))\\n      .toEqual(Data.fromUint(11n));\\n  });\\n\\n  it(\\"evaluates slot lookup expressions\\", async () => {\\n    const expression: Pointer.Expression = {\\n      \\".slot\\": \\"stack\\"\\n    };\\n\\n    expect(await evaluate(expression, options))\\n      .toEqual(Data.fromNumber(42));\\n  });\\n\\n  describe(\\"resulting bytes widths\\", () => {\\n    it(\\"uses the fewest bytes necessary for a literal\\", async () => {\\n      expect(await evaluate(0, options)).toHaveLength(0);\\n      expect(await evaluate(\\"0x00\\", options)).toHaveLength(1);\\n      expect(await evaluate(\\"0x0000\\", options)).toHaveLength(2);\\n      expect(await evaluate(0xffff, options)).toHaveLength(2);\\n    });\\n\\n    it(\\"uses at least the largest bytes width amongst arithmetic operands\\", async () => {\\n      expect(await evaluate({ $sum: [0, 0] }, options)).toHaveLength(0);\\n\\n      expect(await evaluate({ $difference: [\\"0x00\\", \\"0x00\\"] }, options))\\n        .toHaveLength(1);\\n\\n      expect(await evaluate({ $remainder: [\\"0x0001\\", \\"0x01\\"] }, options))\\n        .toHaveLength(2);\\n    });\\n\\n    it(\\"uses exactly as many bytes necessary to avoid arithmetic overflow\\", async () => {\\n      expect(await evaluate({ $product: [\\"0xffff\\", \\"0xff\\"] }, options))\\n        .toHaveLength(3);\\n    });\\n  });\\n\\n  it(\\"evaluates resize expressions\\", async () => {\\n    expect(await evaluate({ $sized1: 0 }, options)).toHaveLength(1);\\n\\n    {\\n      const data = await evaluate({ $sized1: \\"0xabcd\\" }, options);\\n      expect(data).toHaveLength(1);\\n      expect(data).toEqual(Data.fromNumber(0xcd));\\n    }\\n\\n    {\\n      const data = await evaluate({ $wordsized: \\"0xabcd\\" }, options);\\n      expect(data).toHaveLength(32);\\n      expect(data).toEqual(Data.fromNumber(0xabcd).resizeTo(32));\\n    }\\n  });\\n});\\n"},{"filePath":"src/evaluate.ts","text":"import { Pointer } from \\"@ethdebug/format\\";\\nimport { Machine } from \\"./machine.js\\";\\nimport { Data } from \\"./data.js\\";\\nimport type { Cursor } from \\"./cursor.js\\";\\nimport { read } from \\"./read.js\\";\\nimport { keccak256 } from \\"ethereum-cryptography/keccak\\";\\nimport { toHex } from \\"ethereum-cryptography/utils\\";\\n\\nexport interface EvaluateOptions {\\n  state: Machine.State;\\n  regions: {\\n    [identifier: string]: Cursor.Region;\\n  };\\n  variables: {\\n    [identifier: string]: Data;\\n  };\\n}\\n\\nexport async function evaluate(\\n  expression: Pointer.Expression,\\n  options: EvaluateOptions\\n): Promise<Data> {\\n  if (Pointer.Expression.isLiteral(expression)) {\\n    return evaluateLiteral(expression);\\n  }\\n\\n  if (Pointer.Expression.isConstant(expression)) {\\n    return evaluateConstant(expression);\\n  }\\n\\n  if (Pointer.Expression.isVariable(expression)) {\\n    return evaluateVariable(expression, options);\\n  }\\n\\n  if (Pointer.Expression.isArithmetic(expression)) {\\n    if (Pointer.Expression.Arithmetic.isSum(expression)) {\\n      return evaluateArithmeticSum(expression, options);\\n    }\\n\\n    if (Pointer.Expression.Arithmetic.isDifference(expression)) {\\n      return evaluateArithmeticDifference(expression, options);\\n    }\\n\\n    if (Pointer.Expression.Arithmetic.isProduct(expression)) {\\n      return evaluateArithmeticProduct(expression, options);\\n    }\\n\\n    if (Pointer.Expression.Arithmetic.isQuotient(expression)) {\\n      return evaluateArithmeticQuotient(expression, options);\\n    }\\n\\n    if (Pointer.Expression.Arithmetic.isRemainder(expression)) {\\n      return evaluateArithmeticRemainder(expression, options);\\n    }\\n  }\\n\\n  if (Pointer.Expression.isKeccak256(expression)) {\\n    return evaluateKeccak256(expression, options);\\n  }\\n\\n  if (Pointer.Expression.isResize(expression)) {\\n    return evaluateResize(expression, options);\\n  }\\n\\n  if (Pointer.Expression.isLookup(expression)) {\\n    if (Pointer.Expression.Lookup.isOffset(expression)) {\\n      return evaluateLookup(\\".offset\\", expression, options);\\n    }\\n\\n    if (Pointer.Expression.Lookup.isLength(expression)) {\\n      return evaluateLookup(\\".length\\", expression, options);\\n    }\\n\\n    if (Pointer.Expression.Lookup.isSlot(expression)) {\\n      return evaluateLookup(\\".slot\\", expression, options);\\n    }\\n  }\\n\\n  if (Pointer.Expression.isRead(expression)) {\\n    return evaluateRead(expression, options);\\n  }\\n\\n  throw new Error(\\n    `Unexpected runtime failure to recognize kind of expression: ${\\n      JSON.stringify(expression)\\n    }`\\n  );\\n}\\n\\nasync function evaluateLiteral(\\n  literal: Pointer.Expression.Literal\\n): Promise<Data> {\\n  switch (typeof literal) {\\n    case \\"string\\":\\n      return Data.fromHex(literal);\\n    case \\"number\\":\\n      return Data.fromNumber(literal);\\n  }\\n}\\n\\nasync function evaluateConstant(\\n  constant: Pointer.Expression.Constant\\n): Promise<Data> {\\n  switch (constant) {\\n    case \\"$wordsize\\":\\n      return Data.fromHex(\\"0x20\\");\\n  }\\n}\\n\\nasync function evaluateVariable(\\n  identifier: Pointer.Expression.Variable,\\n  { variables }: EvaluateOptions\\n): Promise<Data> {\\n  const data = variables[identifier];\\n  if (typeof data === \\"undefined\\") {\\n    throw new Error(`Unknown variable with identifier ${identifier}`);\\n  }\\n\\n  return data;\\n}\\n\\nasync function evaluateArithmeticSum(\\n  expression: Pointer.Expression.Arithmetic.Sum,\\n  options: EvaluateOptions\\n): Promise<Data> {\\n  const operands = await Promise.all(expression.$sum.map(\\n    async expression => await evaluate(expression, options)\\n  ));\\n\\n  const maxLength = operands\\n    .reduce((max, { length }) => length > max ? length : max, 0);\\n\\n  const data = Data\\n    .fromUint(operands.reduce((sum, data) => sum + data.asUint(), 0n))\\n    .padUntilAtLeast(maxLength);\\n\\n  return data;\\n}\\n\\nasync function evaluateArithmeticDifference(\\n  expression: Pointer.Expression.Arithmetic.Difference,\\n  options: EvaluateOptions\\n): Promise<Data> {\\n  const [a, b] = await Promise.all(expression.$difference.map(\\n    async expression => await evaluate(expression, options)\\n  ));\\n\\n  const maxLength = a.length > b.length ? a.length : b.length;\\n\\n  const unpadded = a.asUint() > b.asUint()\\n    ? Data.fromUint(a.asUint() - b.asUint())\\n    : Data.fromNumber(0);\\n\\n  const data = unpadded.padUntilAtLeast(maxLength);\\n  return data;\\n}\\n\\nasync function evaluateArithmeticProduct(\\n  expression: Pointer.Expression.Arithmetic.Product,\\n  options: EvaluateOptions\\n): Promise<Data> {\\n  const operands = await Promise.all(expression.$product.map(\\n    async expression => await evaluate(expression, options)\\n  ));\\n\\n  const maxLength = operands\\n    .reduce((max, { length }) => length > max ? length : max, 0);\\n\\n  return Data\\n    .fromUint(operands.reduce((product, data) => product * data.asUint(), 1n))\\n    .padUntilAtLeast(maxLength);\\n}\\n\\nasync function evaluateArithmeticQuotient(\\n  expression: Pointer.Expression.Arithmetic.Quotient,\\n  options: EvaluateOptions\\n): Promise<Data> {\\n  const [a, b] = await Promise.all(expression.$quotient.map(\\n    async expression => (await evaluate(expression, options))\\n  ));\\n\\n  const maxLength = a.length > b.length ? a.length : b.length;\\n\\n  const data = Data\\n    .fromUint(a.asUint() / b.asUint())\\n    .padUntilAtLeast(maxLength);\\n\\n  return data;\\n}\\n\\nasync function evaluateArithmeticRemainder(\\n  expression: Pointer.Expression.Arithmetic.Remainder,\\n  options: EvaluateOptions\\n): Promise<Data> {\\n  const [a, b] = await Promise.all(expression.$remainder.map(\\n    async expression => await evaluate(expression, options)\\n  ));\\n\\n  const maxLength = a.length > b.length ? a.length : b.length;\\n\\n  const data = Data\\n    .fromUint(a.asUint() % b.asUint())\\n    .padUntilAtLeast(maxLength);\\n\\n  return data;\\n}\\n\\nasync function evaluateKeccak256(\\n  expression: Pointer.Expression.Keccak256,\\n  options: EvaluateOptions\\n): Promise<Data> {\\n  const operands = await Promise.all(expression.$keccak256.map(\\n    async expression => await evaluate(expression, options)\\n  ));\\n\\n  const preimage = Data.zero().concat(...operands);\\n  const hash = Data.fromBytes(keccak256(preimage));\\n\\n  return hash;\\n}\\n\\nasync function evaluateResize(\\n  expression: Pointer.Expression.Resize,\\n  options: EvaluateOptions\\n): Promise<Data> {\\n  const [[operation, subexpression]] = Object.entries(expression);\\n\\n  const newLength = Pointer.Expression.Resize.isToNumber(expression)\\n    ? Number(operation.match(/^\\\\$sized([1-9]+[0-9]*)$/)![1])\\n    : 32;\\n\\n  return (await evaluate(subexpression, options)).resizeTo(newLength);\\n}\\n\\nasync function evaluateLookup<O extends Pointer.Expression.Lookup.Operation>(\\n  operation: O,\\n  lookup: Pointer.Expression.Lookup.ForOperation<O>,\\n  options: EvaluateOptions\\n): Promise<Data> {\\n  const { regions } = options;\\n\\n  const identifier = lookup[operation];\\n  const region = regions[identifier];\\n  if (!region) {\\n    throw new Error(`Region not found: ${identifier}`);\\n  }\\n\\n  const property = Pointer.Expression.Lookup.propertyFrom(operation);\\n\\n  const data = region[property as keyof typeof region] as Data | undefined;\\n\\n  if (typeof data === \\"undefined\\") {\\n    throw new Error(\\n      `Region named ${identifier} does not have ${property} needed by lookup`\\n    );\\n  }\\n\\n  return data;\\n}\\n\\nasync function evaluateRead(\\n  expression: Pointer.Expression.Read,\\n  options: EvaluateOptions\\n): Promise<Data> {\\n  const { state, regions } = options;\\n\\n  const identifier = expression.$read;\\n  const region = regions[identifier];\\n  if (!region) {\\n    throw new Error(`Region not found: ${identifier}`);\\n  }\\n\\n  return await read(region, options);\\n}\\n"},{"filePath":"src/index.ts","text":"export { dereference, DereferenceOptions } from \\"./dereference/index.js\\";\\nexport { Cursor } from \\"./cursor.js\\";\\n\\nexport type { Machine } from \\"./machine.js\\";\\nexport { Data } from \\"./data.js\\";\\n"},{"filePath":"src/integration.test.ts","text":"import { expect, describe, it, beforeEach } from \\"vitest\\";\\n\\nimport { observeTrace } from \\"../test/index.js\\";\\nimport { observeTraceTests } from \\"./test-cases.js\\";\\n\\ndescribe(\\"dereference (integration)\\", () => {\\n  describe(\\"changing pointer values over the course of a trace\\", () => {\\n    for (const [name, test] of Object.entries(observeTraceTests)) {\\n      const { expectedValues, ...options } = test;\\n\\n      describe(`example pointer: ${name}`, () => {\\n        it(\\"resolves to values containing the expected sequence\\", async () => {\\n          const observedValues =\\n            await observeTrace(options as any);\\n\\n          expect(observedValues)\\n            .toEqual(expect.arrayContaining(expectedValues as any));\\n        });\\n      });\\n    }\\n  });\\n});\\n"},{"filePath":"src/machine.ts","text":"import type { Data } from \\"./data.js\\";\\n\\nexport interface Machine {\\n  trace(): AsyncIterable<Machine.State>;\\n}\\n\\nexport namespace Machine {\\n\\n  export interface State {\\n    get traceIndex(): Promise<bigint>;\\n    get programCounter(): Promise<bigint>;\\n    get opcode(): Promise<string>;\\n\\n    get stack(): State.Stack;\\n    get memory(): State.Bytes;\\n    get storage(): State.Words;\\n    get calldata(): State.Bytes;\\n    get returndata(): State.Bytes;\\n    get transient(): State.Words;\\n    get code(): State.Bytes;\\n  }\\n\\n  export namespace State {\\n    export interface Slice {\\n      offset: bigint;\\n      length: bigint;\\n    }\\n\\n    export interface Stack {\\n      get length(): Promise<bigint>;\\n\\n      /** read element at position from top of stack */\\n      peek(options: {\\n        depth: bigint;\\n        slice?: Slice;\\n      }): Promise<Data>;\\n    }\\n\\n    export interface Bytes {\\n      get length(): Promise<bigint>;\\n\\n      read(options: { slice: Slice }): Promise<Data>;\\n    }\\n\\n    export interface Words {\\n      read(options: { slot: Data; slice?: Slice }): Promise<Data>;\\n    }\\n  }\\n}\\n"},{"filePath":"src/read.test.ts","text":"import { vitest, expect, describe, it, beforeEach } from \\"vitest\\";\\n\\nimport type { Pointer } from \\"@ethdebug/format\\";\\n\\nimport { Machine } from \\"./machine.js\\";\\nimport { Data } from \\"./data.js\\";\\nimport { read, type ReadOptions } from \\"./read.js\\";\\nimport { Cursor } from \\"./cursor.js\\";\\n\\ndescribe(\\"read\\", () => {\\n  let options: ReadOptions;\\n\\n  beforeEach(() => {\\n    const state: Machine.State = {\\n      stack: {\\n        length: 50n,\\n        peek: vitest.fn(\\n          async ({ depth, slice }) =>\\n            Data.fromBytes(new Uint8Array([0x11, 0x22, 0x33, 0x44]))\\n        ),\\n      },\\n      memory: {\\n        read: vitest.fn(\\n          async ({ slice }) =>\\n            Data.fromBytes(new Uint8Array([0x55, 0x66, 0x77, 0x88]))\\n        ),\\n      },\\n      storage: {\\n        read: vitest.fn(\\n          async ({ slot, slice }) =>\\n            Data.fromBytes(new Uint8Array([0xaa, 0xbb, 0xcc, 0xdd]))\\n        ),\\n      },\\n      calldata: {\\n        read: vitest.fn(\\n          async ({ slice }) =>\\n            Data.fromBytes(new Uint8Array([0x11, 0x22, 0x33, 0x44]))\\n        ),\\n      },\\n      returndata: {\\n        read: vitest.fn(\\n          async ({ slice }) =>\\n            Data.fromBytes(new Uint8Array([0x55, 0x66, 0x77, 0x88]))\\n        ),\\n      },\\n      transient: {\\n        read: vitest.fn(\\n          async ({ slot, slice }) =>\\n            Data.fromBytes(new Uint8Array([0xaa, 0xbb, 0xcc, 0xdd]))\\n        ),\\n      },\\n      code: {\\n        read: vitest.fn(\\n          async ({ slice }) =>\\n            Data.fromBytes(new Uint8Array([0x11, 0x22, 0x33, 0x44]))\\n        ),\\n      },\\n    } as unknown as Machine.State;\\n\\n    options = {\\n      state\\n    };\\n  });\\n\\n  it(\\"reads data from stack\\", async () => {\\n    const region: Cursor.Region<Pointer.Region.Stack> = {\\n      location: \\"stack\\",\\n      slot: Data.fromNumber(42),\\n      offset: Data.fromNumber(1),\\n      length: Data.fromNumber(2),\\n    };\\n\\n    const result = await read(region, options);\\n\\n    expect(options.state.stack.peek)\\n      .toHaveBeenCalledWith({ depth: 42n, slice: { offset: 1n, length: 2n } });\\n    expect(result)\\n      .toEqual(Data.fromBytes(new Uint8Array([0x11, 0x22, 0x33, 0x44])));\\n  });\\n\\n  it(\\"reads data from memory\\", async () => {\\n    const region: Cursor.Region<Pointer.Region.Memory> = {\\n      location: \\"memory\\",\\n      offset: Data.fromNumber(0),\\n      length: Data.fromNumber(4),\\n    };\\n\\n    const result = await read(region, options);\\n\\n    expect(options.state.memory.read)\\n      .toHaveBeenCalledWith({ slice: { offset: 0n, length: 4n } });\\n    expect(result)\\n      .toEqual(Data.fromBytes(new Uint8Array([0x55, 0x66, 0x77, 0x88])));\\n  });\\n\\n  it(\\"reads data from storage\\", async () => {\\n    const region: Cursor.Region<Pointer.Region.Storage> = {\\n      location: \\"storage\\",\\n      slot: Data.fromNumber(0),\\n      offset: Data.fromNumber(2),\\n      length: Data.fromNumber(2),\\n    };\\n\\n    const result = await read(region, options);\\n\\n    expect(options.state.storage.read)\\n      .toHaveBeenCalledWith({\\n        slot: Data.fromNumber(0),\\n        slice: { offset: 2n, length: 2n }\\n      });\\n\\n    expect(result)\\n      .toEqual(Data.fromBytes(new Uint8Array([0xaa, 0xbb, 0xcc, 0xdd])));\\n  });\\n\\n  it(\\"reads data from calldata\\", async () => {\\n    const region: Cursor.Region<Pointer.Region.Calldata> = {\\n      location: \\"calldata\\",\\n      offset: Data.fromNumber(0),\\n      length: Data.fromNumber(4),\\n    };\\n\\n    const result = await read(region, options);\\n\\n    expect(options.state.calldata.read)\\n      .toHaveBeenCalledWith({ slice: { offset: 0n, length: 4n } });\\n    expect(result)\\n      .toEqual(Data.fromBytes(new Uint8Array([0x11, 0x22, 0x33, 0x44])));\\n  });\\n\\n  it(\\"reads data from returndata\\", async () => {\\n    const region: Cursor.Region<Pointer.Region.Returndata> = {\\n      location: \\"returndata\\",\\n      offset: Data.fromNumber(0),\\n      length: Data.fromNumber(4),\\n    };\\n\\n    const result = await read(region, options);\\n\\n    expect(options.state.returndata.read)\\n      .toHaveBeenCalledWith({ slice: { offset: 0n, length: 4n } });\\n    expect(result)\\n      .toEqual(Data.fromBytes(new Uint8Array([0x55, 0x66, 0x77, 0x88])));\\n  });\\n\\n  it(\\"reads data from transient\\", async () => {\\n    const region: Cursor.Region<Pointer.Region.Transient> = {\\n      location: \\"transient\\",\\n      slot: Data.fromNumber(42),\\n      offset: Data.fromNumber(1),\\n      length: Data.fromNumber(2),\\n    };\\n\\n    const result = await read(region, options);\\n\\n    expect(options.state.transient.read)\\n      .toHaveBeenCalledWith({\\n        slot: Data.fromNumber(42),\\n        slice: { offset: 1n, length: 2n }\\n      });\\n\\n    expect(result)\\n      .toEqual(Data.fromBytes(new Uint8Array([0xaa, 0xbb, 0xcc, 0xdd])));\\n  });\\n\\n  it(\\"reads data from code\\", async () => {\\n    const region: Cursor.Region<Pointer.Region.Code> = {\\n      location: \\"code\\",\\n      offset: Data.fromNumber(0),\\n      length: Data.fromNumber(4),\\n    };\\n\\n    const result = await read(region, options);\\n\\n    expect(options.state.code.read)\\n      .toHaveBeenCalledWith({\\n        slice: { offset: 0n, length: 4n }\\n      });\\n\\n    expect(result)\\n      .toEqual(Data.fromBytes(new Uint8Array([0x11, 0x22, 0x33, 0x44])));\\n  });\\n\\n  it(\\"uses default offset and length values for stack region\\", async () => {\\n    const region: Cursor.Region<Pointer.Region.Stack> = {\\n      location: \\"stack\\",\\n      slot: Data.fromNumber(42),\\n    };\\n\\n    const result = await read(region, options);\\n\\n    expect(options.state.stack.peek)\\n      .toHaveBeenCalledWith({\\n        depth: 42n,\\n        slice: { offset: 0n, length: 32n }\\n      });\\n\\n    expect(result)\\n      .toEqual(Data.fromBytes(new Uint8Array([0x11, 0x22, 0x33, 0x44])));\\n  });\\n\\n  it(\\"uses default offset and length values for storage region\\", async () => {\\n    const region: Cursor.Region<Pointer.Region.Storage> = {\\n      location: \\"storage\\",\\n      slot: Data.fromHex(\\"0x1f\\"),\\n    };\\n\\n    const result = await read(region, options);\\n\\n    expect(options.state.storage.read)\\n      .toHaveBeenCalledWith({\\n        slot: Data.fromHex(\\"0x1f\\"),\\n        slice: { offset: 0n, length: 32n }\\n      });\\n\\n    expect(result)\\n      .toEqual(Data.fromBytes(new Uint8Array([0xaa, 0xbb, 0xcc, 0xdd])));\\n  });\\n\\n  it(\\"uses default offset and length values for transient region\\", async () => {\\n    const region: Cursor.Region<Pointer.Region.Transient> = {\\n      location: \\"transient\\",\\n      slot: Data.fromNumber(42)\\n    };\\n\\n    const result = await read(region, options);\\n\\n    expect(options.state.transient.read)\\n      .toHaveBeenCalledWith({\\n        slot: Data.fromNumber(42),\\n        slice: { offset: 0n, length: 32n }\\n      });\\n\\n    expect(result)\\n      .toEqual(Data.fromBytes(new Uint8Array([0xaa, 0xbb, 0xcc, 0xdd])));\\n  });\\n});\\n"},{"filePath":"src/read.ts","text":"import { Pointer } from \\"@ethdebug/format\\";\\nimport { Machine } from \\"./machine.js\\";\\nimport { Data } from \\"./data.js\\";\\nimport type { Cursor } from \\"./cursor.js\\";\\n\\nexport interface ReadOptions {\\n  state: Machine.State;\\n}\\n\\nexport async function read(\\n  region: Cursor.Region,\\n  options: ReadOptions\\n): Promise<Data> {\\n  const { location } = region;\\n  const { state } = options;\\n\\n  switch (location) {\\n    case \\"stack\\": {\\n      const {\\n        slot,\\n        offset = 0n,\\n        length = 32n\\n      } = withPropertiesAsUints([\\"slot\\", \\"offset\\", \\"length\\"], region);\\n\\n      return await state.stack.peek({\\n        depth: slot,\\n        slice: {\\n          offset,\\n          length\\n        }\\n      });\\n    }\\n    case \\"memory\\": {\\n      const {\\n        offset,\\n        length\\n      } = withPropertiesAsUints([\\"offset\\", \\"length\\"], region);\\n\\n      return await state.memory.read({\\n        slice: {\\n          offset: offset,\\n          length: length\\n        }\\n      });\\n    }\\n    case \\"storage\\": {\\n      const { slot } = region;\\n      const {\\n        offset = 0n,\\n        length = 32n\\n      } = withPropertiesAsUints([\\"offset\\", \\"length\\"], region);\\n\\n      return await state.storage.read({\\n        slot,\\n        slice: {\\n          offset,\\n          length\\n        }\\n      });\\n    }\\n    case \\"calldata\\": {\\n      const {\\n        offset,\\n        length\\n      } = withPropertiesAsUints([\\"offset\\", \\"length\\"], region);\\n\\n      return await state.calldata.read({ slice: { offset, length } });\\n    }\\n    case \\"returndata\\": {\\n      const {\\n        offset,\\n        length\\n      } = withPropertiesAsUints([\\"offset\\", \\"length\\"], region);\\n\\n      return await state.returndata.read({ slice: { offset, length } });\\n    }\\n    case \\"transient\\": {\\n      const { slot } = region;\\n      const {\\n        offset = 0n,\\n        length = 32n\\n      } = withPropertiesAsUints([\\"offset\\", \\"length\\"], region);\\n\\n      return await state.transient.read({\\n        slot,\\n        slice: {\\n          offset,\\n          length\\n        }\\n      });\\n    }\\n    case \\"code\\": {\\n      const {\\n        offset,\\n        length\\n      } = withPropertiesAsUints([\\"offset\\", \\"length\\"], region);\\n\\n      return await state.code.read({ slice: { offset, length } });\\n    }\\n  }\\n}\\n\\ntype DataProperties<R extends Pointer.Region> = {\\n  [K in (\\n    & keyof Cursor.Region<R>\\n    & (\\"slot\\" | \\"offset\\" | \\"length\\")\\n  )]: Cursor.Region<R>[K];\\n}\\n\\ntype PickDataPropertiesAsUints<\\n  R extends Pointer.Region,\\n  U extends keyof DataProperties<R>\\n> = {\\n  [K in U]:\\n    undefined extends Cursor.Region<R>[K]\\n      ? bigint | undefined\\n      : bigint\\n};\\n\\nfunction withPropertiesAsUints<\\n  R extends Pointer.Region,\\n  U extends keyof DataProperties<R>\\n>(\\n  uintKeys: U[],\\n  region: Cursor.Region<R>\\n): PickDataPropertiesAsUints<R, U> {\\n  const result: Partial<PickDataPropertiesAsUints<R, U>> = {};\\n  for (const key of uintKeys) {\\n    const data: Data | undefined = region[key] as Data | undefined;\\n    if (typeof data !== \\"undefined\\") {\\n      result[key] = data.asUint();\\n    }\\n  }\\n\\n  return result as PickDataPropertiesAsUints<R, U>;\\n}\\n"},{"filePath":"src/test-cases.ts","text":"import {\\n  singleSourceCompilation,\\n  findExamplePointer,\\n  type ObserveTraceOptions\\n} from \\"../test/index.js\\";\\nimport { type Cursor, Data } from \\"./index.js\\";\\n\\nexport interface ObserveTraceTest<V> extends ObserveTraceOptions<V> {\\n  expectedValues: V[];\\n}\\n\\nconst structStorageTest: ObserveTraceTest<{\\n  x: number;\\n  y: number;\\n  salt: string;\\n}> = {\\n  pointer: findExamplePointer(\\"struct-storage-contract-variable-slot\\"),\\n  compileOptions: singleSourceCompilation({\\n    path: \\"StructStorage.sol\\",\\n    contractName: \\"StructStorage\\",\\n    content: `contract StructStorage {\\n      Record record;\\n\\n      uint8 step;\\n\\n      constructor() {\\n        record = Record({\\n          x: 5,\\n          y: 8,\\n          salt: 0xdeadbeef\\n        });\\n\\n        // trick the optimizer maybe (otherwise the first record assignment\\n        // will get optimized out)\\n        //\\n        // compiler might be smarter in the future and cause this test to fail\\n        step = 1;\\n\\n        record = Record({\\n          x: 1,\\n          y: 2,\\n          salt: 0xfeedface\\n        });\\n\\n        step = 2;\\n      }\\n    }\\n\\n    struct Record {\\n      uint8 x;\\n      uint8 y;\\n      bytes4 salt;\\n    }\\n    `\\n  }),\\n\\n  expectedValues: [\\n    { x: 0, y: 0, salt: \\"0x\\" },\\n    { x: 5, y: 8, salt: \\"0xdeadbeef\\" },\\n    { x: 1, y: 2, salt: \\"0xfeedface\\" },\\n  ],\\n\\n  async observe({ regions, read }) {\\n    const x = Number(\\n      (await read(regions.lookup[\\"x\\"])).asUint()\\n    );\\n\\n    const y = Number(\\n      (await read(regions.lookup[\\"y\\"])).asUint()\\n    );\\n\\n    const salt = (await read(regions.lookup[\\"salt\\"])).toHex();\\n\\n    return { x, y, salt };\\n  },\\n\\n  equals(a, b) {\\n    return a.x === b.x && a.y === b.y && a.salt === b.salt;\\n  }\\n};\\n\\nconst stringStorageTest: ObserveTraceTest<string> = {\\n  pointer: findExamplePointer(\\"string-storage-contract-variable-slot\\"),\\n\\n  compileOptions: singleSourceCompilation({\\n    path: \\"StringStorage.sol\\",\\n    contractName: \\"StringStorage\\",\\n    content: `contract StringStorage {\\n      string storedString;\\n      bool done;\\n\\n      event Done();\\n\\n      constructor() {\\n        storedString = \\"hello world\\";\\n        storedString = \\"solidity storage is a fun lesson in endianness\\";\\n\\n        done = true;\\n      }\\n    }\\n    `\\n  }),\\n\\n  expectedValues: [\\n    \\"\\",\\n    \\"hello world\\",\\n    \\"solidity storage is a fun lesson in endianness\\"\\n  ],\\n\\n  async observe({ regions, read }: Cursor.View): Promise<string> {\\n    // collect all the regions corresponding to string contents\\n    const strings = regions.named(\\"string\\");\\n\\n    // read each region and concatenate all the bytes\\n    const stringData: Data = Data.zero()\\n      .concat(...await Promise.all(strings.map(read)));\\n\\n    // decode into JS string\\n    return new TextDecoder().decode(stringData);\\n  },\\n};\\n\\nconst uint256ArrayMemoryTest: ObserveTraceTest<number[]> = {\\n  pointer: findExamplePointer(\\"uint256-array-memory-pointer-slot\\"),\\n  compileOptions: singleSourceCompilation({\\n    path: \\"Uint256Arraymemory.sol\\",\\n    contractName: \\"Uint256ArrayMemory\\",\\n    content: `contract Uint256ArrayMemory {\\n      constructor() {\\n        uint256[] memory values = new uint256[](0);\\n        values = appendToArray(values, 1);\\n        values = appendToArray(values, 2);\\n        values = appendToArray(values, 3);\\n      }\\n\\n      function appendToArray(\\n        uint256[] memory arr,\\n        uint256 value\\n      )\\n        private\\n        pure\\n        returns (uint256[] memory)\\n      {\\n        uint256[] memory newArray = new uint256[](arr.length + 1);\\n\\n        for (uint i = 0; i < arr.length; i++) {\\n          newArray[i] = arr[i];\\n        }\\n\\n        newArray[arr.length] = value;\\n        return newArray;\\n      }\\n    }\\n    `\\n  }),\\n\\n  expectedValues: [\\n    [],\\n    [1],\\n    [1, 2],\\n    [1, 2, 3]\\n  ],\\n\\n  async observe({ regions, read }, state): Promise<number[]> {\\n    const items = regions.named(\\"array-item\\");\\n\\n    return (await Promise.all(\\n      items.map(async (item) => {\\n        const data = await read(item);\\n\\n        return Number(data.asUint());\\n      })\\n    ));\\n  },\\n\\n  equals(a, b) {\\n    if (a.length !== b.length) {\\n      return false;\\n    }\\n\\n    for (const [index, value] of a.entries()) {\\n      if (b[index] !== value) {\\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  },\\n\\n  // this function uses observation of solc + viaIR behavior to determine\\n  // that the memory array we\'re looking for is going to have a pointer at\\n  // the bottom of the stack\\n  //\\n  // also include a check to exclude observation when that bottom stack value\\n  // would have `cursor.view()` yield more regions than expected\\n  async shouldObserve(state) {\\n    const stackLength = await state.stack.length;\\n    if (stackLength === 0n) {\\n      return false;\\n    }\\n\\n    // only consider the bottom of the stack\\n    const arrayOffset = await state.stack.peek({ depth: stackLength - 1n });\\n\\n    const arrayCount = await state.memory.read({\\n      slice: {\\n        offset: arrayOffset.asUint(),\\n        length: 32n\\n      }\\n    })\\n\\n    // the example code only appends three times\\n    return arrayCount.asUint() < 4n;\\n  }\\n};\\n\\n/**\\n * collection of descriptions of tests that compile+deploy Solidity code,\\n * then step through the machine trace of that code\'s execution, watching\\n * and recording a pointer\'s value over the course of that trace.\\n *\\n * tests are described in terms of an expected sequence of values which the\\n * list of observed values should contain by the end of the trace, allowing\\n * for additional unexpected values in between and around the expected values.\\n */\\nexport const observeTraceTests = {\\n  \\"struct storage\\": structStorageTest,\\n  \\"string storage\\": stringStorageTest,\\n  \\"uint256[] memory\\": uint256ArrayMemoryTest,\\n};\\n"},{"filePath":"test/deploy.ts","text":"import type { EthereumProvider } from \\"ganache\\";\\n\\nimport { Data } from \\"../src/data.js\\";\\n\\nexport async function deployContract(\\n  createBytecode: Data,\\n  provider: EthereumProvider\\n): Promise<{\\n  transactionHash: Data;\\n  contractAddress: Data;\\n}> {\\n  // just use the first unlocked account\\n  const [account] = await provider.request({\\n    method: \\"eth_accounts\\",\\n    params: []\\n  });\\n\\n  // issue a transaction that will be mined immediately\\n  const transactionHash = Data.fromHex(await provider.request({\\n    method: \\"eth_sendTransaction\\",\\n    params: [{\\n      from: account,\\n      gas: \\"0x989680\\",\\n      data: createBytecode.toHex()\\n    }]\\n  }));\\n\\n  // read the receipt and extract the deployed contract address\\n  const contractAddress = Data.fromHex((await provider.request({\\n    method: \\"eth_getTransactionReceipt\\",\\n    params: [transactionHash.toHex()]\\n  })).contractAddress);\\n\\n  return {\\n    transactionHash,\\n    contractAddress\\n  };\\n}\\n"},{"filePath":"test/examples.ts","text":"import { type Pointer, describeSchema } from \\"@ethdebug/format\\";\\n\\nimport type { CompileOptions } from \\"./solc.js\\";\\n\\nexport const findExamplePointer = (() => {\\n  const {\\n    schema: {\\n      examples: examplePointers\\n    }\\n  } = describeSchema({\\n    schema: { id: \\"schema:ethdebug/format/pointer\\" }\\n  }) as { schema: { examples: Pointer[] } };\\n\\n  return (text: string): Pointer =>\\n    examplePointers\\n      .find(pointer => JSON.stringify(pointer).includes(text))!;\\n})();\\n"},{"filePath":"test/ganache.ts","text":"import type { EthereumProvider } from \\"ganache\\";\\n\\nimport { Machine } from \\"../src/machine.js\\";\\nimport { Data } from \\"../src/data.js\\";\\n\\nexport async function loadGanache() {\\n  const originalWarn = console.warn;\\n  console.warn = (...args: any[]) => {\\n    if (\\n      args.length > 0 &&\\n      typeof args[0] === \\"string\\" &&\\n      args[0].includes(\\"bigint: Failed to load bindings\\")\\n    ) {\\n      return;\\n    }\\n\\n    originalWarn(...args);\\n  };\\n\\n  const { default: Ganache } = await import(\\"ganache\\");\\n\\n  console.warn = originalWarn;\\n  return Ganache;\\n}\\n\\nexport function machineForProvider(\\n  provider: EthereumProvider,\\n  transactionHash: Data\\n): Machine {\\n  return {\\n    trace(): AsyncIterable<Machine.State> {\\n      return {\\n        async *[Symbol.asyncIterator]() {\\n          const structLogs = await requestStructLogs(\\n            `0x${transactionHash.asUint().toString(16)}`,\\n            provider\\n          );\\n\\n          for (const [index, structLog] of structLogs.entries()) {\\n            yield toMachineState(structLog, index);\\n          }\\n        }\\n      };\\n    }\\n  };\\n}\\n\\nasync function requestStructLogs(\\n  transactionHash: string,\\n  provider: EthereumProvider\\n) {\\n  const { structLogs } = await provider.request({\\n    method: \\"debug_traceTransaction\\",\\n    params: [transactionHash]\\n  });\\n\\n  return structLogs;\\n}\\n\\ntype StructLogs = Depromise<ReturnType<typeof requestStructLogs>>;\\ntype StructLog = Dearray<StructLogs>;\\ntype Depromise<P> = P extends Promise<infer T> ? T : P;\\ntype Dearray<A> = A extends Array<infer T> ? T : A;\\n\\nfunction toMachineState(step: StructLog, index: number): Machine.State {\\n  return {\\n    traceIndex: constantUint(index),\\n    programCounter: constantUint(step.pc),\\n    opcode: Promise.resolve(step.op),\\n\\n    stack: makeStack(step.stack),\\n\\n    memory: makeBytes(step.memory),\\n\\n    storage: makeWords(step.storage),\\n\\n    calldata: undefined as unknown as Machine.State.Bytes,\\n    returndata: undefined as unknown as Machine.State.Bytes,\\n    code: undefined as unknown as Machine.State.Bytes,\\n\\n    transient: undefined as unknown as Machine.State.Words,\\n  };\\n}\\n\\nfunction constantUint(value: number): Promise<bigint> {\\n  return Promise.resolve(Data.fromNumber(value).asUint());\\n}\\n\\nfunction makeStack(stack: StructLog[\\"stack\\"]): Machine.State.Stack {\\n  const length = stack.length;\\n\\n  return {\\n    length: constantUint(length),\\n\\n    async peek({\\n      depth,\\n      slice: {\\n        offset = 0n,\\n        length = 32n\\n      } = {}\\n    }) {\\n      const entry = stack.at(-Number(depth));\\n      const data = Data.fromHex(`0x${entry || \\"\\"}`);\\n\\n      const sliced = new Uint8Array(data).slice(\\n        Number(offset),\\n        Number(offset + length)\\n      );\\n\\n      return new Data(sliced);\\n    }\\n  };\\n}\\n\\nfunction makeBytes(words: StructLog[\\"memory\\"]): Machine.State.Bytes {\\n  const data = Data.fromHex(`0x${words.join(\\"\\")}`);\\n\\n  return {\\n    length: constantUint(data.length),\\n\\n    async read({ slice: { offset, length } }) {\\n      return new Data(data.slice(\\n        Number(offset),\\n        Number(offset + length)\\n      ));\\n    }\\n  }\\n}\\n\\nfunction makeWords(slots: StructLog[\\"storage\\"]): Machine.State.Words {\\n  return {\\n    async read({\\n      slot,\\n      slice: {\\n        offset = 0n,\\n        length = 32n\\n      } = {}\\n    }) {\\n      const rawHex = slots[\\n        slot.resizeTo(32).toHex().slice(2) as keyof typeof slots\\n      ];\\n\\n      const data = Data.fromHex(`0x${rawHex}`);\\n\\n      return new Data(data.slice(\\n        Number(offset),\\n        Number(offset + length)\\n      ));\\n    }\\n  };\\n}\\n"},{"filePath":"test/index.ts","text":"export {\\n  loadGanache,\\n  machineForProvider\\n} from \\"./ganache.js\\";\\n\\nexport {\\n  compileCreateBytecode,\\n  singleSourceCompilation,\\n  type CompileOptions\\n} from \\"./solc.js\\";\\n\\nexport { deployContract, } from \\"./deploy.js\\";\\n\\nexport { findExamplePointer } from \\"./examples.js\\";\\n\\nexport {\\n  observeTrace,\\n  type ObserveTraceOptions\\n} from \\"./observe.js\\";\\n"},{"filePath":"test/observe.ts","text":"import type { Pointer } from \\"@ethdebug/format\\";\\n\\nimport { type Machine, type Cursor, dereference } from \\"../src/index.js\\";\\n\\nimport { loadGanache, machineForProvider } from \\"./ganache.js\\";\\nimport { compileCreateBytecode, type CompileOptions } from \\"./solc.js\\";\\nimport { deployContract } from \\"./deploy.js\\";\\n\\nexport interface ObserveTraceOptions<V> {\\n  /**\\n   * Pointer that is used repeatedly over the course of a trace to view the\\n   * machine at each step.\\n   */\\n  pointer: Pointer;\\n\\n  /**\\n   * Pointer templates that may be referenced by the given pointer\\n   */\\n  templates?: Pointer.Templates;\\n\\n  /**\\n   * The necessary metadata and the Solidity source code for a contract whose\\n   * `constructor()` manages the lifecycle of the variable that the specified\\n   * `pointer` corresponds to\\n   */\\n  compileOptions: CompileOptions;\\n\\n  /**\\n   * A function that understands the structure of the specified `pointer` and\\n   * converts a particular `Cursor.View` for that pointer into a\\n   * JavaScript-native value of type `V`\\n   */\\n  observe({ regions, read }: Cursor.View, state: Machine.State): Promise<V>;\\n\\n  /**\\n   * Optional predicate that compares two `V` values for domain-specific\\n   * equality.\\n   *\\n   * If not specified, this defaults to `(a, b) => a === b`.\\n   */\\n  equals?(a: V, b: V): boolean;\\n\\n  /**\\n   * Optional asynchronous predicate that specifies whether or not a particular\\n   * step in the machine trace is a safe time to view the cursor for the\\n   * specified `pointer`.\\n   *\\n   * If not specified, this defaults to `() => Promise.resolve(true)` (i.e.,\\n   * every step gets observed).\\n   */\\n  shouldObserve?(state: Machine.State): Promise<boolean>;\\n}\\n\\n/**\\n * This function performs the steps necessary to setup and watch the code\\n * execution of the given contract\'s deployment.\\n *\\n * This function tracks the changes to the given pointer\'s dereferenced cursor\\n * by invoking the given `observe()` function to obtain a single primitive\\n * result of type `V`.\\n *\\n * Upon reaching the end of the trace for this code execution, this function\\n * then returns an ordered list of all the observed values, removing sequential\\n * duplicates (using the defined `equals` function if it exists or just `===`).\\n */\\nexport async function observeTrace<V>({\\n  pointer,\\n  templates = {},\\n  compileOptions,\\n  observe,\\n  equals = (a, b) => a === b,\\n  shouldObserve = () => Promise.resolve(true)\\n}: ObserveTraceOptions<V>): Promise<V[]> {\\n  const observedValues: V[] = [];\\n\\n  // initialize local development blockchain\\n  const provider = (await loadGanache()).provider({\\n    logging: {\\n      quiet: true\\n    }\\n  });\\n\\n  // perform compilation\\n  const bytecode = await compileCreateBytecode(compileOptions);\\n\\n  // deploy contract\\n  const { transactionHash } = await deployContract(bytecode, provider);\\n\\n  // prepare to inspect the EVM for that deployment transaction\\n  const machine = machineForProvider(provider, transactionHash);\\n\\n  let cursor; // delay initialization until first state of trace\\n  let lastObservedValue;\\n  for await (const state of machine.trace()) {\\n    if (!await shouldObserve(state)) {\\n      continue;\\n    }\\n\\n    if (!cursor) {\\n      cursor = await dereference(pointer, { state, templates });\\n    }\\n\\n    const { regions, read } = await cursor.view(state);\\n    const observedValue = await observe({ regions, read }, state);\\n\\n    if (\\n      typeof lastObservedValue === \\"undefined\\" ||\\n      !equals(observedValue, lastObservedValue)\\n    ) {\\n      observedValues.push(observedValue);\\n      lastObservedValue = observedValue;\\n    }\\n  }\\n\\n  return observedValues;\\n}\\n"},{"filePath":"test/solc.ts","text":"import { Data } from \\"../src/data.js\\";\\nimport type * as Solc from \\"solc\\";\\n\\nlet solc: typeof Solc | undefined;\\ntry {\\n  solc = (await import(\\"solc\\")).default;\\n} catch {}\\n\\n/**\\n * Organizes the sources being compiled by their path identifier, as well\\n * as includes information about which contract\'s bytecode is desired\\n */\\nexport interface CompileOptions {\\n  sources: {\\n    [path: string]: {\\n      content: string\\n    }\\n  };\\n\\n  target: {\\n    path: string;\\n    contractName: string;\\n  };\\n}\\n\\n/**\\n * Compile a collection of sources and return the create (deployment) bytecode\\n * for a particular target contract\\n */\\nexport async function compileCreateBytecode({\\n  sources,\\n  target\\n}: CompileOptions): Promise<Data> {\\n  if (!solc) {\\n    throw new Error(\\"Unable to load solc\\");\\n  }\\n\\n  const input = {\\n    language: \\"Solidity\\",\\n    sources,\\n    settings: {\\n      outputSelection: {\\n        \\"*\\": {\\n          \\"*\\": [\\"ir\\", \\"*\\"],\\n          \\"\\": [\\"*\\"]\\n        }\\n      },\\n      viaIR: true,\\n      optimizer: {\\n        enabled: true\\n      }\\n    }\\n  };\\n\\n  const output = JSON.parse(\\n    solc.compile(\\n      JSON.stringify(input),\\n    )\\n  );\\n\\n  const { errors = [] } = output;\\n  if (errors.length > 0) {\\n    throw new Error(`Compilation error: ${JSON.stringify(errors, undefined, 2)}`);\\n  }\\n\\n  const {\\n    evm: {\\n      bytecode: createBytecode\\n    }\\n  } = output.contracts[target.path][target.contractName];\\n\\n  return Data.fromHex(`0x${createBytecode.object}`);\\n}\\n\\n/**\\n * \\"Syntactic sugar\\"-like helper function to initialize CompileOptions for\\n * compiling only a single source file.\\n */\\nexport function singleSourceCompilation(options: {\\n  path: string;\\n  contractName: string;\\n  content: string;\\n}): CompileOptions {\\n  const { path, contractName, content: contentWithoutHeader } = options;\\n\\n  const spdxLicenseIdentifier = \\"// SPDX-License-Identifier: UNLICENSED\\";\\n  const pragma = \\"pragma solidity ^0.8.25;\\";\\n  const header = `${spdxLicenseIdentifier}\\\\n${pragma}\\\\n`;\\n\\n  return {\\n    sources: {\\n      [path]: {\\n        content: `${header}\\\\n${contentWithoutHeader}\\\\n`\\n      }\\n    },\\n\\n    target: {\\n      path,\\n      contractName\\n    }\\n  };\\n}\\n"},{"filePath":"../format/dist/src/describe.d.ts","text":"import type { JSONSchema as JSONSchemaTyped } from \\"json-schema-typed/draft-2020-12\\";\\nexport type JSONSchema = Exclude<JSONSchemaTyped, boolean>;\\nexport interface DescribeSchemaOptions<S extends SchemaReference = SchemaReference> {\\n    schema: S;\\n    pointer?: SchemaPointer;\\n}\\nexport interface SchemaInfo {\\n    id?: string;\\n    pointer?: SchemaPointer;\\n    yaml: string;\\n    schema: JSONSchema;\\n    rootSchema: JSONSchema;\\n}\\nexport declare function describeSchema({ schema, pointer }: DescribeSchemaOptions): SchemaInfo;\\ntype Impossible<K extends keyof any> = {\\n    [P in K]: never;\\n};\\ntype NoExtraProperties<T, U extends T = T> = U & Impossible<Exclude<keyof U, keyof T>>;\\nexport type SchemaPointer = `#${string}`;\\nexport type SchemaReference = SchemaId | SchemaById | SchemaByYaml | object;\\nexport type SchemaId = string;\\nexport type SchemaById = NoExtraProperties<{\\n    id: SchemaId;\\n}>;\\nexport type SchemaByYaml = NoExtraProperties<{\\n    yaml: string;\\n}>;\\nexport declare function referencesId(schema: SchemaReference): schema is SchemaId | SchemaById;\\nexport declare function referencesYaml(schema: SchemaReference): schema is SchemaByYaml;\\nexport {};\\n//# sourceMappingURL=describe.d.ts.map"},{"filePath":"../format/dist/src/index.d.ts","text":"export * from \\"./describe\\";\\nexport { schemas, schemaIds, type Schema } from \\"./schemas\\";\\nexport * from \\"./types\\";\\n//# sourceMappingURL=index.d.ts.map"},{"filePath":"src/dereference/cursor.ts","text":"import type { Machine } from \\"../machine.js\\";\\nimport type { Cursor } from \\"../cursor.js\\";\\nimport { read } from \\"../read.js\\";\\n\\nexport function createCursor(\\n  simpleCursor: (state: Machine.State) => AsyncIterable<Cursor.Region>\\n): Cursor {\\n  return {\\n    async view(state: Machine.State) {\\n      const list = [];\\n      for await (const region of simpleCursor(state)) {\\n        list.push(region);\\n      }\\n\\n      const named: { [name: string]: Cursor.Region[] } = {};\\n      const current: { [name: string]: Cursor.Region } = {};\\n\\n      const propertyFlags = {\\n        writable: false,\\n        enumerable: false,\\n        configurable: false\\n      } as const;\\n\\n      const regions: Cursor.Regions = Object.create(Array.prototype, {\\n        length: {\\n          value: list.length,\\n          ...propertyFlags\\n        }\\n      });\\n\\n      for (const [index, region] of list.entries()) {\\n        Object.defineProperty(regions, index, {\\n          value: region,\\n          ...propertyFlags,\\n          enumerable: true,\\n        });\\n\\n        if (typeof region.name === \\"string\\") {\\n          if (!(region.name in named)) {\\n            named[region.name] = [];\\n          }\\n          named[region.name].push(region);\\n          current[region.name] = region;\\n        }\\n      }\\n\\n      for (const [name, region] of Object.entries(current)) {\\n        Object.defineProperty(regions, name, {\\n          value: region,\\n          ...propertyFlags\\n        });\\n      }\\n\\n      Object.defineProperties(regions, {\\n        named: {\\n          value: (name: string) => named[name] || [],\\n          ...propertyFlags\\n        },\\n        lookup: {\\n          value: {\\n            ...current\\n          },\\n          ...propertyFlags\\n        }\\n      });\\n\\n      return {\\n        regions,\\n        async read(region: Cursor.Region) {\\n          return await read(region, { state });\\n        }\\n      };\\n    }\\n  };\\n}\\n"},{"filePath":"src/dereference/generate.ts","text":"import type { Pointer } from \\"@ethdebug/format\\";\\nimport type { Machine } from \\"../machine.js\\";\\nimport type { Cursor } from \\"../cursor.js\\";\\nimport type { Data } from \\"../data.js\\";\\n\\nimport { Memo } from \\"./memo.js\\";\\nimport { processPointer, type ProcessOptions } from \\"./process.js\\";\\n\\n/**\\n * Upfront information needed for generating the concrete Cursor.Regions\\n * for a particular pointer at runtime.\\n */\\nexport interface GenerateRegionsOptions {\\n  templates: Pointer.Templates;\\n  state: Machine.State;\\n  initialStackLength: bigint;\\n}\\n\\n/**\\n * Generator function that yields Cursor.Regions for a given Pointer.\\n *\\n * This function maintains an internal stack of memos to evaluate,\\n * initially populating this stack with a single entry for evaluating the\\n * given pointer.\\n */\\nexport async function* generateRegions(\\n  pointer: Pointer,\\n  generateRegionsOptions: GenerateRegionsOptions\\n): AsyncIterable<Cursor.Region> {\\n  const options = await initializeProcessOptions(generateRegionsOptions);\\n\\n  // extract records for mutation\\n  const {\\n    regions,\\n    variables\\n  } = options;\\n\\n  const stack: Memo[] = [Memo.dereferencePointer(pointer)];\\n  while (stack.length > 0) {\\n    const memo: Memo = stack.pop() as Memo;\\n\\n    let memos: Memo[] = [];\\n    switch (memo.kind) {\\n      case \\"dereference-pointer\\": {\\n        memos = yield* processPointer(memo.pointer, options);\\n        break;\\n      }\\n      case \\"save-regions\\": {\\n        Object.assign(regions, memo.regions);\\n        break;\\n      }\\n      case \\"save-variables\\": {\\n        Object.assign(variables, memo.variables);\\n        break;\\n      }\\n    }\\n\\n    // add new memos to the stack in reverse order\\n    for (let index = memos.length - 1; index >= 0; index--) {\\n      stack.push(memos[index]);\\n    }\\n  }\\n}\\n\\nasync function initializeProcessOptions({\\n  templates,\\n  state,\\n  initialStackLength\\n}: GenerateRegionsOptions): Promise<ProcessOptions> {\\n  const currentStackLength = await state.stack.length;\\n  const stackLengthChange = currentStackLength - initialStackLength;\\n\\n  const regions: Record<string, Cursor.Region> = {};\\n  const variables: Record<string, Data> = {};\\n\\n  return {\\n    templates,\\n    state,\\n    stackLengthChange,\\n    regions,\\n    variables\\n  };\\n}\\n"},{"filePath":"src/dereference/index.test.ts","text":"import { vitest, expect, describe, it, beforeEach } from \\"vitest\\";\\nimport { Pointer } from \\"@ethdebug/format\\";\\nimport { Machine } from \\"../machine.js\\";\\nimport { Data } from \\"../data.js\\";\\nimport { dereference } from \\"./index.js\\";\\n\\ndescribe(\\"dereference\\", () => {\\n  let state: Machine.State;\\n\\n  beforeEach(() => {\\n    state = {\\n      stack: {\\n        length: Promise.resolve(10n),\\n        peek: vitest.fn(async () => Data.fromBytes(new Uint8Array([0x11, 0x22, 0x33, 0x44]))),\\n      },\\n      memory: {\\n        read: vitest.fn(async () => Data.fromBytes(new Uint8Array([0x55, 0x66, 0x77, 0x88]))),\\n      },\\n      storage: {\\n        read: vitest.fn(async () => Data.fromBytes(new Uint8Array([0xaa, 0xbb, 0xcc, 0xdd]))),\\n      },\\n      calldata: {\\n        read: vitest.fn(async () => Data.fromBytes(new Uint8Array([0x11, 0x22, 0x33, 0x44]))),\\n      },\\n      returndata: {\\n        read: vitest.fn(async () => Data.fromBytes(new Uint8Array([0x55, 0x66, 0x77, 0x88]))),\\n      },\\n      transient: {\\n        read: vitest.fn(async () => Data.fromBytes(new Uint8Array([0xaa, 0xbb, 0xcc, 0xdd]))),\\n      },\\n      code: {\\n        read: vitest.fn(async () => Data.fromBytes(new Uint8Array([0x11, 0x22, 0x33, 0x44]))),\\n      },\\n    } as unknown as Machine.State;\\n  });\\n\\n  it(\\"works for a single region\\", async () => {\\n    const pointer: Pointer = {\\n      location: \\"memory\\",\\n      offset: {\\n        $sum: [0x40, 0x20]\\n      },\\n      length: 0x20\\n    };\\n\\n    const cursor = await dereference(pointer);\\n\\n    const { regions } = await cursor.view(state);\\n\\n    expect(regions).toHaveLength(1);\\n    expect(regions[0]).toEqual({\\n      location: \\"memory\\",\\n      offset: Data.fromNumber(0x60),\\n      length: Data.fromNumber(0x20)\\n    });\\n  });\\n\\n  it(\\"works for a group of regions\\", async () => {\\n    const pointer: Pointer = {\\n      group: [{\\n        name: \\"a\\",\\n        location: \\"memory\\",\\n        offset: {\\n          $sum: [0x40, 0x20]\\n        },\\n        length: 0x20\\n      }, {\\n        location: \\"memory\\",\\n        offset: {\\n          $sum: [\\n            { \\".offset\\": \\"a\\" },\\n            { \\".length\\": \\"a\\" }\\n          ]\\n        },\\n        length: { \\".length\\": \\"a\\" }\\n      }]\\n    };\\n\\n    const cursor = await dereference(pointer);\\n\\n    const { regions } = await cursor.view(state);\\n\\n    expect(regions).toHaveLength(2);\\n    expect(regions.lookup[\\"a\\"]).toEqual({\\n      name: \\"a\\",\\n      location: \\"memory\\",\\n      offset: Data.fromNumber(0x60),\\n      length: Data.fromNumber(0x20)\\n    });\\n    expect(regions[1]).toEqual({\\n      location: \\"memory\\",\\n      offset: Data.fromNumber(0x80),\\n      length: Data.fromNumber(0x20)\\n    });\\n  });\\n\\n  it(\\"works for a list of regions\\", async () => {\\n    const pointer: Pointer = {\\n      list: {\\n        count: 3,\\n        each: \\"i\\",\\n        is: {\\n          name: \\"item\\",\\n          location: \\"memory\\",\\n          offset: {\\n            $product: [\\"i\\", 32],\\n          },\\n          length: 32\\n        },\\n      },\\n    };\\n\\n    const cursor = await dereference(pointer);\\n\\n    const { regions } = await cursor.view(state);\\n\\n    const itemRegions = regions.named(\\"item\\");\\n    expect(itemRegions).toHaveLength(3);\\n\\n    for (const [index, region] of itemRegions.entries()) {\\n      expect(region).toEqual({\\n        name: \\"item\\",\\n        location: \\"memory\\",\\n        offset: Data.fromUint(\\n          Data.fromNumber(index).asUint() * 32n\\n        ).padUntilAtLeast(1),\\n        length: Data.fromNumber(32),\\n      })\\n    }\\n  });\\n\\n  it(\\"allows referencing previous fields by way of $this\\", async () => {\\n    const pointer: Pointer = {\\n      location: \\"memory\\",\\n      offset: 32,\\n      length: { \\".offset\\": \\"$this\\" }\\n    };\\n\\n    const cursor = await dereference(pointer);\\n\\n    const { regions } = await cursor.view(state);\\n\\n    expect(regions).toHaveLength(1);\\n    expect(regions[0]).toEqual({\\n      location: \\"memory\\",\\n      offset: Data.fromNumber(32),\\n      length: Data.fromNumber(32)\\n    });\\n  });\\n\\n  it(\\"allows referencing later fields by way of $this\\", async () => {\\n    const pointer: Pointer = {\\n      location: \\"memory\\",\\n      offset: { \\".length\\": \\"$this\\" },\\n      length: 32\\n    };\\n\\n    const cursor = await dereference(pointer);\\n\\n    const { regions } = await cursor.view(state);\\n\\n    expect(regions).toHaveLength(1);\\n    expect(regions[0]).toEqual({\\n      location: \\"memory\\",\\n      offset: Data.fromNumber(32),\\n      length: Data.fromNumber(32)\\n    });\\n  });\\n\\n  it(\\"allows referencing fields that reference other fields\\", async () => {\\n    const pointer: Pointer = {\\n      location: \\"storage\\",\\n      slot: { \\".offset\\": \\"$this\\" },\\n      offset: { \\".length\\": \\"$this\\" },\\n      length: 32\\n    };\\n\\n    const cursor = await dereference(pointer);\\n\\n    const { regions } = await cursor.view(state);\\n\\n    expect(regions).toHaveLength(1);\\n    expect(regions[0]).toEqual({\\n      location: \\"storage\\",\\n      slot: Data.fromNumber(32),\\n      offset: Data.fromNumber(32),\\n      length: Data.fromNumber(32)\\n    });\\n  });\\n\\n  it(\\"throws an error on circular reference\\", async () => {\\n    const pointer: Pointer = {\\n      location: \\"memory\\",\\n      offset: { \\".length\\": \\"$this\\" },\\n      length: { \\".offset\\": \\"$this\\" },\\n    };\\n\\n    const cursor = await dereference(pointer);\\n\\n    await expect(cursor.view(state)).rejects.toThrow(\\n      \\"Circular reference detected: $this.offset\\"\\n    );\\n  });\\n\\n  it(\\"works for conditionals\\", async () => {\\n    const pointer: Pointer = {\\n      if: {\\n        $difference: [5, 5]\\n      },\\n      then: {\\n        name: \\"a\\",\\n        location: \\"memory\\",\\n        offset: 0,\\n        length: 0\\n      },\\n      else: {\\n        name: \\"b\\",\\n        location: \\"memory\\",\\n        offset: 0,\\n        length: 0\\n      }\\n    };\\n\\n    const cursor = await dereference(pointer);\\n\\n    const { regions } = await cursor.view(state);\\n\\n    expect(regions).toHaveLength(1);\\n    expect(regions[0].name).toEqual(\\"b\\");\\n  });\\n\\n  it(\\"works for scopes\\", async () => {\\n    const pointer: Pointer = {\\n      define: {\\n        \\"example-offset\\": 0,\\n        \\"example-length\\": 32\\n      },\\n      in: {\\n        location: \\"memory\\",\\n        offset: \\"example-offset\\",\\n        length: \\"example-length\\"\\n      }\\n    };\\n\\n    const cursor = await dereference(pointer);\\n\\n    const { regions } = await cursor.view(state);\\n\\n    expect(regions).toHaveLength(1);\\n    expect(regions[0].offset).toEqual(Data.fromNumber(0));\\n    expect(regions[0].length).toEqual(Data.fromNumber(32));\\n  });\\n\\n  it(\\"works for templates\\", async () => {\\n    const templates: Pointer.Templates = {\\n      \\"memory-range\\": {\\n        expect: [\\"offset\\", \\"length\\"],\\n        for: {\\n          location: \\"memory\\",\\n          offset: \\"offset\\",\\n          length: \\"length\\"\\n        }\\n      }\\n    };\\n\\n    const pointer: Pointer = {\\n      define: {\\n        \\"offset\\": 0,\\n        \\"length\\": 32\\n      },\\n      in: {\\n        template: \\"memory-range\\"\\n      }\\n    };\\n\\n    const cursor = await dereference(pointer, { templates });\\n\\n    const { regions } = await cursor.view(state);\\n\\n    expect(regions).toHaveLength(1);\\n    expect(regions[0].offset).toEqual(Data.fromNumber(0));\\n    expect(regions[0].length).toEqual(Data.fromNumber(32));\\n  });\\n});\\n"},{"filePath":"src/dereference/index.ts","text":"import type { Pointer } from \\"@ethdebug/format\\";\\nimport type { Machine } from \\"../machine.js\\";\\nimport type { Cursor } from \\"../cursor.js\\";\\n\\nimport { generateRegions, type GenerateRegionsOptions } from \\"./generate.js\\";\\nimport { createCursor } from \\"./cursor.js\\";\\n\\nexport interface DereferenceOptions {\\n  /*\\n   * Initial machine state\\n   * Required for any pointers that reference the stack.\\n   */\\n  state?: Machine.State;\\n  templates?: Pointer.Templates\\n}\\n\\n/**\\n * Dereference an ethdebug/format/pointer document into a Cursor object,\\n * which allows inspecting machine state corresponding to the given pointer.\\n *\\n * Note that `options.state` is required if `pointer` contains any stack\\n * regions.\\n */\\nexport async function dereference(\\n  pointer: Pointer,\\n  dereferenceOptions: DereferenceOptions = {}\\n): Promise<Cursor> {\\n  const options = await initializeGenerateRegionsOptions(dereferenceOptions);\\n\\n  // use a closure to build a simple Cursor-like interface for accepting\\n  // a machine state and producing a collection of regions.\\n  const simpleCursor =\\n    (state: Machine.State): AsyncIterable<Cursor.Region> => ({\\n      async *[Symbol.asyncIterator]() {\\n        yield* generateRegions(pointer, { ...options, state });\\n      }\\n    });\\n\\n  return createCursor(simpleCursor);\\n}\\n\\n/**\\n * Convert DereferenceOptions into the specific pieces of information that\\n * `generateRegions()` will potentially need.\\n */\\nasync function initializeGenerateRegionsOptions({\\n  templates = {},\\n  state: initialState\\n}: DereferenceOptions): Promise<Omit<GenerateRegionsOptions, \\"state\\">> {\\n  const initialStackLength = initialState\\n    ? await initialState.stack.length\\n    : 0n;\\n\\n  return {\\n    templates,\\n    initialStackLength\\n  };\\n}\\n"},{"filePath":"src/dereference/memo.ts","text":"import type { Pointer } from \\"@ethdebug/format\\";\\nimport type { Cursor } from \\"../cursor.js\\";\\nimport type { Data } from \\"../data.js\\";\\n\\n/**\\n * A single state transition for processing on a stack\\n */\\nexport type Memo =\\n  | Memo.DereferencePointer\\n  | Memo.SaveRegions\\n  | Memo.SaveVariables;\\n\\nexport namespace Memo {\\n  /**\\n   * A request to dereference a pointer\\n   */\\n  export interface DereferencePointer {\\n    kind: \\"dereference-pointer\\";\\n    pointer: Pointer;\\n  }\\n\\n  /**\\n   * Initialize a DereferencePointer memo\\n   */\\n  export const dereferencePointer =\\n    (pointer: Pointer): DereferencePointer => ({\\n      kind: \\"dereference-pointer\\",\\n      pointer\\n    });\\n\\n  /**\\n   * A request to modify the stateful map of regions by name with a\\n   * particular set of new entries.\\n   *\\n   * This does not indicate that any change should be made to region names not\\n   * included in this memo.\\n   */\\n  export interface SaveRegions {\\n    kind: \\"save-regions\\";\\n    regions: Record<string, Cursor.Region>;\\n  }\\n\\n  /**\\n   * Initialize a SaveRegions memo\\n   */\\n  export const saveRegions =\\n    (regions: Record<string, Cursor.Region>): SaveRegions => ({\\n      kind: \\"save-regions\\",\\n      regions\\n    });\\n\\n  /**\\n   * A request to modify the stateful map of variable values with a\\n   * particular set of new entries.\\n   *\\n   * This does not indicate that any change should be made to variables not\\n   * included in this memo.\\n   */\\n  export interface SaveVariables {\\n    kind: \\"save-variables\\";\\n    variables: Record<string, Data>;\\n  }\\n\\n  /**\\n   * Initialize a SaveVariables memo\\n   */\\n  export const saveVariables =\\n    (variables: Record<string, Data>): SaveVariables => ({\\n      kind: \\"save-variables\\",\\n      variables\\n    });\\n}\\n"},{"filePath":"src/dereference/process.ts","text":"import { Pointer } from \\"@ethdebug/format\\";\\nimport type { Machine } from \\"../machine.js\\";\\nimport type { Cursor } from \\"../cursor.js\\";\\nimport { Data } from \\"../data.js\\";\\nimport { evaluate } from \\"../evaluate.js\\";\\n\\nimport { Memo } from \\"./memo.js\\";\\nimport { adjustStackLength, evaluateRegion } from \\"./region.js\\";\\n\\n\\n/**\\n * Contextual information for use within a pointer dereference process\\n */\\nexport interface ProcessOptions {\\n  templates: Pointer.Templates;\\n  state: Machine.State;\\n  stackLengthChange: bigint;\\n  regions: Record<string, Cursor.Region>;\\n  variables: Record<string, Data>;\\n}\\n\\n/**\\n * an generator that yields Cursor regions and returns a list of new memos\\n * to add to the stack\\n */\\nexport type Process = AsyncGenerator<Cursor.Region, Memo[]>;\\n\\n/**\\n * Process a pointer into a yielded list of concrete, evaluated Cursor.Regions\\n * and return a list of new memos to add to the stack for processing next\\n */\\nexport async function* processPointer(\\n  pointer: Pointer,\\n  options: ProcessOptions\\n): Process {\\n  if (Pointer.isRegion(pointer)) {\\n    const region = pointer;\\n\\n    return yield* processRegion(region, options);\\n  }\\n\\n  const collection = pointer;\\n\\n  if (Pointer.Collection.isGroup(collection)) {\\n    return yield* processGroup(collection, options);\\n  }\\n\\n  if (Pointer.Collection.isList(collection)) {\\n    return yield* processList(collection, options);\\n  }\\n\\n  if (Pointer.Collection.isConditional(collection)) {\\n    return yield* processConditional(collection, options);\\n  }\\n\\n  if (Pointer.Collection.isScope(collection)) {\\n    return yield* processScope(collection, options);\\n  }\\n\\n  if (Pointer.Collection.isReference(collection)) {\\n    return yield* processReference(collection, options);\\n  }\\n\\n  console.error(\\"%s\\", JSON.stringify(pointer, undefined, 2));\\n  throw new Error(\\"Unexpected unknown kind of pointer\\");\\n}\\n\\nasync function* processRegion(\\n  region: Pointer.Region,\\n  { stackLengthChange, ...options}: ProcessOptions\\n): Process {\\n  const evaluatedRegion = await evaluateRegion(\\n    adjustStackLength(region, stackLengthChange),\\n    options\\n  );\\n\\n  yield evaluatedRegion;\\n\\n  if (typeof region.name !== \\"undefined\\") {\\n    return [Memo.saveRegions({ [region.name]: evaluatedRegion })];\\n  }\\n\\n  return [];\\n}\\n\\nasync function* processGroup(\\n  collection: Pointer.Collection.Group,\\n  options: ProcessOptions\\n): Process {\\n  const { group } = collection;\\n  return group.map(Memo.dereferencePointer);\\n}\\n\\nasync function* processList(\\n  collection: Pointer.Collection.List,\\n  options: ProcessOptions\\n): Process {\\n  const { list } = collection;\\n  const { count: countExpression, each, is } = list;\\n\\n  const count = (await evaluate(countExpression, options)).asUint();\\n\\n  const memos: Memo[] = [];\\n  for (let index = 0n; index < count; index++) {\\n    memos.push(Memo.saveVariables({\\n      [each]: Data.fromUint(index)\\n    }));\\n\\n    memos.push(Memo.dereferencePointer(is));\\n  }\\n\\n  return memos;\\n}\\n\\nasync function* processConditional(\\n  collection: Pointer.Collection.Conditional,\\n  options: ProcessOptions\\n): Process {\\n  const { if: ifExpression, then: then_, else: else_ } = collection;\\n\\n  const if_ = (await evaluate(ifExpression, options)).asUint();\\n\\n  if (if_) {\\n    return [Memo.dereferencePointer(then_)];\\n  }\\n\\n  // otherwise, return the else clause if it exists (it is optional)\\n  return else_\\n    ? [Memo.dereferencePointer(else_)]\\n    : [];\\n}\\n\\nasync function* processScope(\\n  collection: Pointer.Collection.Scope,\\n  options: ProcessOptions\\n): Process {\\n  const { define: variableExpressions, in: in_ } = collection;\\n\\n  const allVariables = {\\n    ...options.variables\\n  };\\n  const newVariables: { [identifier: string]: Data } = {};\\n  for (const [identifier, expression] of Object.entries(variableExpressions)) {\\n    const data = await evaluate(expression, {\\n      ...options,\\n      variables: allVariables\\n    });\\n\\n    allVariables[identifier] = data;\\n    newVariables[identifier] = data;\\n  }\\n\\n  return [\\n    Memo.saveVariables(newVariables),\\n    Memo.dereferencePointer(in_)\\n  ];\\n}\\n\\nasync function* processReference(\\n  collection: Pointer.Collection.Reference,\\n  options: ProcessOptions\\n): Process {\\n  const { template: templateName } = collection;\\n\\n  const { templates, variables } = options;\\n\\n  const template = templates[templateName];\\n\\n  if (!template) {\\n    throw new Error(\\n      `Unknown pointer template named ${templateName}`\\n    );\\n  }\\n\\n  const {\\n    expect: expectedVariables,\\n    for: pointer\\n  } = template;\\n\\n  const definedVariables = new Set(Object.keys(variables));\\n  const missingVariables = expectedVariables\\n    .filter(identifier => !definedVariables.has(identifier));\\n\\n  if (missingVariables.length > 0) {\\n    throw new Error([\\n      `Invalid reference to template named ${templateName}; missing expected `,\\n      `variables with identifiers: ${missingVariables.join(\\", \\")}. `,\\n      `Please ensure these variables are defined prior to this reference.`\\n    ].join(\\"\\"));\\n  }\\n\\n  return [\\n    Memo.dereferencePointer(pointer)\\n  ];\\n}\\n"},{"filePath":"src/dereference/region.ts","text":"import { Pointer } from \\"@ethdebug/format\\";\\nimport type { Cursor } from \\"../cursor.js\\";\\nimport type { Data } from \\"../data.js\\";\\nimport { evaluate, type EvaluateOptions } from \\"../evaluate.js\\";\\n\\n/**\\n * Evaluate all Pointer.Expression-value properties on a given region\\n *\\n * Due to the availability of `$this` as a builtin allowable by the schema,\\n * this function evaluates each property as part of a queue. If a property\'s\\n * expression fails to evaluate due to a missing reference, the property is\\n * added to the end of the queue.\\n *\\n * Circular dependencies are detected na\xefvely by counting evaluation attempts\\n * for each property, since the maximum length of a chain of $this references\\n * within a single region is one less than the number of properties that\\n * require evaluation). Exceeding this many attempts indicates circularity.\\n */\\nexport async function evaluateRegion<R extends Pointer.Region>(\\n  region: R,\\n  options: EvaluateOptions\\n): Promise<Cursor.Region<R>> {\\n  const evaluatedProperties: {\\n    [K in keyof R]?: Data\\n  } = {};\\n  const propertyAttempts: {\\n    [K in keyof R]?: number\\n  } = {};\\n\\n  const partialRegion: Cursor.Region<R> = new Proxy(\\n    { ...region } as Cursor.Region<R>,\\n    {\\n      get(target, property) {\\n        if (property in evaluatedProperties) {\\n          return evaluatedProperties[property as keyof R];\\n        }\\n        throw new Error(`Property not evaluated yet: $this.${property.toString()}`)\\n      },\\n    }\\n  );\\n\\n  const propertiesRequiringEvaluation = [\\"slot\\", \\"offset\\", \\"length\\"] as const;\\n\\n  const expressionQueue: [keyof R, Pointer.Expression][] =\\n    propertiesRequiringEvaluation\\n      .filter(property => property in region)\\n      .map(\\n        property => [property, region[property as keyof R]]\\n      ) as [keyof R, Pointer.Expression][];\\n\\n  while (expressionQueue.length > 0) {\\n    const [property, expression] = expressionQueue.shift()!;\\n\\n    try {\\n      const data = await evaluate(expression, {\\n        ...options,\\n        regions: {\\n          ...options.regions,\\n          $this: partialRegion,\\n        },\\n      });\\n\\n      evaluatedProperties[property as keyof R] = data;\\n    } catch (error) {\\n      if (\\n        error instanceof Error &&\\n        error.message.startsWith(\\"Property not evaluated yet: $this.\\")\\n      ) {\\n        const attempts = propertyAttempts[property] || 0;\\n        // fields may reference each other, but the chain of references\\n        // should not exceed the number of fields minus 1\\n        if (attempts > propertiesRequiringEvaluation.length - 1) {\\n          throw new Error(`Circular reference detected: $this.${property.toString()}`);\\n        }\\n\\n        propertyAttempts[property] = attempts + 1;\\n        expressionQueue.push([property, expression]);\\n      } else {\\n        throw error;\\n      }\\n    }\\n  }\\n\\n  return {\\n    ...region,\\n    ...evaluatedProperties,\\n  } as Cursor.Region<R>;\\n}\\n\\n/**\\n * Detect a stack region and modify its `slot` expression to include the\\n * appropriate sum or difference based on the machine stack length change\\n * since the Cursor was originally created\\n */\\nexport function adjustStackLength<R extends Pointer.Region>(\\n  region: R,\\n  stackLengthChange: bigint\\n): R {\\n  if (Pointer.Region.isStack(region)) {\\n    const slot: Pointer.Expression = stackLengthChange === 0n\\n      ? region.slot\\n      : stackLengthChange > 0n\\n        ? { $sum: [region.slot, `0x${stackLengthChange.toString(16)}`] }\\n        : { $difference: [region.slot, `0x${-stackLengthChange.toString(16)}`] };\\n\\n    return {\\n      ...region,\\n      slot\\n    };\\n  }\\n\\n  return region;\\n}\\n"},{"filePath":"../format/dist/src/schemas/index.d.ts","text":"export type { Schema } from \\"./yamls\\";\\nexport declare const schemaIds: string[];\\nexport declare const schemas: {\\n    [x: string]: {\\n        $anchor?: string;\\n        $comment?: string;\\n        $defs?: Record<string, import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>>;\\n        $dynamicAnchor?: string;\\n        $dynamicRef?: string;\\n        $id?: string;\\n        $ref?: string;\\n        $schema?: string;\\n        $vocabulary?: Record<string, string>;\\n        additionalItems?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        additionalProperties?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        allOf?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>[] | readonly import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>[];\\n        anyOf?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>[] | readonly import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>[];\\n        const?: any;\\n        contains?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        contentEncoding?: \\"7bit\\" | \\"8bit\\" | \\"base64\\" | \\"binary\\" | \\"ietf-token\\" | \\"quoted-printable\\" | \\"x-token\\";\\n        contentMediaType?: string;\\n        contentSchema?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        default?: any;\\n        definitions?: Record<string, import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>>;\\n        dependencies?: Record<string, import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue> | (string[] | readonly string[])>;\\n        dependentRequired?: Record<string, string[] | readonly string[]>;\\n        dependentSchemas?: Record<string, import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>>;\\n        deprecated?: boolean;\\n        description?: string;\\n        else?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        enum?: any[] | readonly any[];\\n        examples?: any[] | readonly any[];\\n        exclusiveMaximum?: number;\\n        exclusiveMinimum?: number;\\n        format?: string;\\n        if?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        items?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        maxContains?: number;\\n        maximum?: number;\\n        maxItems?: number;\\n        maxLength?: number;\\n        maxProperties?: number;\\n        minContains?: number;\\n        minimum?: number;\\n        minItems?: number;\\n        minLength?: number;\\n        minProperties?: number;\\n        multipleOf?: number;\\n        not?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        oneOf?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>[] | readonly import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>[];\\n        pattern?: string;\\n        patternProperties?: Record<string, import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>>;\\n        prefixItems?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue> | (import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>[] | readonly import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>[]);\\n        properties?: Record<string, import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>>;\\n        propertyNames?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        readOnly?: boolean;\\n        required?: string[] | readonly string[];\\n        then?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        title?: string;\\n        type?: import(\\"json-schema-typed\\").JSONSchema.TypeValue;\\n        unevaluatedItems?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        unevaluatedProperties?: import(\\"json-schema-typed\\").JSONSchema<any, import(\\"json-schema-typed\\").JSONSchema.TypeValue>;\\n        uniqueItems?: boolean;\\n        writeOnly?: boolean;\\n    };\\n};\\n//# sourceMappingURL=index.d.ts.map"},{"filePath":"../format/dist/src/schemas/yamls.d.ts","text":"export type SchemaYamlsById = {\\n    [id: string]: string;\\n};\\nexport declare const schemaYamls: SchemaYamlsById;\\ndeclare const rawSchemas: {\\n    readonly \\"schema:ethdebug/format/data/hex\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/data/hex\\";\\n        readonly title: \\"ethdebug/format/data/hex\\";\\n        readonly description: \\"A `0x`-prefixed hexadecimal string. This value **must** contain at least one\\\\nhexadecimal character (`0x` by itself is not allowed).\\\\n\\";\\n        readonly type: \\"string\\";\\n        readonly pattern: \\"^0x[0-9a-fA-F]{1,}$\\";\\n        readonly examples: readonly [\\"0x0000\\", \\"0x1\\"];\\n    };\\n    readonly \\"schema:ethdebug/format/data/unsigned\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/data/unsigned\\";\\n        readonly title: \\"ethdebug/format/data/unsigned\\";\\n        readonly description: \\"A non-negative integer encoded as a JSON number.\\\\n\\";\\n        readonly type: \\"integer\\";\\n        readonly minimum: 0;\\n        readonly examples: readonly [0, 100];\\n    };\\n    readonly \\"schema:ethdebug/format/data/value\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/data/value\\";\\n        readonly title: \\"ethdebug/format/data/value\\";\\n        readonly description: \\"A non-negative integer value, expressed either as a native JSON number or as\\\\na `0x`-prefixed hexadecimal string.\\\\n\\";\\n        readonly oneOf: readonly [{\\n            readonly description: \\"A non-negative integer literal\\";\\n            readonly $ref: \\"schema:ethdebug/format/data/unsigned\\";\\n        }, {\\n            readonly description: \\"A `0x`-prefixed hexadecimal string representing literal bytes or a number\\\\ncommonly displayed in base 16 (e.g. bytecode instruction offsets).\\\\n\\";\\n            readonly $ref: \\"schema:ethdebug/format/data/hex\\";\\n        }];\\n        readonly examples: readonly [\\"0x0000\\", 2];\\n    };\\n    readonly \\"schema:ethdebug/format/info/resources\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/info/resources\\";\\n        readonly title: \\"ethdebug/format/info/resources\\";\\n        readonly description: \\"An object containing lookup tables for finding debugging resources by name.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly types: {\\n                readonly title: \\"Types by name\\";\\n                readonly description: \\"A collection of types by name identifier.\\\\n\\";\\n                readonly type: \\"object\\";\\n                readonly additionalProperties: {\\n                    readonly $ref: \\"schema:ethdebug/format/type\\";\\n                };\\n            };\\n            readonly pointers: {\\n                readonly title: \\"Pointer templates by name\\";\\n                readonly description: \\"A collection of pointer templates by name identifier.\\\\n\\";\\n                readonly type: \\"object\\";\\n                readonly additionalProperties: {\\n                    readonly $ref: \\"schema:ethdebug/format/pointer/template\\";\\n                };\\n            };\\n            readonly compilation: {\\n                readonly $ref: \\"schema:ethdebug/format/materials/compilation\\";\\n            };\\n        };\\n        readonly required: readonly [\\"types\\", \\"pointers\\"];\\n        readonly examples: readonly [{\\n            readonly types: {\\n                readonly struct__Coordinate: {\\n                    readonly kind: \\"struct\\";\\n                    readonly contains: readonly [{\\n                        readonly name: \\"x\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 128;\\n                        };\\n                    }, {\\n                        readonly name: \\"y\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 128;\\n                        };\\n                    }];\\n                    readonly definition: {\\n                        readonly name: \\"Coordinate\\";\\n                        readonly location: {\\n                            readonly source: {\\n                                readonly id: 5;\\n                            };\\n                            readonly range: {\\n                                readonly offset: 18;\\n                                readonly length: 55;\\n                            };\\n                        };\\n                    };\\n                };\\n            };\\n            readonly pointers: {\\n                readonly struct__Coordinate__storage: {\\n                    readonly expect: readonly [\\"contract_variable_slot__struct__Coordinate__storage\\"];\\n                    readonly for: {\\n                        readonly group: readonly [{\\n                            readonly name: \\"member__x__struct__Coordinate__storage\\";\\n                            readonly location: \\"storage\\";\\n                            readonly slot: \\"contract_variable_slot__struct__Coordinate__storage\\";\\n                            readonly offset: 0;\\n                            readonly length: 128;\\n                        }, {\\n                            readonly name: \\"member__y__struct__Coordinate__storage\\";\\n                            readonly location: \\"storage\\";\\n                            readonly slot: \\"contract_variable_slot__struct__Coordinate__storage\\";\\n                            readonly offset: {\\n                                readonly $sum: readonly [{\\n                                    readonly \\".offset\\": \\"member__x__struct__Coordinate__storage\\";\\n                                }, {\\n                                    readonly \\".length\\": \\"member__x__struct__Coordinate__storage\\";\\n                                }];\\n                            };\\n                            readonly length: 128;\\n                        }];\\n                    };\\n                };\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/info\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/info\\";\\n        readonly title: \\"ethdebug/format/info\\";\\n        readonly description: \\"Debugging information about a single compilation\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly $ref: \\"schema:ethdebug/format/info/resources\\";\\n        readonly properties: {\\n            readonly programs: {\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"schema:ethdebug/format/program\\";\\n                };\\n                readonly additionalItems: false;\\n            };\\n            readonly compilation: {\\n                readonly $ref: \\"schema:ethdebug/format/materials/compilation\\";\\n            };\\n        };\\n        readonly required: readonly [\\"compilation\\", \\"programs\\"];\\n        readonly examples: readonly [{\\n            readonly compilation: {\\n                readonly id: \\"__301f3b6d85831638\\";\\n                readonly compiler: {\\n                    readonly name: \\"egc\\";\\n                    readonly version: \\"0.2.3+commit.8b37fa7a\\";\\n                };\\n                readonly settings: {\\n                    readonly turbo: true;\\n                };\\n                readonly sources: readonly [{\\n                    readonly id: 1;\\n                    readonly path: \\"Escrow.eg\\";\\n                    readonly language: \\"examplelang\\";\\n                    readonly contents: \\"import { Asset } from std::asset::fungible;\\\\n\\\\ntype State = !slots[\\\\n  ready: bool,\\\\n  complete: bool,\\\\n\\\\n  beneficiary: address,\\\\n\\\\n  asset: Asset,\\\\n  amount: uint256,\\\\n\\\\n  canRemit: () -> bool,\\\\n]\\\\n\\\\n@create\\\\nfunc setup(\\\\n  beneficiary: address,\\\\n  asset: Asset,\\\\n  canRemit: () -> bool,\\\\n) -> State:\\\\n  return {\\\\n    ready = False,\\\\n    complete = False,\\\\n    beneficiary,\\\\n    asset,\\\\n    amount = 0,\\\\n    canRemit,\\\\n  }\\\\n\\\\n@abi\\\\n@state(self: State)\\\\n@account(self)\\\\nfunc deposit(depositor: address, amount: uint256):\\\\n  require(!self.ready)\\\\n  require(!self.complete)\\\\n\\\\n  # expects an existing allowance (also known as \\\\\\"approval\\\\\\")\\\\n  self.asset.transferFrom(depositor, self, amount)\\\\n\\\\n  self.amount = amount\\\\n  self.ready = True\\\\n\\\\n@abi\\\\n@state(self: State)\\\\nfunc remit():\\\\n  require(self.ready)\\\\n  require(!self.complete)\\\\n\\\\n  require(self.canRemit())\\\\n\\\\n  asset.transfer(self.beneficiary, self.amount)\\\\n\\\\n  self.complete = True\\\\n\\";\\n                }];\\n            };\\n            readonly types: {\\n                readonly State: {\\n                    readonly kind: \\"struct\\";\\n                    readonly contains: readonly [{\\n                        readonly name: \\"ready\\";\\n                        readonly type: {\\n                            readonly kind: \\"bool\\";\\n                        };\\n                    }, {\\n                        readonly name: \\"complete\\";\\n                        readonly type: {\\n                            readonly kind: \\"bool\\";\\n                        };\\n                    }, {\\n                        readonly name: \\"beneficiary\\";\\n                        readonly type: {\\n                            readonly kind: \\"address\\";\\n                        };\\n                    }, {\\n                        readonly name: \\"asset\\";\\n                        readonly type: {\\n                            readonly kind: \\"struct\\";\\n                            readonly contains: readonly [{\\n                                readonly name: \\"address\\";\\n                                readonly type: {\\n                                    readonly kind: \\"address\\";\\n                                };\\n                            }];\\n                        };\\n                    }, {\\n                        readonly name: \\"amount\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                    }, {\\n                        readonly name: \\"canRemit\\";\\n                        readonly type: {\\n                            readonly kind: \\"function\\";\\n                            readonly internal: true;\\n                            readonly contains: {\\n                                readonly parameters: {\\n                                    readonly type: {\\n                                        readonly kind: \\"tuple\\";\\n                                        readonly contains: readonly [];\\n                                    };\\n                                };\\n                                readonly returns: {\\n                                    readonly type: {\\n                                        readonly kind: \\"bool\\";\\n                                    };\\n                                };\\n                            };\\n                        };\\n                    }];\\n                };\\n            };\\n            readonly pointers: {\\n                readonly State_storage: {\\n                    readonly expect: readonly [\\"slot\\"];\\n                    readonly for: {\\n                        readonly group: readonly [{\\n                            readonly name: \\"ready\\";\\n                            readonly location: \\"storage\\";\\n                            readonly slot: \\"slot\\";\\n                            readonly offset: 0;\\n                            readonly length: 1;\\n                        }, {\\n                            readonly name: \\"complete\\";\\n                            readonly location: \\"storage\\";\\n                            readonly slot: \\"slot\\";\\n                            readonly offset: 1;\\n                            readonly length: 1;\\n                        }, {\\n                            readonly name: \\"beneficiary\\";\\n                            readonly location: \\"storage\\";\\n                            readonly slot: {\\n                                readonly $sum: readonly [\\"slot\\", 1];\\n                            };\\n                        }, {\\n                            readonly name: \\"asset\\";\\n                            readonly location: \\"storage\\";\\n                            readonly slot: {\\n                                readonly $sum: readonly [\\"slot\\", 2];\\n                            };\\n                        }, {\\n                            readonly name: \\"amount\\";\\n                            readonly location: \\"storage\\";\\n                            readonly slot: {\\n                                readonly $sum: readonly [\\"slot\\", 3];\\n                            };\\n                        }, {\\n                            readonly name: \\"canRemit\\";\\n                            readonly location: \\"storage\\";\\n                            readonly slot: {\\n                                readonly $sum: readonly [\\"slot\\", 4];\\n                            };\\n                        }];\\n                    };\\n                };\\n            };\\n            readonly programs: readonly [{\\n                readonly contract: {\\n                    readonly name: \\"Escrow\\";\\n                    readonly definition: {\\n                        readonly source: {\\n                            readonly id: 1;\\n                        };\\n                        readonly range: {\\n                            readonly offset: 0;\\n                            readonly length: 891;\\n                        };\\n                    };\\n                };\\n                readonly environment: \\"create\\";\\n                readonly instructions: readonly [{\\n                    readonly offset: 0;\\n                    readonly operation: {\\n                        readonly mnemonic: \\"PUSH1\\";\\n                        readonly arguments: readonly [\\"0x80\\"];\\n                    };\\n                    readonly context: {\\n                        readonly code: {\\n                            readonly source: {\\n                                readonly id: 1;\\n                            };\\n                            readonly range: {\\n                                readonly offset: 891;\\n                                readonly length: 20;\\n                            };\\n                        };\\n                    };\\n                }];\\n            }];\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/materials/compilation\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/materials/compilation\\";\\n        readonly title: \\"ethdebug/format/materials/compilation\\";\\n        readonly description: \\"An object representing a single invocation of a compiler.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly id: {\\n                readonly description: \\"Compilation ID\\\\n\\\\nThis value **should** be globally-unique and generated only from the\\\\ncompiler inputs (settings, sources, etc.); the same compiler inputs/\\\\nsettings **should** produce the same identifier.\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/materials/id\\";\\n            };\\n            readonly compiler: {\\n                readonly type: \\"object\\";\\n                readonly title: \\"Compiler name and version\\";\\n                readonly properties: {\\n                    readonly name: {\\n                        readonly type: \\"string\\";\\n                        readonly description: \\"Compiler name\\";\\n                    };\\n                    readonly version: {\\n                        readonly type: \\"string\\";\\n                        readonly description: \\"Compiler version.\\\\n\\\\nThis value **should** be specified using the most detailed version\\\\nrepresentation available, i.e., including source control hash and\\\\ncompiler build information whenever possible.\\\\n\\";\\n                    };\\n                };\\n                readonly required: readonly [\\"name\\", \\"version\\"];\\n                readonly examples: readonly [{\\n                    readonly name: \\"lllc\\";\\n                    readonly version: \\"0.4.12-develop.2017.6.27+commit.b83f77e0.Linux.g++\\";\\n                }];\\n            };\\n            readonly settings: {\\n                readonly description: \\"Compiler settings in a format native to the compiler.\\\\n\\\\nFor compilers whose settings includes full source representations, this\\\\nfield **should** be specified in such a way that avoids large data\\\\nredundancies (e.g. if compiler settings contain full source\\\\nrepresentations, then this field would significantly duplicate the\\\\ninformation represented by the `sources` field in this object).\\\\n\\\\nIn situations where settings information duplicates information\\\\nrepresented elsewhere in **ethdebug/format**, compilers **may** adopt\\\\nany reasonable strategy, e.g.:\\\\n  - omit duplications partially (leaving the rest of the settings\\\\n    intact)\\\\n  - omit this field entirely\\\\n  - specify this field as a hash of the full settings\\\\n    representation (with the expectation that users of this format will\\\\n    have access to the full representation by some other means)\\\\n\\";\\n                readonly allOf: readonly [true];\\n            };\\n            readonly sources: {\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"schema:ethdebug/format/materials/source\\";\\n                };\\n            };\\n        };\\n        readonly required: readonly [\\"id\\", \\"compiler\\", \\"sources\\"];\\n        readonly examples: readonly [{\\n            readonly id: \\"foo\\";\\n            readonly compiler: {\\n                readonly name: \\"lllc\\";\\n                readonly version: \\"0.4.12-develop.2017.6.27+commit.b83f77e0.Linux.g++\\";\\n            };\\n            readonly sources: readonly [{\\n                readonly id: 0;\\n                readonly path: \\"stdin\\";\\n                readonly contents: \\"(add 1 (mul 2 (add 3 4)))\\\\n\\";\\n                readonly language: \\"LLL\\";\\n            }];\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/materials/id\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/materials/id\\";\\n        readonly title: \\"ethdebug/format/materials/id\\";\\n        readonly description: \\"An opaque external ID (likely generated by compiler)\\";\\n        readonly type: readonly [\\"number\\", \\"string\\"];\\n        readonly examples: readonly [5, \\"five\\"];\\n    };\\n    readonly \\"schema:ethdebug/format/materials/reference\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/materials/reference\\";\\n        readonly title: \\"ethdebug/format/materials/reference\\";\\n        readonly description: \\"A reference to an external resource by ID\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly id: {\\n                readonly $ref: \\"schema:ethdebug/format/materials/id\\";\\n            };\\n            readonly type: {\\n                readonly enum: readonly [\\"compilation\\", \\"source\\"];\\n            };\\n        };\\n        readonly required: readonly [\\"id\\"];\\n        readonly unevaluatedProperties: false;\\n        readonly examples: readonly [{\\n            readonly id: 1;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/materials/source-range\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/materials/source-range\\";\\n        readonly title: \\"ethdebug/format/materials/source-range\\";\\n        readonly description: \\"A range of bytes in a particular source.\\\\n\\\\nNote that this refers to the bytes range in the original character encoding\\\\nfor the source, not the character encoding used for strings in this JSON\\\\nformat (UTF-8). For compilers that support input sources in encodings other\\\\nthan this format\'s transmission encoding, compilers **must** address source\\\\nranges in this original encoding, and debuggers **must** re-encode source\\\\ncontents obtained from this format _before_ performing any range addressing.\\\\n\\\\n(Compilers that only accept UTF-8 or ASCII are naturally exempt from this\\\\nconcern.)\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly compilation: {\\n                readonly title: \\"Compilation reference by ID\\";\\n                readonly $ref: \\"schema:ethdebug/format/materials/reference\\";\\n            };\\n            readonly source: {\\n                readonly title: \\"Source reference by ID\\";\\n                readonly $ref: \\"schema:ethdebug/format/materials/reference\\";\\n            };\\n            readonly range: {\\n                readonly title: \\"Bytes range within source contents\\";\\n                readonly description: \\"Ranges that span the entire source contents **may** omit this field\\\\nas a shorthand. This field is otherwise **required**.\\\\n\\";\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly offset: {\\n                        readonly description: \\"Byte offset at beginning of range.\\\\n\\";\\n                        readonly $ref: \\"schema:ethdebug/format/data/value\\";\\n                    };\\n                    readonly length: {\\n                        readonly description: \\"Number of bytes contained in range\\";\\n                        readonly $ref: \\"schema:ethdebug/format/data/value\\";\\n                    };\\n                };\\n                readonly unevaluatedProperties: false;\\n                readonly required: readonly [\\"offset\\", \\"length\\"];\\n            };\\n        };\\n        readonly unevaluatedProperties: false;\\n        readonly required: readonly [\\"source\\"];\\n        readonly examples: readonly [{\\n            readonly source: {\\n                readonly id: 5;\\n            };\\n            readonly range: {\\n                readonly offset: 20;\\n                readonly length: 100;\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/materials/source\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/materials/source\\";\\n        readonly title: \\"ethdebug/format/materials/source\\";\\n        readonly description: \\"An object representing one unit of compiler input, the raw text contents and\\\\nidentifying metadata (such as file path) that were given to the compiler as\\\\npart of a compilation.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly id: {\\n                readonly description: \\"Source identifier. This field **must** be unique for all sources\\\\nwithin a single compiler invocation (compilation).\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/materials/id\\";\\n            };\\n            readonly path: {\\n                readonly type: \\"string\\";\\n                readonly description: \\"Hierarchical file-system-like path to this source. This value may\\\\nbe an absolute path, a path relative to some root directory, a path\\\\nto some resource within a package, etc.\\\\n\\\\nThis value does not need to correspond to any file on disk (either\\\\nphysical or virtual), and might instead refer to a path identifier\\\\nfor a source that was generated by a compiler or other development tool.\\\\n\\\\nThis format makes no specific restrictions on how paths should be\\\\nspecified (e.g., no restriction on path separators, etc.), other than\\\\nthat values for this field should match what users observe elsewhere for\\\\nthe inputs/outputs of this particular compiler invocation.\\\\n\\\\nIf no path information is available for a particular source, e.g. if the\\\\nsource was provided to the compiler via shell standard input, this field\\\\nshould indicate that somehow (e.g., specifying `\\\\\\"path\\\\\\": \\\\\\"stdin\\\\\\"` or\\\\nsimilar).\\\\n\\\\nThis field\'s value **should** be unique across all sources within the\\\\nsame compilation.\\\\n\\";\\n            };\\n            readonly contents: {\\n                readonly description: \\"The full contents of the source, possibly re-encoded as UTF-8 to\\\\nmatch parent JSON encoding.\\\\n\\\\nIn cases where input source used a different encoding, this object\\\\n**must** also specify an `encoding` property to indicate the\\\\nencoding originally used. Where relevant, debuggers **must** also\\\\nconvert these `contents` back to the specified original encoding so\\\\nas to match code author expectations.\\\\n\\";\\n                readonly type: \\"string\\";\\n            };\\n            readonly encoding: {\\n                readonly description: \\"Character encoding of original source `contents`. This property\\\\nis **required** if this encoding does not match the JSON transmission\\\\nencoding (UTF-8), since the value of the `contents` property will\\\\nrepresent the text of the source of this JSON encoding.\\\\n\\\\nThis property **must not** appear in objects that do not specify\\\\na `contents` property.\\\\n\\";\\n                readonly type: \\"string\\";\\n            };\\n            readonly language: {\\n                readonly description: \\"The high-level language that the source contents are written in.\\\\n\\";\\n                readonly type: \\"string\\";\\n            };\\n        };\\n        readonly required: readonly [\\"id\\", \\"path\\", \\"contents\\", \\"language\\"];\\n        readonly examples: readonly [{\\n            readonly id: 5;\\n            readonly path: \\"./contracts/SimpleStorage.sol\\";\\n            readonly contents: \\"// SPDX-License-Identifier: GPL-3.0\\\\npragma solidity >=0.4.16 <0.9.0;\\\\n\\\\ncontract SimpleStorage {\\\\n    uint storedData;\\\\n\\\\n    function set(uint x) public {\\\\n        storedData = x;\\\\n    }\\\\n\\\\n    function get() public view returns (uint) {\\\\n        return storedData;\\\\n    }\\\\n}\\\\n\\";\\n            readonly language: \\"Solidity\\";\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/collection/conditional\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/collection/conditional\\";\\n        readonly title: \\"ethdebug/format/pointer/collection/conditional\\";\\n        readonly description: \\"A pointer defined conditionally based on the non-zero-ness of some expression\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly if: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer\\";\\n            };\\n            readonly else: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer\\";\\n            };\\n        };\\n        readonly required: readonly [\\"if\\", \\"then\\"];\\n        readonly additionalProperties: false;\\n        readonly examples: readonly [{\\n            readonly if: 0;\\n            readonly then: {\\n                readonly location: \\"memory\\";\\n                readonly offset: 0;\\n                readonly length: 1;\\n            };\\n            readonly else: {\\n                readonly location: \\"memory\\";\\n                readonly offset: 1;\\n                readonly length: 1;\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/collection/group\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/collection/group\\";\\n        readonly title: \\"ethdebug/format/pointer/collection/group\\";\\n        readonly description: \\"A composite collection of pointers\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly group: {\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"schema:ethdebug/format/pointer\\";\\n                };\\n                readonly minItems: 1;\\n            };\\n        };\\n        readonly required: readonly [\\"group\\"];\\n        readonly additionalProperties: false;\\n        readonly examples: readonly [{\\n            readonly group: readonly [{\\n                readonly name: \\"data-pointer\\";\\n                readonly location: \\"stack\\";\\n                readonly slot: 0;\\n            }, {\\n                readonly location: \\"memory\\";\\n                readonly offset: {\\n                    readonly $read: \\"data-pointer\\";\\n                };\\n                readonly length: 32;\\n            }];\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/collection/list\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/collection/list\\";\\n        readonly title: \\"ethdebug/format/pointer/collection/list\\";\\n        readonly description: \\"An ordered list of pointers, indexed starting at zero.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly list: {\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly count: {\\n                        readonly description: \\"The size of the list that this collection represents.\\\\n\\";\\n                        readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n                    };\\n                    readonly each: {\\n                        readonly description: \\"An identifier name whose value as an expression resolves to the index\\\\nin the list\\\\n\\";\\n                        readonly $ref: \\"schema:ethdebug/format/pointer/identifier\\";\\n                    };\\n                    readonly is: {\\n                        readonly description: \\"The dynamically-generated pointer repeated as a list\\\\n\\";\\n                        readonly $ref: \\"schema:ethdebug/format/pointer\\";\\n                    };\\n                };\\n                readonly required: readonly [\\"count\\", \\"each\\", \\"is\\"];\\n            };\\n        };\\n        readonly required: readonly [\\"list\\"];\\n        readonly additionalProperties: false;\\n        readonly examples: readonly [{\\n            readonly list: {\\n                readonly count: 5;\\n                readonly each: \\"index\\";\\n                readonly is: {\\n                    readonly location: \\"memory\\";\\n                    readonly offset: {\\n                        readonly $read: \\"index\\";\\n                    };\\n                    readonly length: 1;\\n                };\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/collection/reference\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/collection/reference\\";\\n        readonly title: \\"ethdebug/format/pointer/collection/reference\\";\\n        readonly description: \\"A pointer by named reference to a pointer template (defined elsewhere).\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly template: {\\n                readonly title: \\"Template identifier\\";\\n                readonly $ref: \\"schema:ethdebug/format/pointer/identifier\\";\\n            };\\n        };\\n        readonly required: readonly [\\"template\\"];\\n        readonly additionalProperties: false;\\n        readonly examples: readonly [{\\n            readonly template: \\"string-storage-pointer\\";\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/collection/scope\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/collection/scope\\";\\n        readonly title: \\"ethdebug/format/pointer/collection/scope\\";\\n        readonly description: \\"A pointer defined with the aid of additional variables with values specified\\\\nas expressions.\\\\n\\\\nVariables are specified by the `define` field as an object mapping of\\\\nexpression by identifier. Variables are specified **in order**, so that\\\\nlater appearing variables may reference earlier ones in the same object.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly define: {\\n                readonly title: \\"Mapping of variables to expression value\\";\\n                readonly type: \\"object\\";\\n                readonly patternProperties: {\\n                    readonly \\"^[a-zA-Z_\\\\\\\\-]+[a-zA-Z0-9$_\\\\\\\\-]*$\\": {\\n                        readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n                    };\\n                };\\n                readonly additionalProperties: false;\\n            };\\n            readonly in: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer\\";\\n            };\\n        };\\n        readonly required: readonly [\\"define\\", \\"in\\"];\\n        readonly additionalProperties: false;\\n        readonly examples: readonly [{\\n            readonly define: {\\n                readonly \\"example-offset\\": {\\n                    readonly $sum: readonly [1, 2];\\n                };\\n                readonly \\"example-length\\": {\\n                    readonly $product: readonly [2, \\"$wordsize\\"];\\n                };\\n            };\\n            readonly in: {\\n                readonly name: \\"example\\";\\n                readonly location: \\"memory\\";\\n                readonly offset: \\"example-offset\\";\\n                readonly length: \\"example-length\\";\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/collection\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/collection\\";\\n        readonly title: \\"ethdebug/format/pointer/collection\\";\\n        readonly description: \\"A representation of a collection of pointers to data in the EVM\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly allOf: readonly [{\\n            readonly oneOf: readonly [{\\n                readonly required: readonly [\\"group\\"];\\n            }, {\\n                readonly required: readonly [\\"list\\"];\\n            }, {\\n                readonly required: readonly [\\"if\\"];\\n            }, {\\n                readonly required: readonly [\\"define\\"];\\n            }, {\\n                readonly required: readonly [\\"template\\"];\\n            }];\\n        }, {\\n            readonly if: {\\n                readonly required: readonly [\\"group\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/collection/group\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly required: readonly [\\"list\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/collection/list\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly required: readonly [\\"if\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/collection/conditional\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly required: readonly [\\"define\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/collection/scope\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly required: readonly [\\"template\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/collection/reference\\";\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/expression\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/expression\\";\\n        readonly title: \\"ethdebug/format/pointer/expression\\";\\n        readonly description: \\"A schema for describing expressions that evaluate to values.\\\\n\\";\\n        readonly oneOf: readonly [{\\n            readonly $ref: \\"#/$defs/Literal\\";\\n        }, {\\n            readonly $ref: \\"#/$defs/Variable\\";\\n        }, {\\n            readonly $ref: \\"#/$defs/Constant\\";\\n        }, {\\n            readonly $ref: \\"#/$defs/Arithmetic\\";\\n        }, {\\n            readonly $ref: \\"#/$defs/Lookup\\";\\n        }, {\\n            readonly $ref: \\"#/$defs/Read\\";\\n        }, {\\n            readonly $ref: \\"#/$defs/Keccak256\\";\\n        }, {\\n            readonly $ref: \\"#/$defs/Resize\\";\\n        }];\\n        readonly $defs: {\\n            readonly Literal: {\\n                readonly title: \\"Literal value\\";\\n                readonly description: \\"An unsigned number or a `0x`-prefixed string of hexadecimal digits\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/data/value\\";\\n                readonly examples: readonly [5, \\"0x0000000000000000000000000000000000000000000000000000000000000000\\"];\\n            };\\n            readonly Constant: {\\n                readonly title: \\"Constant value\\";\\n                readonly type: \\"string\\";\\n                readonly enum: readonly [\\"$wordsize\\"];\\n            };\\n            readonly Variable: {\\n                readonly title: \\"Variable identifier\\";\\n                readonly description: \\"A string that matches an identifier used in an earlier declaration of\\\\na scalar variable. This expression evaluates to the value of that\\\\nvariable.\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/pointer/identifier\\";\\n            };\\n            readonly Arithmetic: {\\n                readonly title: \\"Arithmetic operation\\";\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly $sum: {\\n                        readonly description: \\"A list of expressions to be added together.\\\\n\\";\\n                        readonly $ref: \\"#/$defs/Operands\\";\\n                    };\\n                    readonly $difference: {\\n                        readonly description: \\"A tuple of two expressions where the second is to be subtracted from\\\\nthe first.\\\\n\\\\nIf the second operand is larger than the first, the result of this\\\\narithmetic operation is defined to equal zero (`0`).\\\\n\\\\n(i.e., `{ \\\\\\"$difference\\\\\\": [a, b] }` equals `a` minus `b`.)\\\\n\\";\\n                        readonly $ref: \\"#/$defs/Operands\\";\\n                        readonly minItems: 2;\\n                        readonly maxItems: 2;\\n                    };\\n                    readonly $product: {\\n                        readonly description: \\"A list of expressions to be multiplied.\\\\n\\";\\n                        readonly $ref: \\"#/$defs/Operands\\";\\n                    };\\n                    readonly $quotient: {\\n                        readonly description: \\"A tuple of two expressions where the first corresponds to the\\\\ndividend and the second corresponds to the divisor, for the purposes\\\\nof doing integer division.\\\\n\\\\n(i.e., `{ \\\\\\"$quotient\\\\\\": [a, b] }` equals `a` divided by `b`.)\\\\n\\";\\n                        readonly $ref: \\"#/$defs/Operands\\";\\n                        readonly minItems: 2;\\n                        readonly maxItems: 2;\\n                    };\\n                    readonly $remainder: {\\n                        readonly description: \\"A tuple of two expressions where the first corresponds to the\\\\ndividend and the second corresponds to the divisor, for the purposes\\\\nof computing the modular-arithmetic remainder.\\\\n\\\\n(i.e., `{ \\\\\\"$remainder\\\\\\": [a, b] }` equals `a` mod `b`.)\\\\n\\";\\n                        readonly $ref: \\"#/$defs/Operands\\";\\n                        readonly minItems: 2;\\n                        readonly maxItems: 2;\\n                    };\\n                };\\n                readonly additionalProperties: false;\\n                readonly minProperties: 1;\\n                readonly maxProperties: 1;\\n                readonly examples: readonly [{\\n                    readonly $sum: readonly [5, 3, 4];\\n                }, {\\n                    readonly $difference: readonly [5, 3];\\n                }, {\\n                    readonly $product: readonly [5, 3, 0];\\n                }, {\\n                    readonly $quotient: readonly [5, 3];\\n                }, {\\n                    readonly $remainder: readonly [{\\n                        readonly $product: readonly [2, 2, 2, 2];\\n                    }, 3];\\n                }];\\n            };\\n            readonly Operands: {\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n                };\\n            };\\n            readonly Lookup: {\\n                readonly title: \\"Lookup region definition\\";\\n                readonly description: \\"An object of the form `{ \\\\\\".<property-name>\\\\\\": \\\\\\"<region>\\\\\\" }`, to\\\\ndenote that this expression is equivalent to the defined value for\\\\nthe property named `<property-name>` inside the region referenced as\\\\n`<region>`.\\\\n\\\\n`<property-name>` **must** be a valid and present property on the\\\\ncorresponding region, or it **must** correspond to an optional property\\\\nwhose schema specifies a default value for that property.\\\\n\\";\\n                readonly type: \\"object\\";\\n                readonly patternProperties: {\\n                    readonly \\"^\\\\\\\\.(offset|length|slot)$\\": {\\n                        readonly $ref: \\"#/$defs/Reference\\";\\n                    };\\n                };\\n                readonly additionalProperties: false;\\n                readonly minProperties: 1;\\n                readonly maxProperties: 1;\\n                readonly examples: readonly [{\\n                    readonly \\".offset\\": \\"array-count\\";\\n                }, {\\n                    readonly \\".length\\": \\"array-item\\";\\n                }, {\\n                    readonly \\".offset\\": \\"$this\\";\\n                }];\\n            };\\n            readonly Read: {\\n                readonly title: \\"Read region bytes\\";\\n                readonly description: \\"An object of the form `{ \\\\\\"$read\\\\\\": \\\\\\"<region>\\\\\\" }`. The value of this\\\\nexpression equals the raw bytes present in the running machine state\\\\nin the referenced region.\\\\n\\";\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly $read: {\\n                        readonly $ref: \\"#/$defs/Reference\\";\\n                    };\\n                };\\n                readonly required: readonly [\\"$read\\"];\\n                readonly additionalProperties: false;\\n                readonly examples: readonly [{\\n                    readonly $read: \\"struct-start\\";\\n                }];\\n            };\\n            readonly Reference: {\\n                readonly title: \\"Region reference\\";\\n                readonly description: \\"A string value that **must** either be the `\\\\\\"name\\\\\\"` of at least one\\\\nregion declared with `{ \\\\\\"name\\\\\\": \\\\\\"<region>\\\\\\" }` previously in some root\\\\npointer representation, or it **must** be the literal value `\\\\\\"$this\\\\\\"`,\\\\nwhich indicates a reference to the region containing this expression.\\\\n\\\\nIf more than one region is defined with the same name, resolution is\\\\ndefined as firstly resolving to the latest earlier sibling that declares\\\\nthe matching name, then secondly resolving to the parent if it matches,\\\\nthen to parent\'s earlier siblings, and so on.\\\\n\\";\\n                readonly type: \\"string\\";\\n                readonly oneOf: readonly [{\\n                    readonly $ref: \\"schema:ethdebug/format/pointer/identifier\\";\\n                }, {\\n                    readonly const: \\"$this\\";\\n                    readonly description: \\"Indicates a reference to the region containing this expression.\\\\n\\";\\n                }];\\n            };\\n            readonly Keccak256: {\\n                readonly title: \\"Keccak256 hash\\";\\n                readonly description: \\"An object of the form `{ \\\\\\"$keccak256\\\\\\": [...values] }`, indicating that this\\\\nexpression evaluates to the Solidity-style keccak256 hash of the\\\\ntightly-packed bytes encoded by `values`.\\\\n\\";\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly $keccak256: {\\n                        readonly title: \\"Array of hashed values\\";\\n                        readonly type: \\"array\\";\\n                        readonly items: {\\n                            readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n                        };\\n                    };\\n                };\\n                readonly additionalProperties: false;\\n                readonly required: readonly [\\"$keccak256\\"];\\n                readonly examples: readonly [{\\n                    readonly $keccak256: readonly [0, \\"0x00\\"];\\n                }];\\n            };\\n            readonly Resize: {\\n                readonly title: \\"Resize data\\";\\n                readonly description: \\"A resize operation expression is either an object of the form\\\\n`{ \\\\\\"$sized<N>\\\\\\": <expression> }` or an object of the form\\\\n`{ \\\\\\"$wordsized\\\\\\": <expression> }`, where `<expression>` is an expression\\\\nwhose value is to be resized, and, if applicable, where `<N>` is the\\\\nsmallest decimal representation of an unsigned integer.\\\\n\\\\nThis object\'s value is evaluated as follows, based on the bytes width of\\\\nthe value `<expression>` evaluates to and based on `<N>` (using the\\\\nvalue of `\\\\\\"$wordsize\\\\\\"` for `<N>` in the case of the latter form above):\\\\n- If the width equals `<N>`, this object evaluates to the same value as\\\\n  `<expression>` (equivalent to the identity function or no-op).\\\\n- If the width is less than `<N>`, this object evaluates to the same value\\\\n  as `<expression>` but with additional zero-bytes (`0x00`) prepended on\\\\n  the left (most significant) side, such that the resulting bytes width\\\\n  equals `<N>`.\\\\n- If the width exceeds `<N>`, this object evaluates to the same value\\\\n  as `<expression>` but with a number of bytes removed from the left\\\\n  (most significant) side until the bytes width equals `<N>`.\\\\n\\\\n(These cases match the behavior that Solidity uses for resizing its\\\\n`bytesN`/`uintN` types.)\\\\n\\";\\n                readonly type: \\"object\\";\\n                readonly oneOf: readonly [{\\n                    readonly title: \\"Resize to literal number of bytes\\";\\n                    readonly type: \\"object\\";\\n                    readonly patternProperties: {\\n                        readonly \\"^\\\\\\\\$sized([1-9]+[0-9]*)$\\": {\\n                            readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n                        };\\n                    };\\n                    readonly additionalProperties: false;\\n                }, {\\n                    readonly title: \\"Resize to word-size\\";\\n                    readonly type: \\"object\\";\\n                    readonly patternProperties: {\\n                        readonly \\"^\\\\\\\\$wordsized$\\": {\\n                            readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n                        };\\n                    };\\n                    readonly additionalProperties: false;\\n                }];\\n                readonly minProperties: 1;\\n                readonly maxProperties: 1;\\n                readonly examples: readonly [{\\n                    readonly $sized2: \\"0x00\\";\\n                }, {\\n                    readonly $sized2: \\"0xffffff\\";\\n                }, {\\n                    readonly $wordsized: \\"0x00\\";\\n                }];\\n            };\\n        };\\n        readonly examples: readonly [0, {\\n            readonly $sum: readonly [{\\n                readonly \\".offset\\": \\"array-start\\";\\n            }, {\\n                readonly \\".length\\": \\"array-start\\";\\n            }, 1];\\n        }, {\\n            readonly $keccak256: readonly [5, {\\n                readonly \\".offset\\": \\"array-start\\";\\n            }];\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/identifier\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/identifier\\";\\n        readonly title: \\"ethdebug/format/pointer/identifier\\";\\n        readonly description: \\"An identifier for use within the context of a root pointer\\\\n\\";\\n        readonly type: \\"string\\";\\n        readonly pattern: \\"^[a-zA-Z_\\\\\\\\-]+[a-zA-Z0-9$_\\\\\\\\-]*$\\";\\n        readonly examples: readonly [\\"a\\", \\"a0\\", \\"-$\\", \\"__init__\\"];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/region/base\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/region/base\\";\\n        readonly title: \\"ethdebug/format/pointer/region/base\\";\\n        readonly description: \\"Common schema for all region schemas, regardless of `\\\\\\"location\\\\\\": ...`.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly name: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/identifier\\";\\n            };\\n            readonly location: {\\n                readonly type: \\"string\\";\\n            };\\n        };\\n        readonly required: readonly [\\"location\\"];\\n        readonly examples: readonly [{\\n            readonly name: \\"array-item\\";\\n            readonly location: \\"memory\\";\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/region/calldata\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/region/calldata\\";\\n        readonly title: \\"ethdebug/format/pointer/region/calldata\\";\\n        readonly description: \\"A schema for representing a region of data in message calldata.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the slice addressing scheme.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly allOf: readonly [{\\n            readonly title: \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"calldata\\\\\\"\xa0}\\";\\n            readonly properties: {\\n                readonly location: {\\n                    readonly const: \\"calldata\\";\\n                };\\n            };\\n            readonly required: readonly [\\"location\\"];\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/region/base\\";\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/scheme/slice\\";\\n        }];\\n        readonly unevaluatedProperties: false;\\n        readonly examples: readonly [{\\n            readonly location: \\"calldata\\";\\n            readonly offset: \\"0x04\\";\\n            readonly length: 32;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/region/code\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/region/code\\";\\n        readonly title: \\"ethdebug/format/pointer/region/code\\";\\n        readonly description: \\"A schema for representing a region of data in EVM bytecode.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the slice addressing scheme.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly allOf: readonly [{\\n            readonly title: \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"code\\\\\\"\xa0}\\";\\n            readonly properties: {\\n                readonly location: {\\n                    readonly const: \\"code\\";\\n                };\\n            };\\n            readonly required: readonly [\\"location\\"];\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/region/base\\";\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/scheme/slice\\";\\n        }];\\n        readonly unevaluatedProperties: false;\\n        readonly examples: readonly [{\\n            readonly location: \\"code\\";\\n            readonly offset: \\"0x04\\";\\n            readonly length: 32;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/region/memory\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/region/memory\\";\\n        readonly title: \\"ethdebug/format/pointer/region/memory\\";\\n        readonly description: \\"A schema for representing a region of data in EVM memory. Pointer regions\\\\nwithin memory represent a single/atomic sequence of byte locations.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the slice addressing scheme.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly allOf: readonly [{\\n            readonly title: \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"memory\\\\\\"\xa0}\\";\\n            readonly properties: {\\n                readonly location: {\\n                    readonly const: \\"memory\\";\\n                };\\n            };\\n            readonly required: readonly [\\"location\\"];\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/region/base\\";\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/scheme/slice\\";\\n        }];\\n        readonly unevaluatedProperties: false;\\n        readonly examples: readonly [{\\n            readonly location: \\"memory\\";\\n            readonly offset: \\"0x04\\";\\n            readonly length: 32;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/region/returndata\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/region/returndata\\";\\n        readonly title: \\"ethdebug/format/pointer/region/returndata\\";\\n        readonly description: \\"A schema for representing a region of data in message returndata.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the slice addressing scheme.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly allOf: readonly [{\\n            readonly title: \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"returndata\\\\\\"\xa0}\\";\\n            readonly properties: {\\n                readonly location: {\\n                    readonly const: \\"returndata\\";\\n                };\\n            };\\n            readonly required: readonly [\\"location\\"];\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/region/base\\";\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/scheme/slice\\";\\n        }];\\n        readonly unevaluatedProperties: false;\\n        readonly examples: readonly [{\\n            readonly location: \\"returndata\\";\\n            readonly offset: \\"0x04\\";\\n            readonly length: 32;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/region/stack\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/region/stack\\";\\n        readonly title: \\"ethdebug/format/pointer/region/stack\\";\\n        readonly description: \\"A schema for representing a region of data in the EVM.\\\\n\\\\nDescribes stack slots as number of positions from the top (at time of\\\\nobservation). Debuggers reading this information **should** immediately\\\\nconvert these positions to absolute positions from the bottom.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the segment addressing scheme.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly allOf: readonly [{\\n            readonly title: \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"stack\\\\\\"\xa0}\\";\\n            readonly properties: {\\n                readonly location: {\\n                    readonly const: \\"stack\\";\\n                };\\n            };\\n            readonly required: readonly [\\"location\\"];\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/region/base\\";\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/scheme/segment\\";\\n        }];\\n        readonly unevaluatedProperties: false;\\n        readonly examples: readonly [{\\n            readonly location: \\"stack\\";\\n            readonly slot: 0;\\n        }, {\\n            readonly location: \\"stack\\";\\n            readonly slot: 1;\\n            readonly length: {\\n                readonly $product: readonly [\\"$wordsize\\", 2];\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/region/storage\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/region/storage\\";\\n        readonly title: \\"ethdebug/format/pointer/region/storage\\";\\n        readonly description: \\"A schema for representing a region of data in EVM storage.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the segment addressing scheme.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly allOf: readonly [{\\n            readonly title: \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"storage\\\\\\"\xa0}\\";\\n            readonly properties: {\\n                readonly location: {\\n                    readonly const: \\"storage\\";\\n                };\\n            };\\n            readonly required: readonly [\\"location\\"];\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/region/base\\";\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/scheme/segment\\";\\n        }];\\n        readonly unevaluatedProperties: false;\\n        readonly examples: readonly [{\\n            readonly location: \\"storage\\";\\n            readonly slot: \\"0x03\\";\\n        }, {\\n            readonly location: \\"storage\\";\\n            readonly slot: \\"0x06\\";\\n            readonly length: {\\n                readonly $product: readonly [\\"$wordsize\\", 2];\\n            };\\n        }, {\\n            readonly location: \\"storage\\";\\n            readonly slot: \\"0x08\\";\\n            readonly offset: {\\n                readonly $quotient: readonly [\\"$wordsize\\", 2];\\n            };\\n            readonly length: {\\n                readonly $quotient: readonly [\\"$wordsize\\", 2];\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/region/transient\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/region/transient\\";\\n        readonly title: \\"ethdebug/format/pointer/region/transient\\";\\n        readonly description: \\"A schema for representing a region of data in EVM transient storage.\\\\n\\\\nThis schema is constructed by extending the base region schema\\\\nand the schema for the segment addressing scheme.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly allOf: readonly [{\\n            readonly title: \\"{\xa0\\\\\\"location\\\\\\":\xa0\\\\\\"transient\\\\\\"\xa0}\\";\\n            readonly properties: {\\n                readonly location: {\\n                    readonly const: \\"transient\\";\\n                };\\n            };\\n            readonly required: readonly [\\"location\\"];\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/region/base\\";\\n        }, {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/scheme/segment\\";\\n        }];\\n        readonly unevaluatedProperties: false;\\n        readonly examples: readonly [{\\n            readonly location: \\"transient\\";\\n            readonly slot: \\"0x03\\";\\n        }, {\\n            readonly location: \\"transient\\";\\n            readonly slot: \\"0x06\\";\\n            readonly length: {\\n                readonly $product: readonly [\\"$wordsize\\", 2];\\n            };\\n        }, {\\n            readonly location: \\"transient\\";\\n            readonly slot: \\"0x08\\";\\n            readonly offset: {\\n                readonly $quotient: readonly [\\"$wordsize\\", 2];\\n            };\\n            readonly length: {\\n                readonly $quotient: readonly [\\"$wordsize\\", 2];\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/region\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/region\\";\\n        readonly title: \\"ethdebug/format/pointer/region\\";\\n        readonly description: \\"A representation of a region of data in the EVM\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly location: {\\n                readonly $ref: \\"#/$defs/Location\\";\\n            };\\n        };\\n        readonly allOf: readonly [{\\n            readonly if: {\\n                readonly properties: {\\n                    readonly location: {\\n                        readonly const: \\"stack\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/region/stack\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly location: {\\n                        readonly const: \\"memory\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/region/memory\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly location: {\\n                        readonly const: \\"storage\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/region/storage\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly location: {\\n                        readonly const: \\"calldata\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/region/calldata\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly location: {\\n                        readonly const: \\"returndata\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/region/returndata\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly location: {\\n                        readonly const: \\"transient\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/region/transient\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly location: {\\n                        readonly const: \\"code\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/region/code\\";\\n            };\\n        }];\\n        readonly $defs: {\\n            readonly Location: {\\n                readonly type: \\"string\\";\\n                readonly enum: readonly [\\"stack\\", \\"memory\\", \\"storage\\", \\"calldata\\", \\"returndata\\", \\"transient\\", \\"code\\"];\\n            };\\n        };\\n        readonly unevaluatedProperties: false;\\n        readonly examples: readonly [{\\n            readonly location: \\"storage\\";\\n            readonly slot: \\"0x0000000000000000000000000000000000000000000000000000000000000000\\";\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/scheme/segment\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/scheme/segment\\";\\n        readonly title: \\"ethdebug/format/pointer/scheme/segment\\";\\n        readonly description: \\"An addressing scheme for pointing to a range of bytes in a data location\\\\narranged as individually-addressable word-sized slots.\\\\n\\\\n**Note** that this addressing scheme permits addressing byte ranges that\\\\nextend beyond the last byte of a particular slot, or even covering the range\\\\nof multiple slots.\\\\n\\\\nIn such cases, this schema defines the range as the concatenation of bytes\\\\nacross slots such that the address of the first byte after the end of slot\\\\n`p` (i.e., `{ \\\\\\"offset\\\\\\": \\\\\\"$wordsize\\\\\\" }`) is interpreted as the first byte of\\\\nslot `p + 1`.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly slot: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n            };\\n            readonly offset: {\\n                readonly description: \\"The starting byte index within the slot.\\\\n\\\\nThis field is **optional**. If unspecified, it has the default value of\\\\n`0`, indicating that the segment begins at the start of the specified\\\\nslot.\\\\n\\\\nThis field\'s expression must resolve to a value _n_ such that\\\\n0&nbsp;\u2264&nbsp;_n_&nbsp;\\\\\\\\<&nbsp;`$wordsize` (i.e., the offset **must**\\\\nbegin inside the slot).\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n                readonly default: 0;\\n            };\\n            readonly length: {\\n                readonly description: \\"The length of the bytes range this segment represents.\\\\n\\\\nThis field is **optional**. If unspecified, its default value indicates\\\\nthat the segment ends at the end of the slot.\\\\n\\\\nIf this field has value larger than the default value, i.e., if the\\\\nsegment extends beyond the last byte in the slot, then this segment is\\\\ndefined to be the concatenation of the sequentially-addressed slot(s)\\\\nfollowing following the slot specified.\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n                readonly default: {\\n                    readonly $difference: readonly [\\"$wordsize\\", {\\n                        readonly \\".offset\\": \\"$this\\";\\n                    }];\\n                };\\n            };\\n        };\\n        readonly required: readonly [\\"slot\\"];\\n        readonly examples: readonly [{\\n            readonly slot: 0;\\n        }, {\\n            readonly slot: 1;\\n            readonly length: {\\n                readonly $product: readonly [\\"$wordsize\\", 3];\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/scheme/slice\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/scheme/slice\\";\\n        readonly title: \\"ethdebug/format/pointer/scheme/slice\\";\\n        readonly description: \\"An addressing scheme for pointing to a range of sequential bytes inside\\\\na data location whose structure is that of a regular bytes array\\\\n(i.e., where bytes are indexed by byte offset, with no concept of word).\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly offset: {\\n                readonly description: \\"The index of the byte (starting from zero) in the data location where\\\\nthe slice begins.\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n            };\\n            readonly length: {\\n                readonly description: \\"The length of the slice in number of bytes.\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/pointer/expression\\";\\n            };\\n        };\\n        readonly required: readonly [\\"offset\\", \\"length\\"];\\n        readonly examples: readonly [{\\n            readonly offset: 0;\\n            readonly length: 32;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer/template\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer/template\\";\\n        readonly title: \\"ethdebug/format/pointer/template\\";\\n        readonly description: \\"A schema for representing a pointer defined in terms of some variables whose\\\\nvalues are to be provided when invoking the template.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly expect: {\\n                readonly title: \\"Template variables\\";\\n                readonly description: \\"An array of variable identifiers used in the definition of the\\\\npointer template.\\\\n\\";\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"schema:ethdebug/format/pointer/identifier\\";\\n                };\\n                readonly additionalItems: false;\\n            };\\n            readonly for: {\\n                readonly $ref: \\"schema:ethdebug/format/pointer\\";\\n            };\\n        };\\n        readonly required: readonly [\\"expect\\", \\"for\\"];\\n        readonly additionalProperties: false;\\n        readonly examples: readonly [{\\n            readonly expect: readonly [\\"slot\\"];\\n            readonly for: {\\n                readonly location: \\"storage\\";\\n                readonly slot: \\"slot\\";\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/pointer\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/pointer\\";\\n        readonly title: \\"ethdebug/format/pointer\\";\\n        readonly description: \\"A schema for representing a pointer to a data position or a range of data\\\\npositions in the EVM.\\\\n\\\\nAn **ethdebug/format/pointer** is either a single region or a structured\\\\ncollection of other pointers.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly if: {\\n            readonly required: readonly [\\"location\\"];\\n        };\\n        readonly then: {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/region\\";\\n        };\\n        readonly else: {\\n            readonly $ref: \\"schema:ethdebug/format/pointer/collection\\";\\n        };\\n        readonly examples: readonly [{\\n            readonly location: \\"storage\\";\\n            readonly slot: 2;\\n        }, {\\n            readonly define: {\\n                readonly \\"uint256-array-memory-pointer-slot\\": 0;\\n            };\\n            readonly in: {\\n                readonly group: readonly [{\\n                    readonly name: \\"array-start\\";\\n                    readonly location: \\"stack\\";\\n                    readonly slot: \\"uint256-array-memory-pointer-slot\\";\\n                }, {\\n                    readonly name: \\"array-count\\";\\n                    readonly location: \\"memory\\";\\n                    readonly offset: {\\n                        readonly $read: \\"array-start\\";\\n                    };\\n                    readonly length: \\"$wordsize\\";\\n                }, {\\n                    readonly list: {\\n                        readonly count: {\\n                            readonly $read: \\"array-count\\";\\n                        };\\n                        readonly each: \\"item-index\\";\\n                        readonly is: {\\n                            readonly name: \\"array-item\\";\\n                            readonly location: \\"memory\\";\\n                            readonly offset: {\\n                                readonly $sum: readonly [{\\n                                    readonly \\".offset\\": \\"array-count\\";\\n                                }, {\\n                                    readonly \\".length\\": \\"array-count\\";\\n                                }, {\\n                                    readonly $product: readonly [\\"item-index\\", {\\n                                        readonly \\".length\\": \\"$this\\";\\n                                    }];\\n                                }];\\n                            };\\n                            readonly length: \\"$wordsize\\";\\n                        };\\n                    };\\n                }];\\n            };\\n        }, {\\n            readonly define: {\\n                readonly \\"struct-storage-contract-variable-slot\\": 0;\\n            };\\n            readonly in: {\\n                readonly group: readonly [{\\n                    readonly name: \\"x\\";\\n                    readonly location: \\"storage\\";\\n                    readonly slot: \\"struct-storage-contract-variable-slot\\";\\n                    readonly offset: {\\n                        readonly $difference: readonly [\\"$wordsize\\", {\\n                            readonly \\".length\\": \\"$this\\";\\n                        }];\\n                    };\\n                    readonly length: 1;\\n                }, {\\n                    readonly name: \\"y\\";\\n                    readonly location: \\"storage\\";\\n                    readonly slot: \\"struct-storage-contract-variable-slot\\";\\n                    readonly offset: {\\n                        readonly $difference: readonly [{\\n                            readonly \\".offset\\": \\"x\\";\\n                        }, {\\n                            readonly \\".length\\": \\"$this\\";\\n                        }];\\n                    };\\n                    readonly length: 1;\\n                }, {\\n                    readonly name: \\"salt\\";\\n                    readonly location: \\"storage\\";\\n                    readonly slot: \\"struct-storage-contract-variable-slot\\";\\n                    readonly offset: {\\n                        readonly $difference: readonly [{\\n                            readonly \\".offset\\": \\"y\\";\\n                        }, {\\n                            readonly \\".length\\": \\"$this\\";\\n                        }];\\n                    };\\n                    readonly length: 4;\\n                }];\\n            };\\n        }, {\\n            readonly group: readonly [{\\n                readonly name: \\"array-start\\";\\n                readonly location: \\"stack\\";\\n                readonly slot: 0;\\n            }, {\\n                readonly name: \\"array-count\\";\\n                readonly location: \\"memory\\";\\n                readonly offset: {\\n                    readonly $read: \\"array-start\\";\\n                };\\n                readonly length: \\"$wordsize\\";\\n            }, {\\n                readonly list: {\\n                    readonly count: {\\n                        readonly $read: \\"array-count\\";\\n                    };\\n                    readonly each: \\"item-index\\";\\n                    readonly is: {\\n                        readonly group: readonly [{\\n                            readonly name: \\"struct-pointer\\";\\n                            readonly location: \\"memory\\";\\n                            readonly offset: {\\n                                readonly $sum: readonly [{\\n                                    readonly \\".offset\\": \\"array-count\\";\\n                                }, {\\n                                    readonly \\".length\\": \\"array-count\\";\\n                                }, {\\n                                    readonly $product: readonly [\\"item-index\\", {\\n                                        readonly \\".length\\": \\"struct-pointer\\";\\n                                    }];\\n                                }];\\n                            };\\n                            readonly length: \\"$wordsize\\";\\n                        }, {\\n                            readonly name: \\"struct-member-0\\";\\n                            readonly location: \\"memory\\";\\n                            readonly offset: {\\n                                readonly $read: \\"struct-pointer\\";\\n                            };\\n                            readonly length: \\"$wordsize\\";\\n                        }, {\\n                            readonly name: \\"struct-member-1\\";\\n                            readonly location: \\"memory\\";\\n                            readonly offset: {\\n                                readonly $sum: readonly [{\\n                                    readonly \\".offset\\": \\"struct-member-0\\";\\n                                }, {\\n                                    readonly \\".length\\": \\"struct-member-0\\";\\n                                }];\\n                            };\\n                            readonly length: \\"$wordsize\\";\\n                        }];\\n                    };\\n                };\\n            }];\\n        }, {\\n            readonly define: {\\n                readonly \\"string-storage-contract-variable-slot\\": 0;\\n            };\\n            readonly in: {\\n                readonly group: readonly [{\\n                    readonly name: \\"length-flag\\";\\n                    readonly location: \\"storage\\";\\n                    readonly slot: \\"string-storage-contract-variable-slot\\";\\n                    readonly offset: {\\n                        readonly $difference: readonly [\\"$wordsize\\", 1];\\n                    };\\n                    readonly length: 1;\\n                }, {\\n                    readonly if: {\\n                        readonly $remainder: readonly [{\\n                            readonly $sum: readonly [{\\n                                readonly $read: \\"length-flag\\";\\n                            }, 1];\\n                        }, 2];\\n                    };\\n                    readonly then: {\\n                        readonly define: {\\n                            readonly \\"string-length\\": {\\n                                readonly $quotient: readonly [{\\n                                    readonly $read: \\"length-flag\\";\\n                                }, 2];\\n                            };\\n                        };\\n                        readonly in: {\\n                            readonly name: \\"string\\";\\n                            readonly location: \\"storage\\";\\n                            readonly slot: \\"string-storage-contract-variable-slot\\";\\n                            readonly offset: 0;\\n                            readonly length: \\"string-length\\";\\n                        };\\n                    };\\n                    readonly else: {\\n                        readonly group: readonly [{\\n                            readonly name: \\"long-string-length-data\\";\\n                            readonly location: \\"storage\\";\\n                            readonly slot: \\"string-storage-contract-variable-slot\\";\\n                            readonly offset: 0;\\n                            readonly length: \\"$wordsize\\";\\n                        }, {\\n                            readonly define: {\\n                                readonly \\"string-length\\": {\\n                                    readonly $quotient: readonly [{\\n                                        readonly $difference: readonly [{\\n                                            readonly $read: \\"long-string-length-data\\";\\n                                        }, 1];\\n                                    }, 2];\\n                                };\\n                                readonly \\"start-slot\\": {\\n                                    readonly $keccak256: readonly [{\\n                                        readonly $wordsized: \\"string-storage-contract-variable-slot\\";\\n                                    }];\\n                                };\\n                                readonly \\"total-slots\\": {\\n                                    readonly $quotient: readonly [{\\n                                        readonly $sum: readonly [\\"string-length\\", {\\n                                            readonly $difference: readonly [\\"$wordsize\\", 1];\\n                                        }];\\n                                    }, \\"$wordsize\\"];\\n                                };\\n                            };\\n                            readonly in: {\\n                                readonly list: {\\n                                    readonly count: \\"total-slots\\";\\n                                    readonly each: \\"i\\";\\n                                    readonly is: {\\n                                        readonly define: {\\n                                            readonly \\"current-slot\\": {\\n                                                readonly $sum: readonly [\\"start-slot\\", \\"i\\"];\\n                                            };\\n                                            readonly \\"previous-length\\": {\\n                                                readonly $product: readonly [\\"i\\", \\"$wordsize\\"];\\n                                            };\\n                                        };\\n                                        readonly in: {\\n                                            readonly if: {\\n                                                readonly $difference: readonly [\\"string-length\\", {\\n                                                    readonly $sum: readonly [\\"previous-length\\", \\"$wordsize\\"];\\n                                                }];\\n                                            };\\n                                            readonly then: {\\n                                                readonly name: \\"string\\";\\n                                                readonly location: \\"storage\\";\\n                                                readonly slot: \\"current-slot\\";\\n                                            };\\n                                            readonly else: {\\n                                                readonly name: \\"string\\";\\n                                                readonly location: \\"storage\\";\\n                                                readonly slot: \\"current-slot\\";\\n                                                readonly offset: 0;\\n                                                readonly length: {\\n                                                    readonly $difference: readonly [\\"string-length\\", \\"previous-length\\"];\\n                                                };\\n                                            };\\n                                        };\\n                                    };\\n                                };\\n                            };\\n                        }];\\n                    };\\n                }];\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/program/context/code\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/program/context/code\\";\\n        readonly title: \\"ethdebug/format/program/context/code\\";\\n        readonly description: \\"Information about the source code range corresponding to this point in\\\\nmachine execution.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly code: {\\n                readonly $ref: \\"schema:ethdebug/format/materials/source-range\\";\\n            };\\n        };\\n        readonly required: readonly [\\"code\\"];\\n        readonly examples: readonly [{\\n            readonly code: {\\n                readonly source: {\\n                    readonly id: 5;\\n                };\\n                readonly range: {\\n                    readonly offset: 68;\\n                    readonly length: 16;\\n                };\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/program/context/frame\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/program/context/frame\\";\\n        readonly title: \\"ethdebug/format/program/context/frame\\";\\n        readonly description: \\"A context may specify a `\\\\\\"frame\\\\\\"` property to indicate that its facts apply\\\\nonly to one of several possible compilation frames, e.g. for compilers with\\\\ndistinct frontend/backends to specify debugging data for the IR separately\\\\nfrom the debugging data for the source language.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly frame: {\\n                readonly title: \\"Relevant compilation frame\\";\\n                readonly type: \\"string\\";\\n            };\\n        };\\n        readonly required: readonly [\\"frame\\"];\\n        readonly examples: readonly [{\\n            readonly frame: \\"ir\\";\\n        }, {\\n            readonly frame: \\"source\\";\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/program/context/gather\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/program/context/gather\\";\\n        readonly title: \\"ethdebug/format/program/context/gather\\";\\n        readonly description: \\"A context specifying the `\\\\\\"gather\\\\\\"` property with a list of contexts\\\\nindicates that all specified contexts apply simultaneously.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly gather: {\\n                readonly title: \\"Contexts to gather\\";\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"schema:ethdebug/format/program/context\\";\\n                };\\n                readonly minItems: 2;\\n                readonly additionalItems: false;\\n            };\\n        };\\n        readonly required: readonly [\\"gather\\"];\\n        readonly examples: readonly [{\\n            readonly gather: readonly [{\\n                readonly frame: \\"ir\\";\\n                readonly code: {\\n                    readonly source: {\\n                        readonly id: 0;\\n                    };\\n                    readonly range: {\\n                        readonly offset: 8;\\n                        readonly length: 11;\\n                    };\\n                };\\n            }, {\\n                readonly frame: \\"source\\";\\n                readonly code: {\\n                    readonly source: {\\n                        readonly id: 3;\\n                    };\\n                    readonly range: {\\n                        readonly offset: 113;\\n                        readonly length: 19;\\n                    };\\n                };\\n            }];\\n        }, {\\n            readonly gather: readonly [{\\n                readonly variables: readonly [{\\n                    readonly identifier: \\"x\\";\\n                    readonly declaration: {\\n                        readonly source: {\\n                            readonly id: 5;\\n                        };\\n                        readonly range: {\\n                            readonly offset: 10;\\n                            readonly length: 56;\\n                        };\\n                    };\\n                    readonly type: {\\n                        readonly kind: \\"string\\";\\n                    };\\n                }];\\n            }, {\\n                readonly variables: readonly [{\\n                    readonly identifier: \\"x\\";\\n                    readonly declaration: {\\n                        readonly source: {\\n                            readonly id: 5;\\n                        };\\n                        readonly range: {\\n                            readonly offset: 10;\\n                            readonly length: 56;\\n                        };\\n                    };\\n                    readonly pointer: {\\n                        readonly location: \\"storage\\";\\n                        readonly slot: 0;\\n                    };\\n                }];\\n            }];\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/program/context/name\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/program/context/name\\";\\n        readonly title: \\"ethdebug/format/program/context/name\\";\\n        readonly description: \\"The name of the context, for use in disambiguating future instruction\\\\nannotations that specify one of several possible contexts based on\\\\ninformation only available at runtime.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly name: {\\n                readonly type: \\"string\\";\\n            };\\n        };\\n        readonly required: readonly [\\"name\\"];\\n        readonly examples: readonly [{\\n            readonly name: \\"Array<T=bytes32>\\";\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/program/context/pick\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/program/context/pick\\";\\n        readonly title: \\"ethdebug/format/program/context/pick\\";\\n        readonly description: \\"A program context that specifies the `\\\\\\"pick\\\\\\"` property indicates that\\\\none of several possible contexts are known to be true, possibly requiring\\\\nadditional information to disambiguate.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly pick: {\\n                readonly title: \\"Contexts to pick from\\";\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"schema:ethdebug/format/program/context\\";\\n                };\\n                readonly minItems: 2;\\n                readonly additionalItems: false;\\n            };\\n        };\\n        readonly required: readonly [\\"pick\\"];\\n        readonly examples: readonly [{\\n            readonly pick: readonly [{\\n                readonly code: {\\n                    readonly source: {\\n                        readonly id: 5;\\n                    };\\n                    readonly range: {\\n                        readonly offset: 68;\\n                        readonly length: 16;\\n                    };\\n                };\\n            }, {\\n                readonly code: {\\n                    readonly source: {\\n                        readonly id: 5;\\n                    };\\n                    readonly range: {\\n                        readonly offset: 132;\\n                        readonly length: 16;\\n                    };\\n                };\\n            }];\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/program/context/remark\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/program/context/remark\\";\\n        readonly title: \\"ethdebug/format/program/context/remark\\";\\n        readonly description: \\"Human-readable information about the instruction. This field is intended\\\\nprimarily not for compilers to use directly, but rather for humans\\\\n(directly or indirectly) to use as an annotation field.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly remark: {\\n                readonly type: \\"string\\";\\n            };\\n        };\\n        readonly required: readonly [\\"remark\\"];\\n        readonly examples: readonly [{\\n            readonly remark: \\"jump to end if zero\\";\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/program/context/variables\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/program/context/variables\\";\\n        readonly title: \\"ethdebug/format/program/context/variables\\";\\n        readonly description: \\"Information about known variables at this context\'s point in code\\\\nexecution, specified as an array whose items each correspond to a unique\\\\nvariable.\\\\n\\\\nItems in this array **should not** have duplicate non-empty `identifier`\\\\nvalues except where high-level language semantics require it. Where\\\\npossible, use other mechanisms provided by this format to indicate that\\\\nan identifier\'s corresponding variable is ambiguous.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly variables: {\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"#/$defs/Variable\\";\\n                };\\n                readonly minItems: 1;\\n                readonly additionalItems: false;\\n            };\\n        };\\n        readonly required: readonly [\\"variables\\"];\\n        readonly examples: readonly [{\\n            readonly variables: readonly [{\\n                readonly identifier: \\"x\\";\\n                readonly declaration: {\\n                    readonly source: {\\n                        readonly id: 5;\\n                    };\\n                    readonly range: {\\n                        readonly offset: 10;\\n                        readonly length: 56;\\n                    };\\n                };\\n                readonly type: {\\n                    readonly kind: \\"string\\";\\n                };\\n                readonly pointer: {\\n                    readonly location: \\"storage\\";\\n                    readonly slot: 0;\\n                };\\n            }];\\n        }];\\n        readonly $defs: {\\n            readonly Variable: {\\n                readonly title: \\"Variable\\";\\n                readonly description: \\"The information known about a variable at a particular point in the code\\\\nexecution.\\\\n\\";\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly identifier: {\\n                        readonly type: \\"string\\";\\n                        readonly minLength: 1;\\n                    };\\n                    readonly declaration: {\\n                        readonly description: \\"Source range corresponding to where the variable was declared.\\\\n\\";\\n                        readonly $ref: \\"schema:ethdebug/format/materials/source-range\\";\\n                    };\\n                    readonly type: {\\n                        readonly description: \\"The variable\'s static type, if it exists. This **must** be specified\\\\neither as a full **ethdebug/format/type** representation, or an\\\\n`{ \\\\\\"id\\\\\\": \\\\\\"...\\\\\\" }` type reference object.\\\\n\\";\\n                        readonly oneOf: readonly [{\\n                            readonly $ref: \\"schema:ethdebug/format/type\\";\\n                        }, {\\n                            readonly $ref: \\"schema:ethdebug/format/type/reference\\";\\n                        }];\\n                    };\\n                    readonly pointer: {\\n                        readonly description: \\"Allocation information for the variable, if it exists.\\\\n\\";\\n                        readonly $ref: \\"schema:ethdebug/format/pointer\\";\\n                    };\\n                };\\n                readonly minProperties: 1;\\n                readonly unevaluatedProperties: false;\\n                readonly examples: readonly [{\\n                    readonly identifier: \\"x\\";\\n                    readonly declaration: {\\n                        readonly source: {\\n                            readonly id: 5;\\n                        };\\n                        readonly range: {\\n                            readonly offset: 10;\\n                            readonly length: 56;\\n                        };\\n                    };\\n                }];\\n            };\\n        };\\n    };\\n    readonly \\"schema:ethdebug/format/program/context\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/program/context\\";\\n        readonly title: \\"ethdebug/format/program/context\\";\\n        readonly description: \\"An **ethdebug/format/program/context** object represents compile-time\\\\ninformation about the high-level runtime execution state at a specific point\\\\nin a program\'s bytecode.\\\\n\\\\nThis schema provides a formal specification for this format\'s model of what\\\\ninformation can be known at compile-time about the high-level runtime. This\\\\nincludes data such as a particular machine instruction\'s source mapping or\\\\nwhat variables exist in runtime state following some instruction.\\\\n\\\\nThe context object supports dynamic context combination and selection through\\\\nthe use of `gather`, and `pick` properties. This allows for flexible\\\\ncomposition and extraction of context information.\\\\n\\\\nContexts serve as a bridge between low-level EVM execution and high-level\\\\nlanguage constructs. Debuggers can use these compile-time guarantees to\\\\nmaintain a coherent view of the high-level language runtime throughout\\\\nprogram execution. This enables debugging tools to map execution points to\\\\nsource code, reconstruct variable states, provide meaningful stack traces,\\\\nand offer insights into control flow and data structures.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly allOf: readonly [{\\n            readonly if: {\\n                readonly required: readonly [\\"code\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/program/context/code\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly required: readonly [\\"variables\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/program/context/variables\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly required: readonly [\\"remark\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/program/context/remark\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly required: readonly [\\"pick\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/program/context/pick\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly required: readonly [\\"gather\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/program/context/gather\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly required: readonly [\\"frame\\"];\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/program/context/frame\\";\\n            };\\n        }];\\n        readonly unevaluatedProperties: false;\\n        readonly examples: readonly [{\\n            readonly variables: readonly [{\\n                readonly identifier: \\"x\\";\\n                readonly declaration: {\\n                    readonly source: {\\n                        readonly id: 5;\\n                    };\\n                    readonly range: {\\n                        readonly offset: 10;\\n                        readonly length: 56;\\n                    };\\n                };\\n                readonly type: {\\n                    readonly kind: \\"string\\";\\n                };\\n                readonly pointer: {\\n                    readonly location: \\"storage\\";\\n                    readonly slot: 0;\\n                };\\n            }];\\n            readonly code: {\\n                readonly source: {\\n                    readonly id: 5;\\n                };\\n                readonly range: {\\n                    readonly offset: 68;\\n                    readonly length: 16;\\n                };\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/program/instruction\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/program/instruction\\";\\n        readonly title: \\"ethdebug/format/program/instruction\\";\\n        readonly description: \\"A schema for representing the information pertaining to a particular\\\\ninstruction in machine code.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly offset: {\\n                readonly title: \\"Instruction byte offset\\";\\n                readonly description: \\"The byte offset where the instruction begins within the bytecode.\\\\n\\\\nFor legacy contract bytecode (non-EOF), this value is equivalent to the\\\\ninstruction\'s program counter. For EOF bytecode, this value **must** be\\\\nthe offset from the start of the container, not the start of a particular\\\\ncode section within that container.\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/data/value\\";\\n            };\\n            readonly operation: {\\n                readonly title: \\"Machine operation information\\";\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly mnemonic: {\\n                        readonly description: \\"The mnemonic operation code (PUSH1, e.g.)\\";\\n                        readonly type: \\"string\\";\\n                    };\\n                    readonly arguments: {\\n                        readonly description: \\"The immediate arguments to the operation, if relevant.\\";\\n                        readonly type: \\"array\\";\\n                        readonly minItems: 1;\\n                        readonly items: {\\n                            readonly description: \\"An immediate value specified as argument to the opcode\\\\n\\";\\n                            readonly $ref: \\"schema:ethdebug/format/data/value\\";\\n                        };\\n                    };\\n                };\\n                readonly required: readonly [\\"mnemonic\\"];\\n            };\\n            readonly context: {\\n                readonly description: \\"The context known to exist following the execution of this instruction.\\\\n\\\\nThis field is **optional**. Omitting it is equivalent to specifying the\\\\nempty context value (`{}`).\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/program/context\\";\\n                readonly default: {};\\n            };\\n        };\\n        readonly required: readonly [\\"offset\\"];\\n        readonly examples: readonly [{\\n            readonly offset: 0;\\n            readonly operation: {\\n                readonly mnemonic: \\"PUSH1\\";\\n                readonly arguments: readonly [\\"0x60\\"];\\n            };\\n            readonly context: {\\n                readonly code: {\\n                    readonly source: {\\n                        readonly id: 5;\\n                    };\\n                    readonly range: {\\n                        readonly offset: 10;\\n                        readonly length: 30;\\n                    };\\n                };\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/program\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/program\\";\\n        readonly title: \\"ethdebug/format/program\\";\\n        readonly description: \\"Debugging information about a particular bytecode in a compilation.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly compilation: {\\n                readonly title: \\"Compilation reference by ID\\";\\n                readonly description: \\"A reference to the compilation as an `{ \\\\\\"id\\\\\\": ... }` object.\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/materials/reference\\";\\n            };\\n            readonly contract: {\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly name: {\\n                        readonly type: \\"string\\";\\n                    };\\n                    readonly definition: {\\n                        readonly $ref: \\"schema:ethdebug/format/materials/source-range\\";\\n                    };\\n                };\\n                readonly required: readonly [\\"definition\\"];\\n            };\\n            readonly environment: {\\n                readonly title: \\"Bytecode execution environment\\";\\n                readonly description: \\"Whether this bytecode is for contract creation or runtime calls.\\\\n\\";\\n                readonly type: \\"string\\";\\n                readonly enum: readonly [\\"call\\", \\"create\\"];\\n            };\\n            readonly context: {\\n                readonly description: \\"The context known to exist prior to the execution of the first\\\\ninstruction in the bytecode.\\\\n\\\\nThis field is **optional**. Omitting it is equivalent to specifying the\\\\nempty context value (`{}`).\\\\n\\";\\n                readonly $ref: \\"schema:ethdebug/format/program/context\\";\\n                readonly default: {};\\n            };\\n            readonly instructions: {\\n                readonly type: \\"array\\";\\n                readonly description: \\"The full array of instructions for the bytecode.\\\\n\\";\\n                readonly items: {\\n                    readonly $ref: \\"schema:ethdebug/format/program/instruction\\";\\n                };\\n                readonly additionalItems: false;\\n            };\\n        };\\n        readonly required: readonly [\\"contract\\", \\"environment\\", \\"instructions\\"];\\n        readonly examples: readonly [{\\n            readonly contract: {\\n                readonly name: \\"Incrementer\\";\\n                readonly definition: {\\n                    readonly source: {\\n                        readonly id: 0;\\n                    };\\n                };\\n            };\\n            readonly environment: \\"call\\";\\n            readonly context: {\\n                readonly variables: readonly [{\\n                    readonly identifier: \\"storedValue\\";\\n                    readonly type: {\\n                        readonly kind: \\"uint\\";\\n                        readonly bits: 256;\\n                    };\\n                    readonly pointer: {\\n                        readonly location: \\"storage\\";\\n                        readonly slot: 0;\\n                    };\\n                }];\\n            };\\n            readonly instructions: readonly [{\\n                readonly offset: 0;\\n                readonly operation: {\\n                    readonly mnemonic: \\"PUSH0\\";\\n                };\\n                readonly context: {\\n                    readonly variables: readonly [{\\n                        readonly identifier: \\"storedValue\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                        readonly pointer: {\\n                            readonly location: \\"storage\\";\\n                            readonly slot: 0;\\n                        };\\n                    }];\\n                };\\n            }, {\\n                readonly offset: 1;\\n                readonly operation: {\\n                    readonly mnemonic: \\"SLOAD\\";\\n                };\\n                readonly context: {\\n                    readonly variables: readonly [{\\n                        readonly identifier: \\"storedValue\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                        readonly pointer: {\\n                            readonly location: \\"storage\\";\\n                            readonly slot: 0;\\n                        };\\n                    }, {\\n                        readonly identifier: \\"localValue\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                        readonly pointer: {\\n                            readonly location: \\"stack\\";\\n                            readonly slot: 0;\\n                        };\\n                    }];\\n                };\\n            }, {\\n                readonly offset: 2;\\n                readonly operation: {\\n                    readonly mnemonic: \\"PUSH1\\";\\n                    readonly arguments: readonly [\\"0x01\\"];\\n                };\\n                readonly context: {\\n                    readonly variables: readonly [{\\n                        readonly identifier: \\"storedValue\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                        readonly pointer: {\\n                            readonly location: \\"storage\\";\\n                            readonly slot: 0;\\n                        };\\n                    }, {\\n                        readonly \\"<<\\": {\\n                            readonly identifier: \\"localValue\\";\\n                            readonly type: {\\n                                readonly kind: \\"uint\\";\\n                                readonly bits: 256;\\n                            };\\n                            readonly pointer: {\\n                                readonly location: \\"stack\\";\\n                                readonly slot: 0;\\n                            };\\n                        };\\n                        readonly pointer: {\\n                            readonly location: \\"stack\\";\\n                            readonly slot: 1;\\n                        };\\n                    }];\\n                };\\n            }, {\\n                readonly offset: 4;\\n                readonly operation: {\\n                    readonly mnemonic: \\"ADD\\";\\n                };\\n                readonly context: {\\n                    readonly variables: readonly [{\\n                        readonly identifier: \\"storedValue\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                        readonly pointer: {\\n                            readonly location: \\"storage\\";\\n                            readonly slot: 0;\\n                        };\\n                    }, {\\n                        readonly identifier: \\"localValue\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                        readonly pointer: {\\n                            readonly location: \\"stack\\";\\n                            readonly slot: 0;\\n                        };\\n                    }];\\n                };\\n            }, {\\n                readonly offset: 5;\\n                readonly operation: {\\n                    readonly mnemonic: \\"PUSH0\\";\\n                };\\n                readonly context: {\\n                    readonly variables: readonly [{\\n                        readonly identifier: \\"storedValue\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                        readonly pointer: {\\n                            readonly location: \\"storage\\";\\n                            readonly slot: 0;\\n                        };\\n                    }, {\\n                        readonly \\"<<\\": {\\n                            readonly identifier: \\"localValue\\";\\n                            readonly type: {\\n                                readonly kind: \\"uint\\";\\n                                readonly bits: 256;\\n                            };\\n                            readonly pointer: {\\n                                readonly location: \\"stack\\";\\n                                readonly slot: 0;\\n                            };\\n                        };\\n                        readonly pointer: {\\n                            readonly location: \\"stack\\";\\n                            readonly slot: 1;\\n                        };\\n                    }];\\n                };\\n            }, {\\n                readonly offset: 6;\\n                readonly operation: {\\n                    readonly mnemonic: \\"SSTORE\\";\\n                };\\n                readonly context: {\\n                    readonly variables: readonly [{\\n                        readonly identifier: \\"storedValue\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                        readonly pointer: {\\n                            readonly location: \\"storage\\";\\n                            readonly slot: 0;\\n                        };\\n                    }];\\n                };\\n            }];\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/base\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/base\\";\\n        readonly title: \\"ethdebug/format/type/base\\";\\n        readonly description: \\"Defines the minimally necessary schema for a data type. Types belong to a particular `class` (`\\\\\\"elementary\\\\\\"` or `\\\\\\"complex\\\\\\"`), and are further identified by a particular `kind`.\\";\\n        readonly type: \\"object\\";\\n        readonly oneOf: readonly [{\\n            readonly $ref: \\"#/$defs/ElementaryType\\";\\n        }, {\\n            readonly $ref: \\"#/$defs/ComplexType\\";\\n        }];\\n        readonly $defs: {\\n            readonly ElementaryType: {\\n                readonly title: \\"Base elementary type\\";\\n                readonly description: \\"Represents an elementary type (one that does not compose other types)\\";\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly class: {\\n                        readonly type: \\"string\\";\\n                        readonly const: \\"elementary\\";\\n                    };\\n                    readonly kind: {\\n                        readonly type: \\"string\\";\\n                    };\\n                    readonly contains: {\\n                        readonly not: {\\n                            readonly description: \\"Elementary types **must not** specify a `contains` field (to make it easier to discriminate elementary vs. complex)\\";\\n                        };\\n                    };\\n                };\\n                readonly required: readonly [\\"kind\\"];\\n                readonly examples: readonly [{\\n                    readonly kind: \\"uint\\";\\n                    readonly bits: 256;\\n                }];\\n            };\\n            readonly ComplexType: {\\n                readonly title: \\"Base complex type\\";\\n                readonly description: \\"Represents a complex type, one that composes other types (e.g., arrays, structs, mappings)\\";\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly class: {\\n                        readonly type: \\"string\\";\\n                        readonly const: \\"complex\\";\\n                        readonly description: \\"Indicates that this is a complex type\\";\\n                    };\\n                    readonly kind: {\\n                        readonly type: \\"string\\";\\n                        readonly description: \\"The specific kind of complex type, e.g., array or struct\\";\\n                    };\\n                    readonly contains: {\\n                        readonly title: \\"Complex type `contains` field\\";\\n                        readonly description: \\"Either a type wrapper, an array of type wrappers, or an object mapping to type wrappers.\\";\\n                        readonly oneOf: readonly [{\\n                            readonly $ref: \\"#/$defs/TypeWrapper\\";\\n                        }, {\\n                            readonly $ref: \\"#/$defs/TypeWrapperArray\\";\\n                        }, {\\n                            readonly $ref: \\"#/$defs/TypeWrapperObject\\";\\n                        }];\\n                    };\\n                };\\n                readonly required: readonly [\\"kind\\", \\"contains\\"];\\n                readonly examples: readonly [{\\n                    readonly kind: \\"array\\";\\n                    readonly contains: {\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                    };\\n                }, {\\n                    readonly kind: \\"struct\\";\\n                    readonly contains: readonly [{\\n                        readonly member: \\"x\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                    }, {\\n                        readonly member: \\"y\\";\\n                        readonly type: {\\n                            readonly kind: \\"uint\\";\\n                            readonly bits: 256;\\n                        };\\n                    }];\\n                }, {\\n                    readonly kind: \\"mapping\\";\\n                    readonly contains: {\\n                        readonly key: {\\n                            readonly type: {\\n                                readonly kind: \\"address\\";\\n                                readonly payable: true;\\n                            };\\n                        };\\n                        readonly value: {\\n                            readonly type: {\\n                                readonly kind: \\"uint\\";\\n                                readonly bits: 256;\\n                            };\\n                        };\\n                    };\\n                }];\\n            };\\n            readonly TypeWrapper: {\\n                readonly title: \\"{ \\\\\\"type\\\\\\": ... }\\";\\n                readonly description: \\"A wrapper around a type. Defines a `\\\\\\"type\\\\\\"` field that may include a full Type representation or a reference to a known Type by ID. Note that this schema permits additional properties on the same object.\\";\\n                readonly type: \\"object\\";\\n                readonly properties: {\\n                    readonly type: {\\n                        readonly oneOf: readonly [{\\n                            readonly $ref: \\"schema:ethdebug/format/type/base\\";\\n                        }, {\\n                            readonly $ref: \\"schema:ethdebug/format/type/reference\\";\\n                        }];\\n                    };\\n                };\\n                readonly required: readonly [\\"type\\"];\\n            };\\n            readonly TypeWrapperArray: {\\n                readonly title: \\"{ \\\\\\"type\\\\\\": ... }[]\\";\\n                readonly description: \\"A list of wrapped types, where the wrapper may add fields\\";\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"#/$defs/TypeWrapper\\";\\n                };\\n            };\\n            readonly TypeWrapperObject: {\\n                readonly title: \\"{ \\\\\\"key\\\\\\": { \\\\\\"type\\\\\\": ... }, ... }\\";\\n                readonly description: \\"A key-value mapping of wrapped types, where the wrapper may add fields\\";\\n                readonly type: \\"object\\";\\n                readonly additionalProperties: {\\n                    readonly $ref: \\"#/$defs/TypeWrapper\\";\\n                };\\n            };\\n        };\\n    };\\n    readonly \\"schema:ethdebug/format/type/complex/alias\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/complex/alias\\";\\n        readonly title: \\"ethdebug/format/type/complex/alias\\";\\n        readonly description: \\"Schema representing a type alias to another type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"complex\\";\\n            };\\n            readonly kind: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"alias\\";\\n            };\\n            readonly contains: {\\n                readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n            };\\n            readonly definition: {\\n                readonly $ref: \\"schema:ethdebug/format/type/definition\\";\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\", \\"contains\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"alias\\";\\n            readonly contains: {\\n                readonly type: {\\n                    readonly kind: \\"uint\\";\\n                    readonly bits: 256;\\n                };\\n            };\\n        }, {\\n            readonly kind: \\"alias\\";\\n            readonly contains: {\\n                readonly type: {\\n                    readonly kind: \\"array\\";\\n                    readonly contains: {\\n                        readonly type: {\\n                            readonly class: \\"elementary\\";\\n                            readonly kind: \\"super-uint\\";\\n                            readonly blits: -256;\\n                        };\\n                    };\\n                };\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/complex/array\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/complex/array\\";\\n        readonly title: \\"ethdebug/format/type/complex/array\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"complex\\";\\n            };\\n            readonly kind: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"array\\";\\n            };\\n            readonly contains: {\\n                readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\", \\"contains\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"array\\";\\n            readonly contains: {\\n                readonly type: {\\n                    readonly kind: \\"uint\\";\\n                    readonly bits: 256;\\n                };\\n            };\\n        }, {\\n            readonly kind: \\"array\\";\\n            readonly contains: {\\n                readonly type: {\\n                    readonly kind: \\"array\\";\\n                    readonly contains: {\\n                        readonly type: {\\n                            readonly class: \\"elementary\\";\\n                            readonly kind: \\"super-uint\\";\\n                            readonly blits: -256;\\n                        };\\n                    };\\n                };\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/complex/function\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/complex/function\\";\\n        readonly title: \\"ethdebug/format/type/complex/function\\";\\n        readonly description: \\"Schema for representing a function type.\\\\n\\\\nType representations must indicate whether they represent a function that is\\\\ncalled internally (within the semantics of the language) or a function that\\\\nis called externally (via EVM contract call semantics and the Solidity ABI).\\\\nInternal function types require the `\\\\\\"internal\\\\\\": true` field; external\\\\nfunction types require `\\\\\\"external\\\\\\": true`.\\\\n\\\\nNote that external function types may include a representation of the\\\\ncontract type that defines or provides this function as an external\\\\ninterface.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"complex\\";\\n            };\\n            readonly kind: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"function\\";\\n            };\\n            readonly contains: {\\n                readonly type: \\"object\\";\\n                readonly title: \\"Parameter and return types\\";\\n                readonly description: \\"Types this function type composes. Function types inherently compose\\\\ntwo groupings of types (an ordered list of parameter types and typically\\\\neither a return value or return parameters). Function types\' `contains`\\\\nfield is organized as a mapping of `parameters` types (a type wrapper for\\\\na tuple type) and an optional `returns` type (either a generic type\\\\nwrapper or a type wrapper for a tuple type).\\\\n\\\\nThis definition applies for both cases (internal and external function\\\\ntypes). Each of those specific types may expand this `contains` field\\\\nschema with other semantic details (such as an external function type\\\\nindicating the contract type from which it is exposed).\\\\n\\";\\n                readonly properties: {\\n                    readonly parameters: {\\n                        readonly $ref: \\"#/$defs/Parameters\\";\\n                    };\\n                    readonly returns: {\\n                        readonly type: \\"object\\";\\n                        readonly title: \\"Return type (or tuple of types)\\";\\n                        readonly description: \\"To accommodate languages differing in whether functions return single\\\\nvalues or lists of values, this field may be either a generic type\\\\nwrapper or explicitly defined as a type wrapper around a tuple type.\\\\n\\\\nDebuggers that implement this schema **should** be aware that\\\\nlanguages whose functions return sole values might return tuple\\\\ntypes. Resolving this ambiguity remains outside the scope of the\\\\nschema (but compilers **must** be consistent when representing\\\\nfunction types in this schema).\\\\n\\";\\n                        readonly anyOf: readonly [{\\n                            readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n                        }, {\\n                            readonly $ref: \\"#/$defs/Parameters\\";\\n                        }];\\n                    };\\n                };\\n                readonly required: readonly [\\"parameters\\"];\\n            };\\n            readonly definition: {\\n                readonly $ref: \\"schema:ethdebug/format/type/definition\\";\\n            };\\n        };\\n        readonly oneOf: readonly [{\\n            readonly type: \\"object\\";\\n            readonly title: \\"External function type\\";\\n            readonly properties: {\\n                readonly internal: {\\n                    readonly const: false;\\n                };\\n                readonly external: {\\n                    readonly const: true;\\n                };\\n                readonly contains: {\\n                    readonly type: \\"object\\";\\n                    readonly title: \\"Additional contents\\";\\n                    readonly properties: {\\n                        readonly contract: {\\n                            readonly type: \\"object\\";\\n                            readonly title: \\"Contract type providing external function\\";\\n                            readonly description: \\"A wrapper around the contract type that composes this external function type.\\";\\n                            readonly allOf: readonly [{\\n                                readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n                            }, {\\n                                readonly type: \\"object\\";\\n                                readonly title: \\"Contract type wrapper\\";\\n                                readonly properties: {\\n                                    readonly type: {\\n                                        readonly $ref: \\"schema:ethdebug/format/type/elementary/contract\\";\\n                                    };\\n                                };\\n                            }];\\n                        };\\n                    };\\n                };\\n            };\\n            readonly required: readonly [\\"external\\"];\\n        }, {\\n            readonly type: \\"object\\";\\n            readonly title: \\"Internal function type\\";\\n            readonly properties: {\\n                readonly internal: {\\n                    readonly const: true;\\n                };\\n                readonly external: {\\n                    readonly const: false;\\n                };\\n            };\\n            readonly required: readonly [\\"internal\\"];\\n        }];\\n        readonly examples: readonly [{\\n            readonly kind: \\"function\\";\\n            readonly internal: true;\\n            readonly definition: {\\n                readonly name: \\"increment\\";\\n            };\\n            readonly contains: {\\n                readonly parameters: {\\n                    readonly type: {\\n                        readonly kind: \\"tuple\\";\\n                        readonly contains: readonly [{\\n                            readonly name: \\"value\\";\\n                            readonly type: {\\n                                readonly kind: \\"uint\\";\\n                                readonly bits: 256;\\n                            };\\n                        }];\\n                    };\\n                };\\n                readonly returns: {\\n                    readonly type: {\\n                        readonly kind: \\"uint\\";\\n                        readonly bits: 256;\\n                    };\\n                };\\n            };\\n        }, {\\n            readonly kind: \\"function\\";\\n            readonly external: true;\\n            readonly definition: {\\n                readonly name: \\"withdraw\\";\\n            };\\n            readonly contains: {\\n                readonly contract: {\\n                    readonly type: {\\n                        readonly kind: \\"contract\\";\\n                        readonly payable: true;\\n                        readonly interface: true;\\n                        readonly definition: {\\n                            readonly name: \\"Bank\\";\\n                        };\\n                    };\\n                };\\n                readonly parameters: {\\n                    readonly type: {\\n                        readonly kind: \\"tuple\\";\\n                        readonly contains: readonly [{\\n                            readonly name: \\"beneficiary\\";\\n                            readonly type: {\\n                                readonly kind: \\"address\\";\\n                                readonly payable: true;\\n                            };\\n                        }, {\\n                            readonly name: \\"amount\\";\\n                            readonly type: {\\n                                readonly kind: \\"ufixed\\";\\n                                readonly bits: 128;\\n                                readonly places: 18;\\n                            };\\n                        }];\\n                    };\\n                };\\n                readonly returns: {\\n                    readonly type: {\\n                        readonly kind: \\"tuple\\";\\n                        readonly contains: readonly [];\\n                    };\\n                };\\n            };\\n        }];\\n        readonly $defs: {\\n            readonly Parameters: {\\n                readonly type: \\"object\\";\\n                readonly title: \\"Parameters\\";\\n                readonly description: \\"A type wrapper around a tuple of types. This schema uses a tuple type to represent an ordered list of types.\\";\\n                readonly allOf: readonly [{\\n                    readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n                }, {\\n                    readonly title: \\"Tuple type wrapper\\";\\n                    readonly type: \\"object\\";\\n                    readonly properties: {\\n                        readonly type: {\\n                            readonly $ref: \\"schema:ethdebug/format/type/complex/tuple\\";\\n                        };\\n                    };\\n                }];\\n            };\\n        };\\n    };\\n    readonly \\"schema:ethdebug/format/type/complex/mapping\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/complex/mapping\\";\\n        readonly title: \\"ethdebug/format/type/complex/mapping\\";\\n        readonly description: \\"Schema for representing mapping types\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"complex\\";\\n            };\\n            readonly kind: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"mapping\\";\\n            };\\n            readonly contains: {\\n                readonly type: \\"object\\";\\n                readonly title: \\"Mapping key/value types\\";\\n                readonly properties: {\\n                    readonly key: {\\n                        readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n                    };\\n                    readonly value: {\\n                        readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n                    };\\n                };\\n                readonly required: readonly [\\"key\\", \\"value\\"];\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\", \\"contains\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"mapping\\";\\n            readonly contains: {\\n                readonly key: {\\n                    readonly type: {\\n                        readonly kind: \\"address\\";\\n                    };\\n                };\\n                readonly value: {\\n                    readonly type: {\\n                        readonly kind: \\"uint\\";\\n                        readonly bits: 256;\\n                    };\\n                };\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/complex/struct\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/complex/struct\\";\\n        readonly title: \\"ethdebug/format/type/complex/struct\\";\\n        readonly description: \\"Schema for representing struct types\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"complex\\";\\n            };\\n            readonly kind: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"struct\\";\\n            };\\n            readonly contains: {\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"#/$defs/MemberField\\";\\n                };\\n            };\\n            readonly definition: {\\n                readonly $ref: \\"schema:ethdebug/format/type/definition\\";\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\", \\"contains\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"struct\\";\\n            readonly contains: readonly [{\\n                readonly name: \\"x\\";\\n                readonly type: {\\n                    readonly kind: \\"uint\\";\\n                    readonly bits: 128;\\n                };\\n            }, {\\n                readonly name: \\"y\\";\\n                readonly type: {\\n                    readonly kind: \\"uint\\";\\n                    readonly bits: 128;\\n                };\\n            }];\\n        }];\\n        readonly $defs: {\\n            readonly MemberField: {\\n                readonly type: \\"object\\";\\n                readonly title: \\"MemberField\\";\\n                readonly description: \\"A schema representing a member field inside a struct type. This is an **ethdebug/format/type/wrapper** with additional fields.\\";\\n                readonly allOf: readonly [{\\n                    readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n                }, {\\n                    readonly title: \\"Additional fields\\";\\n                    readonly description: \\"An object with optional `name` property for identifying named struct member fields. **Note** that this language does not specify that a struct must be consistent in its use of naming for all fields or none\\";\\n                    readonly type: \\"object\\";\\n                    readonly properties: {\\n                        readonly name: {\\n                            readonly type: \\"string\\";\\n                        };\\n                    };\\n                }];\\n            };\\n        };\\n    };\\n    readonly \\"schema:ethdebug/format/type/complex/tuple\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/complex/tuple\\";\\n        readonly title: \\"ethdebug/format/type/complex/tuple\\";\\n        readonly description: \\"Schema for representing tuple types\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"complex\\";\\n            };\\n            readonly kind: {\\n                readonly type: \\"string\\";\\n                readonly const: \\"tuple\\";\\n            };\\n            readonly contains: {\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"#/$defs/Element\\";\\n                };\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\", \\"contains\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"tuple\\";\\n            readonly contains: readonly [];\\n        }, {\\n            readonly kind: \\"tuple\\";\\n            readonly contains: readonly [{\\n                readonly name: \\"x\\";\\n                readonly type: {\\n                    readonly kind: \\"uint\\";\\n                    readonly bits: 128;\\n                };\\n            }, {\\n                readonly name: \\"y\\";\\n                readonly type: {\\n                    readonly kind: \\"uint\\";\\n                    readonly bits: 128;\\n                };\\n            }];\\n        }];\\n        readonly $defs: {\\n            readonly Element: {\\n                readonly type: \\"object\\";\\n                readonly title: \\"Element\\";\\n                readonly description: \\"An optionally named element type within a tuple. This is an **ethdebug/format/type/wrapper** with additional fields.\\";\\n                readonly allOf: readonly [{\\n                    readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n                }, {\\n                    readonly title: \\"Additional fields\\";\\n                    readonly type: \\"object\\";\\n                    readonly properties: {\\n                        readonly name: {\\n                            readonly type: \\"string\\";\\n                            readonly description: \\"For tuple types where positional element types are identified by name, this field **should** include this information.\\\\nThis schema makes no restriction on whether all-or-no elements have names, and so this field may be sparse across elements of the same tuple.\\";\\n                        };\\n                    };\\n                }];\\n            };\\n        };\\n    };\\n    readonly \\"schema:ethdebug/format/type/complex\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/complex\\";\\n        readonly title: \\"ethdebug/format/type/complex\\";\\n        readonly description: \\"Canonical representation of a complex type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly kind: {\\n                readonly $ref: \\"#/$defs/Kind\\";\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\"];\\n        readonly allOf: readonly [{\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"alias\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/complex/alias\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"tuple\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/complex/tuple\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"array\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/complex/array\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"mapping\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/complex/mapping\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"struct\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/complex/struct\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"function\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/complex/function\\";\\n            };\\n        }];\\n        readonly $defs: {\\n            readonly Kind: {\\n                readonly title: \\"Known complex kind\\";\\n                readonly description: \\"A schema for the values of `kind` reserved for known complex types included in ethdebug/format\\";\\n                readonly type: \\"string\\";\\n                readonly enum: readonly [\\"alias\\", \\"tuple\\", \\"array\\", \\"mapping\\", \\"struct\\", \\"function\\"];\\n            };\\n        };\\n    };\\n    readonly \\"schema:ethdebug/format/type/definition\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/definition\\";\\n        readonly title: \\"ethdebug/format/type/definition\\";\\n        readonly description: \\"Object containing name and location information for a type.\\\\n\\\\nThis schema does not require any particular field, but it **must** contain\\\\nat least one property.\\\\n\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly name: {\\n                readonly type: \\"string\\";\\n            };\\n            readonly location: {\\n                readonly $ref: \\"schema:ethdebug/format/materials/source-range\\";\\n            };\\n        };\\n        readonly anyOf: readonly [{\\n            readonly title: \\"Required `name`\\";\\n            readonly required: readonly [\\"name\\"];\\n        }, {\\n            readonly title: \\"Required `location`\\";\\n            readonly required: readonly [\\"location\\"];\\n        }];\\n        readonly examples: readonly [{\\n            readonly name: \\"Ballot\\";\\n            readonly location: {\\n                readonly source: {\\n                    readonly id: 5;\\n                };\\n                readonly range: {\\n                    readonly offset: 10;\\n                    readonly length: 56;\\n                };\\n            };\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary/address\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary/address\\";\\n        readonly title: \\"ethdebug/format/type/elementary/address\\";\\n        readonly description: \\"Schema describing the representation of an address type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly const: \\"elementary\\";\\n            };\\n            readonly kind: {\\n                readonly const: \\"address\\";\\n            };\\n            readonly payable: {\\n                readonly type: \\"boolean\\";\\n                readonly description: \\"If this field is omitted, this type represents an address whose payability is not known.\\";\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"address\\";\\n        }, {\\n            readonly kind: \\"address\\";\\n            readonly payable: true;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary/bool\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary/bool\\";\\n        readonly title: \\"ethdebug/format/type/elementary/bool\\";\\n        readonly description: \\"Schema describing the representation of the boolean type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly const: \\"elementary\\";\\n            };\\n            readonly kind: {\\n                readonly const: \\"bool\\";\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"bool\\";\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary/bytes\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary/bytes\\";\\n        readonly title: \\"ethdebug/format/type/elementary/bytes\\";\\n        readonly description: \\"Schema describing the representation of a type of bytes string (either dynamic or static)\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly const: \\"elementary\\";\\n            };\\n            readonly kind: {\\n                readonly const: \\"bytes\\";\\n            };\\n            readonly size: {\\n                readonly description: \\"The number of bytes in the bytes string. If this field is omitted, this type is the dynamic bytes string type.\\";\\n                readonly $ref: \\"schema:ethdebug/format/data/unsigned\\";\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"bytes\\";\\n            readonly size: 32;\\n        }, {\\n            readonly kind: \\"bytes\\";\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary/contract\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary/contract\\";\\n        readonly title: \\"ethdebug/format/type/elementary/contract\\";\\n        readonly description: \\"Schema describing the representation of a contract type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly const: \\"elementary\\";\\n            };\\n            readonly kind: {\\n                readonly const: \\"contract\\";\\n            };\\n            readonly payable: {\\n                readonly type: \\"boolean\\";\\n                readonly description: \\"If this field is omitted, this type represents an address whose payability is not known.\\";\\n            };\\n            readonly definition: {\\n                readonly $ref: \\"schema:ethdebug/format/type/definition\\";\\n            };\\n        };\\n        readonly oneOf: readonly [{\\n            readonly title: \\"Normal contract type\\";\\n            readonly properties: {\\n                readonly library: {\\n                    readonly const: false;\\n                };\\n                readonly interface: {\\n                    readonly const: false;\\n                };\\n            };\\n        }, {\\n            readonly title: \\"Contract library type\\";\\n            readonly properties: {\\n                readonly library: {\\n                    readonly const: true;\\n                    readonly description: \\"Indicates that this is a type representing a library\\";\\n                };\\n            };\\n            readonly required: readonly [\\"library\\"];\\n        }, {\\n            readonly title: \\"Contract interface type\\";\\n            readonly properties: {\\n                readonly interface: {\\n                    readonly const: true;\\n                    readonly description: \\"Indicates that this is a type representing an interface\\";\\n                };\\n            };\\n            readonly required: readonly [\\"interface\\"];\\n        }];\\n        readonly required: readonly [\\"kind\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"contract\\";\\n        }, {\\n            readonly kind: \\"contract\\";\\n            readonly library: false;\\n            readonly interface: false;\\n            readonly payable: true;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary/enum\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary/enum\\";\\n        readonly title: \\"ethdebug/format/type/elementary/enum\\";\\n        readonly description: \\"Schema describing the representation of an enumerated type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly const: \\"elementary\\";\\n            };\\n            readonly kind: {\\n                readonly const: \\"enum\\";\\n            };\\n            readonly values: {\\n                readonly description: \\"The allowed values of an enum. This format makes no restriction on which values are allowed here.\\";\\n                readonly type: \\"array\\";\\n                readonly items: true;\\n            };\\n            readonly definition: {\\n                readonly $ref: \\"schema:ethdebug/format/type/definition\\";\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\", \\"values\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"enum\\";\\n            readonly values: readonly [\\"A\\", \\"B\\", \\"C\\"];\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary/fixed\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary/fixed\\";\\n        readonly title: \\"ethdebug/format/type/elementary/fixed\\";\\n        readonly description: \\"Schema describing the representation of a signed fixed decimal type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly const: \\"elementary\\";\\n            };\\n            readonly kind: {\\n                readonly const: \\"fixed\\";\\n            };\\n            readonly bits: {\\n                readonly type: \\"integer\\";\\n                readonly multipleOf: 8;\\n                readonly minimum: 8;\\n                readonly maximum: 256;\\n            };\\n            readonly places: {\\n                readonly type: \\"integer\\";\\n                readonly description: \\"How many decimal places, implying that a raw value `v` of this type should be interpreted as `v / (10**places)`\\";\\n                readonly minimum: 1;\\n                readonly maximum: 80;\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\", \\"bits\\", \\"places\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"fixed\\";\\n            readonly bits: 256;\\n            readonly places: 10;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary/int\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary/int\\";\\n        readonly title: \\"ethdebug/format/type/elementary/int\\";\\n        readonly description: \\"Schema describing the representation of a signed integer type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly const: \\"elementary\\";\\n            };\\n            readonly kind: {\\n                readonly const: \\"int\\";\\n            };\\n            readonly bits: {\\n                readonly type: \\"integer\\";\\n                readonly multipleOf: 8;\\n                readonly minimum: 8;\\n                readonly maximum: 256;\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\", \\"bits\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"int\\";\\n            readonly bits: 256;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary/string\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary/string\\";\\n        readonly title: \\"ethdebug/format/type/elementary/string\\";\\n        readonly description: \\"Schema describing the representation of a string type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly const: \\"elementary\\";\\n            };\\n            readonly kind: {\\n                readonly const: \\"string\\";\\n            };\\n            readonly encoding: {\\n                readonly type: \\"string\\";\\n                readonly default: \\"utf-8\\";\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"string\\";\\n        }, {\\n            readonly kind: \\"string\\";\\n            readonly encoding: \\"utf-16\\";\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary/ufixed\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary/ufixed\\";\\n        readonly title: \\"ethdebug/format/type/elementary/ufixed\\";\\n        readonly description: \\"Schema describing the representation of an unsigned fixed decimal type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly const: \\"elementary\\";\\n            };\\n            readonly kind: {\\n                readonly const: \\"ufixed\\";\\n            };\\n            readonly bits: {\\n                readonly type: \\"integer\\";\\n                readonly multipleOf: 8;\\n                readonly minimum: 8;\\n                readonly maximum: 256;\\n            };\\n            readonly places: {\\n                readonly type: \\"integer\\";\\n                readonly description: \\"How many decimal places, implying that a raw value `v` of this type should be interpreted as `v / (10**places)`\\";\\n                readonly minimum: 1;\\n                readonly maximum: 80;\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\", \\"bits\\", \\"places\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"ufixed\\";\\n            readonly bits: 256;\\n            readonly places: 10;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary/uint\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary/uint\\";\\n        readonly title: \\"ethdebug/format/type/elementary/uint\\";\\n        readonly description: \\"Schema describing the representation of an unsigned integer type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly class: {\\n                readonly const: \\"elementary\\";\\n            };\\n            readonly kind: {\\n                readonly const: \\"uint\\";\\n            };\\n            readonly bits: {\\n                readonly type: \\"integer\\";\\n                readonly multipleOf: 8;\\n                readonly minimum: 8;\\n                readonly maximum: 256;\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\", \\"bits\\"];\\n        readonly examples: readonly [{\\n            readonly kind: \\"uint\\";\\n            readonly bits: 256;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/elementary\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/elementary\\";\\n        readonly title: \\"ethdebug/format/type/elementary\\";\\n        readonly description: \\"Canonical representation of an elementary type\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly kind: {\\n                readonly $ref: \\"#/$defs/Kind\\";\\n            };\\n        };\\n        readonly required: readonly [\\"kind\\"];\\n        readonly allOf: readonly [{\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"uint\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/elementary/uint\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"int\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/elementary/int\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"bool\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/elementary/bool\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"bytes\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/elementary/bytes\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"string\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/elementary/string\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"ufixed\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/elementary/ufixed\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"fixed\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/elementary/fixed\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"address\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/elementary/address\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"contract\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/elementary/contract\\";\\n            };\\n        }, {\\n            readonly if: {\\n                readonly properties: {\\n                    readonly kind: {\\n                        readonly const: \\"enum\\";\\n                    };\\n                };\\n            };\\n            readonly then: {\\n                readonly $ref: \\"schema:ethdebug/format/type/elementary/enum\\";\\n            };\\n        }];\\n        readonly $defs: {\\n            readonly Kind: {\\n                readonly title: \\"Known elementary kind\\";\\n                readonly description: \\"A schema for the values of `kind` reserved for known elementary types included in ethdebug/format\\";\\n                readonly type: \\"string\\";\\n                readonly enum: readonly [\\"uint\\", \\"int\\", \\"bool\\", \\"bytes\\", \\"string\\", \\"ufixed\\", \\"fixed\\", \\"address\\", \\"contract\\", \\"enum\\"];\\n            };\\n        };\\n    };\\n    readonly \\"schema:ethdebug/format/type/reference\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/reference\\";\\n        readonly title: \\"ethdebug/format/type/reference\\";\\n        readonly description: \\"A reference to a known type by ID\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly id: {\\n                readonly type: readonly [\\"string\\", \\"number\\"];\\n            };\\n        };\\n        readonly additionalProperties: false;\\n        readonly required: readonly [\\"id\\"];\\n        readonly examples: readonly [{\\n            readonly id: 5;\\n        }];\\n    };\\n    readonly \\"schema:ethdebug/format/type/wrapper\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type/wrapper\\";\\n        readonly title: \\"ethdebug/format/type/wrapper\\";\\n        readonly description: \\"A wrapper around a type. Defines a `\\\\\\"type\\\\\\"` field that may include a full Type representation or a reference to a known Type by ID. Note that this schema permits additional properties on the same object.\\";\\n        readonly type: \\"object\\";\\n        readonly properties: {\\n            readonly type: {\\n                readonly if: {\\n                    readonly required: readonly [\\"id\\"];\\n                };\\n                readonly then: {\\n                    readonly $ref: \\"schema:ethdebug/format/type/reference\\";\\n                };\\n                readonly else: {\\n                    readonly $ref: \\"schema:ethdebug/format/type\\";\\n                };\\n            };\\n        };\\n        readonly required: readonly [\\"type\\"];\\n        readonly examples: readonly [{\\n            readonly name: \\"beneficiary\\";\\n            readonly type: {\\n                readonly kind: \\"address\\";\\n                readonly payable: true;\\n            };\\n        }, {\\n            readonly type: {\\n                readonly id: \\"<opaque-id>\\";\\n            };\\n        }];\\n        readonly $defs: {\\n            readonly Array: {\\n                readonly title: \\"{ \\\\\\"type\\\\\\": ... }[]\\";\\n                readonly description: \\"A list of wrapped types, where the wrapper may add fields\\";\\n                readonly type: \\"array\\";\\n                readonly items: {\\n                    readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n                };\\n            };\\n            readonly Object: {\\n                readonly title: \\"{ \\\\\\"key\\\\\\": { \\\\\\"type\\\\\\": ... }, ... }\\";\\n                readonly description: \\"A key-value mapping of wrapped types, where the wrapper may add fields\\";\\n                readonly type: \\"object\\";\\n                readonly additionalProperties: {\\n                    readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n                };\\n            };\\n        };\\n    };\\n    readonly \\"schema:ethdebug/format/type\\": {\\n        readonly $schema: \\"https://json-schema.org/draft/2020-12/schema\\";\\n        readonly $id: \\"schema:ethdebug/format/type\\";\\n        readonly title: \\"ethdebug/format/type\\";\\n        readonly description: \\"Canonical representation for all types.\\";\\n        readonly type: \\"object\\";\\n        readonly if: {\\n            readonly type: \\"object\\";\\n            readonly title: \\"Known kind\\";\\n            readonly description: \\"If `kind` adheres to the set of known kinds defined by this format\\";\\n            readonly properties: {\\n                readonly kind: {\\n                    readonly anyOf: readonly [{\\n                        readonly $ref: \\"schema:ethdebug/format/type/elementary#/$defs/Kind\\";\\n                    }, {\\n                        readonly $ref: \\"schema:ethdebug/format/type/complex#/$defs/Kind\\";\\n                    }];\\n                };\\n            };\\n        };\\n        readonly then: {\\n            readonly type: \\"object\\";\\n            readonly title: \\"KnownType\\";\\n            readonly description: \\"Then the object must adhere to exactly one known kind of type\\";\\n            readonly allOf: readonly [{\\n                readonly if: {\\n                    readonly properties: {\\n                        readonly kind: {\\n                            readonly $ref: \\"schema:ethdebug/format/type/elementary#/$defs/Kind\\";\\n                        };\\n                    };\\n                };\\n                readonly then: {\\n                    readonly $ref: \\"schema:ethdebug/format/type/elementary\\";\\n                };\\n            }, {\\n                readonly if: {\\n                    readonly properties: {\\n                        readonly kind: {\\n                            readonly $ref: \\"schema:ethdebug/format/type/complex#/$defs/Kind\\";\\n                        };\\n                    };\\n                };\\n                readonly then: {\\n                    readonly $ref: \\"schema:ethdebug/format/type/complex\\";\\n                };\\n            }];\\n        };\\n        readonly else: {\\n            readonly type: \\"object\\";\\n            readonly description: \\"Else the object must be a valid **ethdebug/format/type/base** with additional constraints\\";\\n            readonly allOf: readonly [{\\n                readonly $ref: \\"schema:ethdebug/format/type/base\\";\\n            }, {\\n                readonly title: \\"Required `class` field\\";\\n                readonly required: readonly [\\"class\\"];\\n            }, {\\n                readonly title: \\"Specialized complex type `contains` field\\";\\n                readonly type: \\"object\\";\\n                readonly if: {\\n                    readonly description: \\"If this object is a complex type\\";\\n                    readonly properties: {\\n                        readonly class: {\\n                            readonly const: \\"complex\\";\\n                        };\\n                    };\\n                };\\n                readonly then: {\\n                    readonly description: \\"Then the `contains` field must adhere to **ethdebug/format/type/wrapper** schemas, not the **ethdebug/format/type/base** equivalent.\\\\n(i.e., these additional constraints must apply recursively)\\";\\n                    readonly properties: {\\n                        readonly contains: {\\n                            readonly oneOf: readonly [{\\n                                readonly $ref: \\"schema:ethdebug/format/type/wrapper\\";\\n                            }, {\\n                                readonly $ref: \\"schema:ethdebug/format/type/wrapper#/$defs/Array\\";\\n                            }, {\\n                                readonly $ref: \\"schema:ethdebug/format/type/wrapper#/$defs/Object\\";\\n                            }];\\n                        };\\n                    };\\n                };\\n            }];\\n        };\\n    };\\n};\\nexport type Schema<Id extends keyof typeof rawSchemas> = (typeof rawSchemas)[Id];\\nexport {};\\n//# sourceMappingURL=yamls.d.ts.map"},{"filePath":"../format/dist/src/types/index.d.ts","text":"export * from \\"./data\\";\\nexport * from \\"./materials\\";\\nexport * from \\"./type\\";\\nexport * from \\"./pointer\\";\\nexport * from \\"./program\\";\\n//# sourceMappingURL=index.d.ts.map"},{"filePath":"../format/dist/src/types/data/index.d.ts","text":"export declare namespace Data {\\n    type Value = Unsigned | Hex;\\n    const isValue: (value: unknown) => value is Value;\\n    type Unsigned = number;\\n    const isUnsigned: (value: unknown) => value is number;\\n    type Hex = string;\\n    const isHex: (value: unknown) => value is string;\\n}\\n//# sourceMappingURL=index.d.ts.map"},{"filePath":"../format/dist/src/types/materials/index.d.ts","text":"import { Data } from \\"../data\\";\\nexport declare namespace Materials {\\n    export type Id = number | string;\\n    export const isId: (value: unknown) => value is Id;\\n    export type Reference<O extends {\\n        id: Id;\\n    }> = OmitNever<OmitNever<{\\n        [K in keyof O]-?: K extends \\"id\\" ? O[K] : never;\\n    }> & (Reference.Type<O> extends string ? {\\n        type?: Reference.Type<O>;\\n    } : {\\n        type?: string;\\n    })>;\\n    export const isReference: <O extends {\\n        id: Id;\\n    }>(value: unknown) => value is OmitNever<OmitNever<{ [K in keyof O]-?: K extends \\"id\\" ? O[K] : never; }> & (Reference.Type<O> extends string ? {\\n        type?: Reference.Type<O>;\\n    } : {\\n        type?: string;\\n    })>;\\n    export function toReference<O extends {\\n        id: Id;\\n    }>(object: O): Reference<O>;\\n    type OmitNever<T> = {\\n        [K in keyof T as T[K] extends never ? never : K]: T[K];\\n    };\\n    export namespace Reference {\\n        export type Type<O extends {\\n            id: Id;\\n        }> = {\\n            [T in keyof Types]: O extends Types[T] ? T : never;\\n        }[keyof Types];\\n        type Types = {\\n            \\"compilation\\": Compilation;\\n            \\"source\\": Source;\\n        };\\n        export {};\\n    }\\n    export interface Compilation {\\n        id: Id;\\n        compiler: {\\n            name: string;\\n            version: string;\\n        };\\n        settings?: any;\\n        sources: Source[];\\n    }\\n    export const isCompilation: (value: unknown) => value is Compilation;\\n    export interface Source {\\n        id: Id;\\n        path: string;\\n        contents: string;\\n        encoding?: string;\\n        language: string;\\n    }\\n    export const isSource: (value: unknown) => value is Source;\\n    export interface SourceRange {\\n        compilation?: Reference<Compilation>;\\n        source: Reference<Source>;\\n        range?: {\\n            offset: Data.Value;\\n            length: Data.Value;\\n        };\\n    }\\n    export const isSourceRange: (value: unknown) => value is SourceRange;\\n    export {};\\n}\\n//# sourceMappingURL=index.d.ts.map"},{"filePath":"../format/dist/src/types/pointer/index.d.ts","text":"export { Pointer, isPointer } from \\"./pointer\\";\\n//# sourceMappingURL=index.d.ts.map"},{"filePath":"../format/dist/src/types/pointer/pointer.d.ts","text":"export type Pointer = Pointer.Region | Pointer.Collection;\\nexport declare const isPointer: (value: unknown) => value is Pointer;\\nexport declare namespace Pointer {\\n    type Identifier = string;\\n    const isIdentifier: (value: unknown) => value is string;\\n    type Region = Region.Stack | Region.Memory | Region.Storage | Region.Calldata | Region.Returndata | Region.Transient | Region.Code;\\n    const isRegion: (value: unknown) => value is Region;\\n    namespace Region {\\n        interface Base {\\n            name?: string;\\n            location: string;\\n        }\\n        const isBase: (value: unknown) => value is Base;\\n        type Name = Base[\\"name\\"];\\n        type Stack = Base & Scheme.Segment & {\\n            location: \\"stack\\";\\n        };\\n        const isStack: (value: unknown) => value is Stack;\\n        type Memory = Base & Scheme.Slice & {\\n            location: \\"memory\\";\\n        };\\n        const isMemory: (value: unknown) => value is Memory;\\n        type Storage = Base & Scheme.Segment & {\\n            location: \\"storage\\";\\n        };\\n        const isStorage: (value: unknown) => value is Storage;\\n        type Calldata = Base & Scheme.Slice & {\\n            location: \\"calldata\\";\\n        };\\n        const isCalldata: (value: unknown) => value is Calldata;\\n        type Returndata = Base & Scheme.Slice & {\\n            location: \\"returndata\\";\\n        };\\n        const isReturndata: (value: unknown) => value is Returndata;\\n        type Transient = Base & Scheme.Segment & {\\n            location: \\"transient\\";\\n        };\\n        const isTransient: (value: unknown) => value is Transient;\\n        type Code = Base & Scheme.Slice & {\\n            location: \\"code\\";\\n        };\\n        const isCode: (value: unknown) => value is Code;\\n    }\\n    namespace Scheme {\\n        interface Segment {\\n            slot: Expression;\\n            offset?: Expression;\\n            length?: Expression;\\n        }\\n        const isSegment: (value: unknown) => value is Segment;\\n        interface Slice {\\n            offset: Expression;\\n            length: Expression;\\n        }\\n        const isSlice: (value: unknown) => value is Slice;\\n    }\\n    type Collection = Collection.Group | Collection.List | Collection.Conditional | Collection.Scope | Collection.Reference;\\n    const isCollection: (value: unknown) => value is Collection;\\n    namespace Collection {\\n        interface Group {\\n            group: Pointer[];\\n        }\\n        const isGroup: (value: unknown) => value is Group;\\n        interface List {\\n            list: {\\n                count: Expression;\\n                each: Identifier;\\n                is: Pointer;\\n            };\\n        }\\n        const isList: (value: unknown) => value is List;\\n        interface Conditional {\\n            if: Expression;\\n            then: Pointer;\\n            else?: Pointer;\\n        }\\n        const isConditional: (value: unknown) => value is Conditional;\\n        interface Scope {\\n            define: {\\n                [identifier: string]: Expression;\\n            };\\n            in: Pointer;\\n        }\\n        const isScope: (value: unknown) => value is Scope;\\n        interface Reference {\\n            template: string;\\n        }\\n        const isReference: (value: unknown) => value is Reference;\\n    }\\n    type Expression = Expression.Literal | Expression.Constant | Expression.Variable | Expression.Arithmetic | Expression.Lookup | Expression.Read | Expression.Keccak256 | Expression.Resize;\\n    const isExpression: (value: unknown) => value is Expression;\\n    namespace Expression {\\n        type Literal = number | `0x${string}`;\\n        const isLiteral: (value: unknown) => value is Literal;\\n        type Constant = \\"$wordsize\\";\\n        const isConstant: (value: unknown) => value is \\"$wordsize\\";\\n        type Variable = string;\\n        const isVariable: (value: unknown) => value is string;\\n        type Arithmetic = Arithmetic.Sum | Arithmetic.Difference | Arithmetic.Product | Arithmetic.Quotient | Arithmetic.Remainder;\\n        const isArithmetic: (value: unknown) => value is Arithmetic;\\n        type Operands = Expression[];\\n        const isOperands: (value: unknown) => value is Expression[];\\n        namespace Arithmetic {\\n            type Operation = keyof Sum | keyof Difference | keyof Product | keyof Quotient | keyof Remainder;\\n            const isTwoOperands: (value: unknown) => value is [Expression, Expression];\\n            interface Sum {\\n                $sum: Expression[];\\n            }\\n            const isSum: (value: unknown) => value is Sum;\\n            interface Difference {\\n                $difference: [Expression, Expression];\\n            }\\n            const isDifference: (value: unknown) => value is Difference;\\n            interface Product {\\n                $product: Expression[];\\n            }\\n            const isProduct: (value: unknown) => value is Product;\\n            interface Quotient {\\n                $quotient: [Expression, Expression];\\n            }\\n            const isQuotient: (value: unknown) => value is Quotient;\\n            interface Remainder {\\n                $remainder: [Expression, Expression];\\n            }\\n            const isRemainder: (value: unknown) => value is Remainder;\\n        }\\n        type Reference = Identifier | \\"$this\\";\\n        const isReference: (value: unknown) => value is string;\\n        type Lookup = Lookup.Offset | Lookup.Length | Lookup.Slot;\\n        const isLookup: (value: unknown) => value is Lookup;\\n        namespace Lookup {\\n            type Operation = keyof Offset | keyof Length | keyof Slot;\\n            type ForOperation<O extends Operation> = Lookup & {\\n                [K in O]: any;\\n            };\\n            const propertyFrom: <O extends Operation>(operation: O) => \\"slot\\" | \\"offset\\" | \\"length\\";\\n            interface Offset {\\n                \\".offset\\": Reference;\\n            }\\n            const isOffset: (value: unknown) => value is Offset;\\n            interface Length {\\n                \\".length\\": Reference;\\n            }\\n            const isLength: (value: unknown) => value is Length;\\n            interface Slot {\\n                \\".slot\\": Reference;\\n            }\\n            const isSlot: (value: unknown) => value is Slot;\\n        }\\n        interface Read {\\n            $read: Reference;\\n        }\\n        const isRead: (value: unknown) => value is Read;\\n        interface Keccak256 {\\n            $keccak256: Expression[];\\n        }\\n        const isKeccak256: (value: unknown) => value is Keccak256;\\n        type Resize<N extends number = number> = Resize.ToNumber<N> | Resize.ToWordsize;\\n        const isResize: <N extends number>(value: unknown) => value is Resize<N>;\\n        namespace Resize {\\n            type ToNumber<N extends number> = {\\n                [K in `$sized${N}`]: Expression;\\n            };\\n            const isToNumber: <N extends number>(value: unknown) => value is ToNumber<N>;\\n            type ToWordsize = {\\n                $wordsized: Expression;\\n            };\\n            const isToWordsize: (value: unknown) => value is ToWordsize;\\n        }\\n    }\\n    interface Templates {\\n        [identifier: string]: Pointer.Template;\\n    }\\n    const isTemplates: (value: unknown) => value is Templates;\\n    interface Template {\\n        expect: string[];\\n        for: Pointer;\\n    }\\n    const isTemplate: (value: unknown) => value is Template;\\n}\\n//# sourceMappingURL=pointer.d.ts.map"},{"filePath":"../format/dist/src/types/program/context.d.ts","text":"import { Materials } from \\"../materials\\";\\nimport { Type } from \\"../type\\";\\nimport { Pointer } from \\"../pointer\\";\\nexport type Context = Context.Code | Context.Variables | Context.Remark | Context.Pick | Context.Gather | Context.Frame;\\nexport declare const isContext: (value: unknown) => value is Context;\\nexport declare namespace Context {\\n    interface Code {\\n        code: Materials.SourceRange;\\n    }\\n    const isCode: (value: unknown) => value is Code;\\n    interface Variables {\\n        variables: Variables.Variable[];\\n    }\\n    const isVariables: (value: unknown) => value is Variables;\\n    namespace Variables {\\n        interface Variable {\\n            identifier?: string;\\n            declaration?: Materials.SourceRange;\\n            type?: Type;\\n            pointer?: Pointer;\\n        }\\n        const isVariable: (value: unknown) => value is Variable;\\n    }\\n    interface Remark {\\n        remark: string;\\n    }\\n    const isRemark: (value: unknown) => value is Remark;\\n    interface Pick {\\n        pick: Context[];\\n    }\\n    const isPick: (value: unknown) => value is Pick;\\n    interface Gather {\\n        gather: Context[];\\n    }\\n    const isGather: (value: unknown) => value is Gather;\\n    interface Frame {\\n        frame: string;\\n    }\\n    const isFrame: (value: unknown) => value is Frame;\\n}\\n//# sourceMappingURL=context.d.ts.map"},{"filePath":"../format/dist/src/types/program/index.d.ts","text":"export { Program, isProgram } from \\"./program\\";\\n//# sourceMappingURL=index.d.ts.map"},{"filePath":"../format/dist/src/types/program/instruction.d.ts","text":"import { Data } from \\"../data\\";\\nimport { Context } from \\"./context\\";\\nexport interface Instruction {\\n    offset: Data.Value;\\n    context?: Context;\\n    operation?: Instruction.Operation;\\n}\\nexport declare const isInstruction: (value: unknown) => value is Instruction;\\nexport declare namespace Instruction {\\n    interface Operation {\\n        mnemonic: string;\\n        arguments?: Data.Value[];\\n    }\\n    const isOperation: (value: unknown) => value is Operation;\\n}\\n//# sourceMappingURL=instruction.d.ts.map"},{"filePath":"../format/dist/src/types/program/program.d.ts","text":"import { Materials } from \\"../materials\\";\\nimport { Context as _Context } from \\"./context\\";\\nimport { Instruction as _Instruction } from \\"./instruction\\";\\nexport interface Program {\\n    compilation?: Materials.Reference<Materials.Compilation>;\\n    contract: Program.Contract;\\n    environment: Program.Environment;\\n    context?: Program.Context;\\n    instructions: Program.Instruction[];\\n}\\nexport declare const isProgram: (value: unknown) => value is Program;\\nexport declare namespace Program {\\n    export import Context = _Context;\\n    const isContext: (value: unknown) => value is Context;\\n    export import Instruction = _Instruction;\\n    const isInstruction: (value: unknown) => value is Instruction;\\n    type Environment = \\"call\\" | \\"create\\";\\n    const isEnvironment: (value: unknown) => value is Environment;\\n    interface Contract {\\n        name?: string;\\n        definition: Materials.SourceRange;\\n    }\\n    const isContract: (value: unknown) => value is Contract;\\n}\\n//# sourceMappingURL=program.d.ts.map"},{"filePath":"../format/dist/src/types/type/base.d.ts","text":"export type Type = Elementary | Complex;\\nexport declare const isType: (value: unknown) => value is Type;\\nexport interface Elementary {\\n    class?: \\"elementary\\";\\n    kind: string;\\n}\\nexport declare const isElementary: (value: unknown) => value is Elementary;\\nexport interface Complex {\\n    class?: \\"complex\\";\\n    kind: string;\\n    contains: Wrapper | Wrapper[] | {\\n        [key: string]: Wrapper;\\n    };\\n}\\nexport declare const isComplex: (value: unknown) => value is Complex;\\nexport interface Wrapper {\\n    type: Type | {\\n        id: any;\\n    };\\n}\\nexport declare const isWrapper: (value: unknown) => value is Wrapper;\\n//# sourceMappingURL=base.d.ts.map"},{"filePath":"../format/dist/src/types/type/index.d.ts","text":"import { Data } from \\"../data\\";\\nimport { Materials } from \\"../materials\\";\\nimport * as _Base from \\"./base\\";\\nexport type Type = Type.Known | Type.Unknown;\\nexport declare const isType: (value: unknown) => value is Type;\\nexport declare namespace Type {\\n    export import Base = _Base;\\n    type Known = Elementary | Complex;\\n    const isKnown: (value: unknown) => value is Known;\\n    type Unknown = Base.Type & {\\n        class: Exclude<Base.Type[\\"class\\"], undefined>;\\n    };\\n    const isUnknown: (value: unknown) => value is Unknown;\\n    interface Wrapper {\\n        type: Type | {\\n            id: any;\\n        };\\n    }\\n    const isWrapper: (value: unknown) => value is Wrapper;\\n    type Elementary = Elementary.Uint | Elementary.Int | Elementary.Ufixed | Elementary.Fixed | Elementary.Bool | Elementary.Bytes | Elementary.String | Elementary.Address | Elementary.Contract | Elementary.Enum;\\n    const hasElementaryKind: (value: unknown) => value is {\\n        kind: Elementary[\\"kind\\"];\\n    };\\n    const isElementary: (value: unknown) => value is Elementary;\\n    namespace Elementary {\\n        interface Uint {\\n            class?: \\"elementary\\";\\n            kind: \\"uint\\";\\n            bits: number;\\n        }\\n        const isUint: (value: unknown) => value is Uint;\\n        interface Int {\\n            class?: \\"elementary\\";\\n            kind: \\"int\\";\\n            bits: number;\\n        }\\n        const isInt: (value: unknown) => value is Int;\\n        interface Ufixed {\\n            class?: \\"elementary\\";\\n            kind: \\"ufixed\\";\\n            bits: number;\\n            places: number;\\n        }\\n        const isUfixed: (value: unknown) => value is Ufixed;\\n        interface Fixed {\\n            class?: \\"elementary\\";\\n            kind: \\"fixed\\";\\n            bits: number;\\n            places: number;\\n        }\\n        const isFixed: (value: unknown) => value is Fixed;\\n        interface Bool {\\n            class?: \\"elementary\\";\\n            kind: \\"bool\\";\\n        }\\n        const isBool: (value: unknown) => value is Bool;\\n        interface Bytes {\\n            class?: \\"elementary\\";\\n            kind: \\"bytes\\";\\n            size?: Data.Unsigned;\\n        }\\n        const isBytes: (value: unknown) => value is Bytes;\\n        interface String {\\n            class?: \\"elementary\\";\\n            kind: \\"string\\";\\n            encoding?: string;\\n        }\\n        const isString: (value: unknown) => value is String;\\n        interface Address {\\n            class?: \\"elementary\\";\\n            kind: \\"address\\";\\n            payable?: boolean;\\n        }\\n        const isAddress: (value: unknown) => value is Address;\\n        interface Contract {\\n            class?: \\"elementary\\";\\n            kind: \\"contract\\";\\n            payable?: boolean;\\n            definition?: Definition;\\n        }\\n        const isContract: (value: unknown) => value is Contract;\\n        interface Enum {\\n            class?: \\"elementary\\";\\n            kind: \\"enum\\";\\n            values: any[];\\n            definition?: Definition;\\n        }\\n        const isEnum: (value: unknown) => value is Enum;\\n    }\\n    type Complex = Complex.Alias | Complex.Tuple | Complex.Array | Complex.Mapping | Complex.Struct;\\n    const hasComplexKind: (value: unknown) => value is {\\n        kind: Complex[\\"kind\\"];\\n    };\\n    const isComplex: (value: unknown) => value is Complex;\\n    namespace Complex {\\n        interface Alias {\\n            class?: \\"complex\\";\\n            kind: \\"alias\\";\\n            contains: Wrapper;\\n            definition?: Definition;\\n        }\\n        const isAlias: (value: unknown) => value is Alias;\\n        interface Tuple {\\n            class?: \\"complex\\";\\n            kind: \\"tuple\\";\\n            contains: (Wrapper & {\\n                name?: string;\\n            })[];\\n        }\\n        const isTuple: (value: unknown) => value is Tuple;\\n        interface Array {\\n            class?: \\"complex\\";\\n            kind: \\"array\\";\\n            contains: Wrapper;\\n        }\\n        const isArray: (value: unknown) => value is Array;\\n        interface Mapping {\\n            class?: \\"complex\\";\\n            kind: \\"mapping\\";\\n            contains: {\\n                key: Wrapper;\\n                value: Wrapper;\\n            };\\n        }\\n        const isMapping: (value: unknown) => value is Mapping;\\n        interface Struct {\\n            class?: \\"complex\\";\\n            kind: \\"struct\\";\\n            contains: (Wrapper & {\\n                name?: string;\\n            })[];\\n            definition?: Definition;\\n        }\\n        const isStruct: (value: unknown) => value is Struct;\\n    }\\n    interface Definition {\\n        name?: string;\\n        location?: Materials.SourceRange;\\n    }\\n    const isDefinition: (value: unknown) => value is Definition;\\n}\\nexport declare const mayHaveClass: <Class extends string>(object: object, class_: Class) => object is {\\n    class: Class;\\n};\\nexport declare const hasKind: <Kind extends string>(object: object, kind: Kind) => object is {\\n    kind: Kind;\\n};\\n//# sourceMappingURL=index.d.ts.map"}]}}}}}'),i=JSON.parse('{"defaultLocale":"en","locales":["en"],"path":"i18n","currentLocale":"en","localeConfigs":{"en":{"label":"English","direction":"ltr","htmlLang":"en","calendar":"gregory","path":"en"}}}');var s=t(57529);const l=JSON.parse('{"docusaurusVersion":"3.4.0","siteVersion":"0.1.0-0","pluginVersions":{"docusaurus-plugin-content-docs":{"type":"package","name":"@docusaurus/plugin-content-docs","version":"3.4.0"},"docusaurus-plugin-content-blog":{"type":"package","name":"@docusaurus/plugin-content-blog","version":"3.4.0"},"docusaurus-plugin-content-pages":{"type":"package","name":"@docusaurus/plugin-content-pages","version":"3.4.0"},"docusaurus-plugin-sitemap":{"type":"package","name":"@docusaurus/plugin-sitemap","version":"3.4.0"},"docusaurus-theme-classic":{"type":"package","name":"@docusaurus/theme-classic","version":"3.4.0"},"custom-resolve":{"type":"local"},"project-code-plugin":{"type":"project"},"docusaurus-json-schema-plugin":{"type":"package","name":"docusaurus-json-schema-plugin","version":"1.12.1"},"docusaurus-theme-github-codeblock":{"type":"package","name":"@saucelabs/theme-github-codeblock","version":"0.2.3"}}}');var c=t(52322);const d={siteConfig:a.default,siteMetadata:l,globalData:o,i18n:i,codeTranslations:s},u=r.createContext(d);function p(e){let{children:n}=e;return(0,c.jsx)(u.Provider,{value:d,children:n})}},63951:(e,n,t)=>{"use strict";t.d(n,{Z:()=>h});var r=t(2784),a=t(31263),o=t(69854),i=t(60958),s=t(76266),l=t(71313),c=t(52322);function d(e){let{error:n,tryAgain:t}=e;return(0,c.jsxs)("div",{style:{display:"flex",flexDirection:"column",justifyContent:"center",alignItems:"flex-start",minHeight:"100vh",width:"100%",maxWidth:"80ch",fontSize:"20px",margin:"0 auto",padding:"1rem"},children:[(0,c.jsx)("h1",{style:{fontSize:"3rem"},children:"This page crashed"}),(0,c.jsx)("button",{type:"button",onClick:t,style:{margin:"1rem 0",fontSize:"2rem",cursor:"pointer",borderRadius:20,padding:"1rem"},children:"Try again"}),(0,c.jsx)(u,{error:n})]})}function u(e){let{error:n}=e;const t=(0,i.getErrorCausalChain)(n).map((e=>e.message)).join("\n\nCause:\n");return(0,c.jsx)("p",{style:{whiteSpace:"pre-wrap"},children:t})}function p(e){let{children:n}=e;return(0,c.jsx)(l.z,{value:{plugin:{name:"docusaurus-core-error-boundary",id:"default"}},children:n})}function m(e){let{error:n,tryAgain:t}=e;return(0,c.jsx)(p,{children:(0,c.jsxs)(h,{fallback:()=>(0,c.jsx)(d,{error:n,tryAgain:t}),children:[(0,c.jsx)(o.Z,{children:(0,c.jsx)("title",{children:"Page Error"})}),(0,c.jsx)(s.Z,{children:(0,c.jsx)(d,{error:n,tryAgain:t})})]})})}const f=e=>(0,c.jsx)(m,{...e});class h extends r.Component{constructor(e){super(e),this.state={error:null}}componentDidCatch(e){a.Z.canUseDOM&&this.setState({error:e})}render(){const{children:e}=this.props,{error:n}=this.state;if(n){const e={error:n,tryAgain:()=>this.setState({error:null})};return(this.props.fallback??f)(e)}return e??null}}},31263:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const r="undefined"!=typeof window&&"document"in window&&"createElement"in window.document,a={canUseDOM:r,canUseEventListeners:r&&("addEventListener"in window||"attachEvent"in window),canUseIntersectionObserver:r&&"IntersectionObserver"in window,canUseViewport:r&&"screen"in window}},69854:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});t(2784);var r=t(72175),a=t(52322);function o(e){return(0,a.jsx)(r.ql,{...e})}},27718:(e,n,t)=>{"use strict";t.d(n,{Z:()=>m});var r=t(2784),a=t(47933),o=t(60958),i=t(37614),s=t(71344),l=t(31263),c=t(42530),d=t(90077),u=t(52322);function p(e,n){let{isNavLink:t,to:p,href:m,activeClassName:f,isActive:h,"data-noBrokenLinkCheck":y,autoAddBaseUrl:g=!0,...b}=e;const{siteConfig:v}=(0,i.Z)(),{trailingSlash:x,baseUrl:w}=v,k=v.future.experimental_router,{withBaseUrl:S}=(0,d.Cg)(),$=(0,c.Z)(),j=(0,r.useRef)(null);(0,r.useImperativeHandle)(n,(()=>j.current));const E=p||m;const C=(0,s.Z)(E),P=E?.replace("pathname://","");let _=void 0!==P?(T=P,g&&(e=>e.startsWith("/"))(T)?S(T):T):void 0;var T;"hash"===k&&_?.startsWith("./")&&(_=_?.slice(1)),_&&C&&(_=(0,o.applyTrailingSlash)(_,{trailingSlash:x,baseUrl:w}));const O=(0,r.useRef)(!1),A=t?a.OL:a.rU,R=l.Z.canUseIntersectionObserver,N=(0,r.useRef)(),I=()=>{O.current||null==_||(window.docusaurus.preload(_),O.current=!0)};(0,r.useEffect)((()=>(!R&&C&&null!=_&&window.docusaurus.prefetch(_),()=>{R&&N.current&&N.current.disconnect()})),[N,_,R,C]);const L=_?.startsWith("#")??!1,D=!b.target||"_self"===b.target,M=!_||!C||!D;return y||!L&&M||$.collectLink(_),b.id&&$.collectAnchor(b.id),M?(0,u.jsx)("a",{ref:j,href:_,...E&&!C&&{target:"_blank",rel:"noopener noreferrer"},...b}):(0,u.jsx)(A,{...b,onMouseEnter:I,onTouchStart:I,innerRef:e=>{j.current=e,R&&e&&C&&(N.current=new window.IntersectionObserver((n=>{n.forEach((n=>{e===n.target&&(n.isIntersecting||n.intersectionRatio>0)&&(N.current.unobserve(e),N.current.disconnect(),null!=_&&window.docusaurus.prefetch(_))}))})),N.current.observe(e))},to:_,...t&&{isActive:h,activeClassName:f}})}const m=r.forwardRef(p)},15594:(e,n,t)=>{"use strict";t.d(n,{Z:()=>r});const r=()=>null},1077:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c,translate:()=>l});var r=t(2784),a=t(52322);function o(e,n){const t=e.split(/(\{\w+\})/).map(((e,t)=>{if(t%2==1){const t=n?.[e.slice(1,-1)];if(void 0!==t)return t}return e}));return t.some((e=>(0,r.isValidElement)(e)))?t.map(((e,n)=>(0,r.isValidElement)(e)?r.cloneElement(e,{key:n}):e)).filter((e=>""!==e)):t.join("")}var i=t(57529);function s(e){let{id:n,message:t}=e;if(void 0===n&&void 0===t)throw new Error("Docusaurus translation declarations must have at least a translation id or a default translation message");return i[n??t]??t??n}function l(e,n){let{message:t,id:r}=e;return o(s({message:t,id:r}),n)}function c(e){let{children:n,id:t,values:r}=e;if(n&&"string"!=typeof n)throw console.warn("Illegal <Translate> children",n),new Error("The Docusaurus <Translate> component only accept simple string values");const i=s({message:n,id:t});return(0,a.jsx)(a.Fragment,{children:o(i,r)})}},78183:(e,n,t)=>{"use strict";t.d(n,{m:()=>r});const r="default"},71344:(e,n,t)=>{"use strict";function r(e){return/^(?:\w*:|\/\/)/.test(e)}function a(e){return void 0!==e&&!r(e)}t.d(n,{Z:()=>a,b:()=>r})},90077:(e,n,t)=>{"use strict";t.d(n,{Cg:()=>i,ZP:()=>s});var r=t(2784),a=t(37614),o=t(71344);function i(){const{siteConfig:e}=(0,a.Z)(),{baseUrl:n,url:t}=e,i=e.future.experimental_router,s=(0,r.useCallback)(((e,r)=>function(e){let{siteUrl:n,baseUrl:t,url:r,options:{forcePrependBaseUrl:a=!1,absolute:i=!1}={},router:s}=e;if(!r||r.startsWith("#")||(0,o.b)(r))return r;if("hash"===s)return r.startsWith("/")?`.${r}`:`./${r}`;if(a)return t+r.replace(/^\//,"");if(r===t.replace(/\/$/,""))return t;const l=r.startsWith(t)?r:t+r.replace(/^\//,"");return i?n+l:l}({siteUrl:t,baseUrl:n,url:e,options:r,router:i})),[t,n,i]);return{withBaseUrl:s}}function s(e,n){void 0===n&&(n={});const{withBaseUrl:t}=i();return t(e,n)}},42530:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});var r=t(2784);t(52322);const a=r.createContext({collectAnchor:()=>{},collectLink:()=>{}}),o=()=>(0,r.useContext)(a);function i(){return o()}},37614:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});var r=t(2784),a=t(16288);function o(){return(0,r.useContext)(a._)}},42408:(e,n,t)=>{"use strict";t.d(n,{OD:()=>o,eZ:()=>i});var r=t(37614),a=t(78183);function o(e,n){void 0===n&&(n={});const t=function(){const{globalData:e}=(0,r.Z)();return e}()[e];if(!t&&n.failfast)throw new Error(`Docusaurus plugin global data not found for "${e}" plugin.`);return t}function i(e,n,t){void 0===n&&(n=a.m),void 0===t&&(t={});const r=o(e),i=r?.[n];if(!i&&t.failfast)throw new Error(`Docusaurus plugin global data not found for "${e}" plugin with id "${n}".`);return i}},89741:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});var r=t(2784),a=t(60108);function o(){return(0,r.useContext)(a._)}},70164:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});var r=t(2784);const a=t(31263).Z.canUseDOM?r.useLayoutEffect:r.useEffect},20805:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const r=e=>"object"==typeof e&&!!e&&Object.keys(e).length>0;function a(e){const n={};return function e(t,a){Object.entries(t).forEach((t=>{let[o,i]=t;const s=a?`${a}.${o}`:o;r(i)?e(i,s):n[s]=i}))}(e),n}},71313:(e,n,t)=>{"use strict";t.d(n,{_:()=>o,z:()=>i});var r=t(2784),a=t(52322);const o=r.createContext(null);function i(e){let{children:n,value:t}=e;const i=r.useContext(o),s=(0,r.useMemo)((()=>function(e){let{parent:n,value:t}=e;if(!n){if(!t)throw new Error("Unexpected: no Docusaurus route context found");if(!("plugin"in t))throw new Error("Unexpected: Docusaurus topmost route context has no `plugin` attribute");return t}const r={...n.data,...t?.data};return{plugin:n.plugin,data:r}}({parent:i,value:t})),[i,t]);return(0,a.jsx)(o.Provider,{value:s,children:n})}},27415:(e,n,t)=>{"use strict";t.d(n,{Iw:()=>m,gA:()=>d,_r:()=>l,Jo:()=>f,zh:()=>c,yW:()=>p,gB:()=>u});var r=t(7267),a=t(42408);const o=e=>e.versions.find((e=>e.isLast));function i(e,n){const t=function(e,n){const t=o(e);return[...e.versions.filter((e=>e!==t)),t].find((e=>!!(0,r.LX)(n,{path:e.path,exact:!1,strict:!1})))}(e,n),a=t?.docs.find((e=>!!(0,r.LX)(n,{path:e.path,exact:!0,strict:!1})));return{activeVersion:t,activeDoc:a,alternateDocVersions:a?function(n){const t={};return e.versions.forEach((e=>{e.docs.forEach((r=>{r.id===n&&(t[e.name]=r)}))})),t}(a.id):{}}}const s={},l=()=>(0,a.OD)("docusaurus-plugin-content-docs")??s,c=e=>{try{return(0,a.eZ)("docusaurus-plugin-content-docs",e,{failfast:!0})}catch(n){throw new Error("You are using a feature of the Docusaurus docs plugin, but this plugin does not seem to be enabled"+("Default"===e?"":` (pluginId=${e}`),{cause:n})}};function d(e){void 0===e&&(e={});const n=l(),{pathname:t}=(0,r.TH)();return function(e,n,t){void 0===t&&(t={});const a=Object.entries(e).sort(((e,n)=>n[1].path.localeCompare(e[1].path))).find((e=>{let[,t]=e;return!!(0,r.LX)(n,{path:t.path,exact:!1,strict:!1})})),o=a?{pluginId:a[0],pluginData:a[1]}:void 0;if(!o&&t.failfast)throw new Error(`Can't find active docs plugin for "${n}" pathname, while it was expected to be found. Maybe you tried to use a docs feature that can only be used on a docs-related page? Existing docs plugin paths are: ${Object.values(e).map((e=>e.path)).join(", ")}`);return o}(n,t,e)}function u(e){return c(e).versions}function p(e){const n=c(e);return o(n)}function m(e){const n=c(e),{pathname:t}=(0,r.TH)();return i(n,t)}function f(e){const n=c(e),{pathname:t}=(0,r.TH)();return function(e,n){const t=o(e);return{latestDocSuggestion:i(e,n).alternateDocVersions[t.name],latestVersionSuggestion:t}}(n,t)}},80401:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t(92521),a=t.n(r);a().configure({showSpinner:!1});const o={onRouteUpdate(e){let{location:n,previousLocation:t}=e;if(t&&n.pathname!==t.pathname){const e=window.setTimeout((()=>{a().start()}),200);return()=>window.clearTimeout(e)}},onRouteDidUpdate(){a().done()}}},86120:(e,n,t)=>{"use strict";t.r(n);var r=t(16935),a=t(36809);!function(e){const{themeConfig:{prism:n}}=a.default,{additionalLanguages:r}=n;globalThis.Prism=e,r.forEach((e=>{"php"===e&&t(23502),t(97861)(`./prism-${e}`)})),delete globalThis.Prism}(r.p1)},83851:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});t(2784);var r=t(40489),a=t(1077),o=t(97683),i=t(27718),s=t(42530);const l={anchorWithStickyNavbar:"anchorWithStickyNavbar_fF9Z",anchorWithHideOnScrollNavbar:"anchorWithHideOnScrollNavbar_Yh18"};var c=t(52322);function d(e){let{as:n,id:t,...d}=e;const u=(0,s.Z)(),{navbar:{hideOnScroll:p}}=(0,o.L)();if("h1"===n||!t)return(0,c.jsx)(n,{...d,id:void 0});u.collectAnchor(t);const m=(0,a.translate)({id:"theme.common.headingLinkTitle",message:"Direct link to {heading}",description:"Title for link to heading"},{heading:"string"==typeof d.children?d.children:t});return(0,c.jsxs)(n,{...d,className:(0,r.Z)("anchor",p?l.anchorWithHideOnScrollNavbar:l.anchorWithStickyNavbar,d.className),id:t,children:[d.children,(0,c.jsx)(i.Z,{className:"hash-link",to:`#${t}`,"aria-label":m,title:m,children:"\u200b"})]})}},74442:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});t(2784);const r={iconExternalLink:"iconExternalLink_awgD"};var a=t(52322);function o(e){let{width:n=13.5,height:t=13.5}=e;return(0,a.jsx)("svg",{width:n,height:t,"aria-hidden":"true",viewBox:"0 0 24 24",className:r.iconExternalLink,children:(0,a.jsx)("path",{fill:"currentColor",d:"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"})})}},76266:(e,n,t)=>{"use strict";t.d(n,{Z:()=>fn});var r=t(2784),a=t(40489),o=t(63951),i=t(50328),s=t(7267),l=t(1077),c=t(12105),d=t(52322);const u="__docusaurus_skipToContent_fallback";function p(e){e.setAttribute("tabindex","-1"),e.focus(),e.removeAttribute("tabindex")}function m(){const e=(0,r.useRef)(null),{action:n}=(0,s.k6)(),t=(0,r.useCallback)((e=>{e.preventDefault();const n=document.querySelector("main:first-of-type")??document.getElementById(u);n&&p(n)}),[]);return(0,c.S)((t=>{let{location:r}=t;e.current&&!r.hash&&"PUSH"===n&&p(e.current)})),{containerRef:e,onClick:t}}const f=(0,l.translate)({id:"theme.common.skipToMainContent",description:"The skip to content label used for accessibility, allowing to rapidly navigate to main content with keyboard tab/enter navigation",message:"Skip to main content"});function h(e){const n=e.children??f,{containerRef:t,onClick:r}=m();return(0,d.jsx)("div",{ref:t,role:"region","aria-label":f,children:(0,d.jsx)("a",{...e,href:`#${u}`,onClick:r,children:n})})}var y=t(90211),g=t(9499);const b={skipToContent:"skipToContent_G6ar"};function v(){return(0,d.jsx)(h,{className:b.skipToContent})}var x=t(97683),w=t(13717);function k(e){let{width:n=21,height:t=21,color:r="currentColor",strokeWidth:a=1.2,className:o,...i}=e;return(0,d.jsx)("svg",{viewBox:"0 0 15 15",width:n,height:t,...i,children:(0,d.jsx)("g",{stroke:r,strokeWidth:a,children:(0,d.jsx)("path",{d:"M.75.75l13.5 13.5M14.25.75L.75 14.25"})})})}const S={closeButton:"closeButton_rfix"};function $(e){return(0,d.jsx)("button",{type:"button","aria-label":(0,l.translate)({id:"theme.AnnouncementBar.closeButtonAriaLabel",message:"Close",description:"The ARIA label for close button of announcement bar"}),...e,className:(0,a.Z)("clean-btn close",S.closeButton,e.className),children:(0,d.jsx)(k,{width:14,height:14,strokeWidth:3.1})})}const j={content:"content_L1uV"};function E(e){const{announcementBar:n}=(0,x.L)(),{content:t}=n;return(0,d.jsx)("div",{...e,className:(0,a.Z)(j.content,e.className),dangerouslySetInnerHTML:{__html:t}})}const C={announcementBar:"announcementBar_ncOr",announcementBarPlaceholder:"announcementBarPlaceholder_ajMw",announcementBarClose:"announcementBarClose_c9u4",announcementBarContent:"announcementBarContent__57G"};function P(){const{announcementBar:e}=(0,x.L)(),{isActive:n,close:t}=(0,w.n)();if(!n)return null;const{backgroundColor:r,textColor:a,isCloseable:o}=e;return(0,d.jsxs)("div",{className:C.announcementBar,style:{backgroundColor:r,color:a},role:"banner",children:[o&&(0,d.jsx)("div",{className:C.announcementBarPlaceholder}),(0,d.jsx)(E,{className:C.announcementBarContent}),o&&(0,d.jsx)($,{onClick:t,className:C.announcementBarClose})]})}var _=t(54313),T=t(24126);var O=t(6335),A=t(47548);const R=r.createContext(null);function N(e){let{children:n}=e;const t=function(){const e=(0,_.e)(),n=(0,A.HY)(),[t,a]=(0,r.useState)(!1),o=null!==n.component,i=(0,O.D9)(o);return(0,r.useEffect)((()=>{o&&!i&&a(!0)}),[o,i]),(0,r.useEffect)((()=>{o?e.shown||a(!0):a(!1)}),[e.shown,o]),(0,r.useMemo)((()=>[t,a]),[t])}();return(0,d.jsx)(R.Provider,{value:t,children:n})}function I(e){if(e.component){const n=e.component;return(0,d.jsx)(n,{...e.props})}}function L(){const e=(0,r.useContext)(R);if(!e)throw new O.i6("NavbarSecondaryMenuDisplayProvider");const[n,t]=e,a=(0,r.useCallback)((()=>t(!1)),[t]),o=(0,A.HY)();return(0,r.useMemo)((()=>({shown:n,hide:a,content:I(o)})),[a,o,n])}function D(e){let{header:n,primaryMenu:t,secondaryMenu:r}=e;const{shown:o}=L();return(0,d.jsxs)("div",{className:"navbar-sidebar",children:[n,(0,d.jsxs)("div",{className:(0,a.Z)("navbar-sidebar__items",{"navbar-sidebar__items--show-secondary":o}),children:[(0,d.jsx)("div",{className:"navbar-sidebar__item menu",children:t}),(0,d.jsx)("div",{className:"navbar-sidebar__item menu",children:r})]})]})}var M=t(60361),z=t(89741);function q(e){return(0,d.jsx)("svg",{viewBox:"0 0 24 24",width:24,height:24,...e,children:(0,d.jsx)("path",{fill:"currentColor",d:"M12,9c1.65,0,3,1.35,3,3s-1.35,3-3,3s-3-1.35-3-3S10.35,9,12,9 M12,7c-2.76,0-5,2.24-5,5s2.24,5,5,5s5-2.24,5-5 S14.76,7,12,7L12,7z M2,13l2,0c0.55,0,1-0.45,1-1s-0.45-1-1-1l-2,0c-0.55,0-1,0.45-1,1S1.45,13,2,13z M20,13l2,0c0.55,0,1-0.45,1-1 s-0.45-1-1-1l-2,0c-0.55,0-1,0.45-1,1S19.45,13,20,13z M11,2v2c0,0.55,0.45,1,1,1s1-0.45,1-1V2c0-0.55-0.45-1-1-1S11,1.45,11,2z M11,20v2c0,0.55,0.45,1,1,1s1-0.45,1-1v-2c0-0.55-0.45-1-1-1C11.45,19,11,19.45,11,20z M5.99,4.58c-0.39-0.39-1.03-0.39-1.41,0 c-0.39,0.39-0.39,1.03,0,1.41l1.06,1.06c0.39,0.39,1.03,0.39,1.41,0s0.39-1.03,0-1.41L5.99,4.58z M18.36,16.95 c-0.39-0.39-1.03-0.39-1.41,0c-0.39,0.39-0.39,1.03,0,1.41l1.06,1.06c0.39,0.39,1.03,0.39,1.41,0c0.39-0.39,0.39-1.03,0-1.41 L18.36,16.95z M19.42,5.99c0.39-0.39,0.39-1.03,0-1.41c-0.39-0.39-1.03-0.39-1.41,0l-1.06,1.06c-0.39,0.39-0.39,1.03,0,1.41 s1.03,0.39,1.41,0L19.42,5.99z M7.05,18.36c0.39-0.39,0.39-1.03,0-1.41c-0.39-0.39-1.03-0.39-1.41,0l-1.06,1.06 c-0.39,0.39-0.39,1.03,0,1.41s1.03,0.39,1.41,0L7.05,18.36z"})})}function F(e){return(0,d.jsx)("svg",{viewBox:"0 0 24 24",width:24,height:24,...e,children:(0,d.jsx)("path",{fill:"currentColor",d:"M9.37,5.51C9.19,6.15,9.1,6.82,9.1,7.5c0,4.08,3.32,7.4,7.4,7.4c0.68,0,1.35-0.09,1.99-0.27C17.45,17.19,14.93,19,12,19 c-3.86,0-7-3.14-7-7C5,9.07,6.81,6.55,9.37,5.51z M12,3c-4.97,0-9,4.03-9,9s4.03,9,9,9s9-4.03,9-9c0-0.46-0.04-0.92-0.1-1.36 c-0.98,1.37-2.58,2.26-4.4,2.26c-2.98,0-5.4-2.42-5.4-5.4c0-1.81,0.89-3.42,2.26-4.4C12.92,3.04,12.46,3,12,3L12,3z"})})}const U={toggle:"toggle_OLSw",toggleButton:"toggleButton_wYmb",darkToggleIcon:"darkToggleIcon_Yem1",lightToggleIcon:"lightToggleIcon_Sxwe",toggleButtonDisabled:"toggleButtonDisabled_vaDU"};function B(e){let{className:n,buttonClassName:t,value:r,onChange:o}=e;const i=(0,z.Z)(),s=(0,l.translate)({message:"Switch between dark and light mode (currently {mode})",id:"theme.colorToggle.ariaLabel",description:"The ARIA label for the navbar color mode toggle"},{mode:"dark"===r?(0,l.translate)({message:"dark mode",id:"theme.colorToggle.ariaLabel.mode.dark",description:"The name for the dark color mode"}):(0,l.translate)({message:"light mode",id:"theme.colorToggle.ariaLabel.mode.light",description:"The name for the light color mode"})});return(0,d.jsx)("div",{className:(0,a.Z)(U.toggle,n),children:(0,d.jsxs)("button",{className:(0,a.Z)("clean-btn",U.toggleButton,!i&&U.toggleButtonDisabled,t),type:"button",onClick:()=>o("dark"===r?"light":"dark"),disabled:!i,title:s,"aria-label":s,"aria-live":"polite",children:[(0,d.jsx)(q,{className:(0,a.Z)(U.toggleIcon,U.lightToggleIcon)}),(0,d.jsx)(F,{className:(0,a.Z)(U.toggleIcon,U.darkToggleIcon)})]})})}const V=r.memo(B),H={darkNavbarColorModeToggle:"darkNavbarColorModeToggle_wZ1H"};function W(e){let{className:n}=e;const t=(0,x.L)().navbar.style,r=(0,x.L)().colorMode.disableSwitch,{colorMode:a,setColorMode:o}=(0,M.I)();return r?null:(0,d.jsx)(V,{className:n,buttonClassName:"dark"===t?H.darkNavbarColorModeToggle:void 0,value:a,onChange:o})}var Z=t(51881);function K(){return(0,d.jsx)(Z.Z,{className:"navbar__brand",imageClassName:"navbar__logo",titleClassName:"navbar__title text--truncate"})}function G(){const e=(0,_.e)();return(0,d.jsx)("button",{type:"button","aria-label":(0,l.translate)({id:"theme.docs.sidebar.closeSidebarButtonAriaLabel",message:"Close navigation bar",description:"The ARIA label for close button of mobile sidebar"}),className:"clean-btn navbar-sidebar__close",onClick:()=>e.toggle(),children:(0,d.jsx)(k,{color:"var(--ifm-color-emphasis-600)"})})}function Y(){return(0,d.jsxs)("div",{className:"navbar-sidebar__brand",children:[(0,d.jsx)(K,{}),(0,d.jsx)(W,{className:"margin-right--md"}),(0,d.jsx)(G,{})]})}var J=t(27718),Q=t(90077),X=t(71344);function ee(e,n){return void 0!==e&&void 0!==n&&new RegExp(e,"gi").test(n)}var ne=t(74442);function te(e){let{activeBasePath:n,activeBaseRegex:t,to:r,href:a,label:o,html:i,isDropdownLink:s,prependBaseUrlToHref:l,...c}=e;const u=(0,Q.ZP)(r),p=(0,Q.ZP)(n),m=(0,Q.ZP)(a,{forcePrependBaseUrl:!0}),f=o&&a&&!(0,X.Z)(a),h=i?{dangerouslySetInnerHTML:{__html:i}}:{children:(0,d.jsxs)(d.Fragment,{children:[o,f&&(0,d.jsx)(ne.Z,{...s&&{width:12,height:12}})]})};return a?(0,d.jsx)(J.Z,{href:l?m:a,...c,...h}):(0,d.jsx)(J.Z,{to:u,isNavLink:!0,...(n||t)&&{isActive:(e,n)=>t?ee(t,n.pathname):n.pathname.startsWith(p)},...c,...h})}function re(e){let{className:n,isDropdownItem:t=!1,...r}=e;const o=(0,d.jsx)(te,{className:(0,a.Z)(t?"dropdown__link":"navbar__item navbar__link",n),isDropdownLink:t,...r});return t?(0,d.jsx)("li",{children:o}):o}function ae(e){let{className:n,isDropdownItem:t,...r}=e;return(0,d.jsx)("li",{className:"menu__list-item",children:(0,d.jsx)(te,{className:(0,a.Z)("menu__link",n),...r})})}function oe(e){let{mobile:n=!1,position:t,...r}=e;const a=n?ae:re;return(0,d.jsx)(a,{...r,activeClassName:r.activeClassName??(n?"menu__link--active":"navbar__link--active")})}var ie=t(28698),se=t(87661),le=t(37614);const ce={dropdownNavbarItemMobile:"dropdownNavbarItemMobile_yXZl"};function de(e,n){return e.some((e=>function(e,n){return!!(0,se.Mg)(e.to,n)||!!ee(e.activeBaseRegex,n)||!(!e.activeBasePath||!n.startsWith(e.activeBasePath))}(e,n)))}function ue(e){let{items:n,position:t,className:o,onClick:i,...s}=e;const l=(0,r.useRef)(null),[c,u]=(0,r.useState)(!1);return(0,r.useEffect)((()=>{const e=e=>{l.current&&!l.current.contains(e.target)&&u(!1)};return document.addEventListener("mousedown",e),document.addEventListener("touchstart",e),document.addEventListener("focusin",e),()=>{document.removeEventListener("mousedown",e),document.removeEventListener("touchstart",e),document.removeEventListener("focusin",e)}}),[l]),(0,d.jsxs)("div",{ref:l,className:(0,a.Z)("navbar__item","dropdown","dropdown--hoverable",{"dropdown--right":"right"===t,"dropdown--show":c}),children:[(0,d.jsx)(te,{"aria-haspopup":"true","aria-expanded":c,role:"button",href:s.to?void 0:"#",className:(0,a.Z)("navbar__link",o),...s,onClick:s.to?void 0:e=>e.preventDefault(),onKeyDown:e=>{"Enter"===e.key&&(e.preventDefault(),u(!c))},children:s.children??s.label}),(0,d.jsx)("ul",{className:"dropdown__menu",children:n.map(((e,n)=>(0,r.createElement)(je,{isDropdownItem:!0,activeClassName:"dropdown__link--active",...e,key:n})))})]})}function pe(e){let{items:n,className:t,position:o,onClick:i,...l}=e;const c=function(){const{siteConfig:{baseUrl:e}}=(0,le.Z)(),{pathname:n}=(0,s.TH)();return n.replace(e,"/")}(),u=de(n,c),{collapsed:p,toggleCollapsed:m,setCollapsed:f}=(0,ie.u)({initialState:()=>!u});return(0,r.useEffect)((()=>{u&&f(!u)}),[c,u,f]),(0,d.jsxs)("li",{className:(0,a.Z)("menu__list-item",{"menu__list-item--collapsed":p}),children:[(0,d.jsx)(te,{role:"button",className:(0,a.Z)(ce.dropdownNavbarItemMobile,"menu__link menu__link--sublist menu__link--sublist-caret",t),...l,onClick:e=>{e.preventDefault(),m()},children:l.children??l.label}),(0,d.jsx)(ie.z,{lazy:!0,as:"ul",className:"menu__list",collapsed:p,children:n.map(((e,n)=>(0,r.createElement)(je,{mobile:!0,isDropdownItem:!0,onClick:i,activeClassName:"menu__link--active",...e,key:n})))})]})}function me(e){let{mobile:n=!1,...t}=e;const r=n?pe:ue;return(0,d.jsx)(r,{...t})}var fe=t(55552);function he(e){let{width:n=20,height:t=20,...r}=e;return(0,d.jsx)("svg",{viewBox:"0 0 24 24",width:n,height:t,"aria-hidden":!0,...r,children:(0,d.jsx)("path",{fill:"currentColor",d:"M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z"})})}const ye="iconLanguage_xrmG";var ge=t(15594);const be={navbarSearchContainer:"navbarSearchContainer_bmvg"};function ve(e){let{children:n,className:t}=e;return(0,d.jsx)("div",{className:(0,a.Z)(t,be.navbarSearchContainer),children:n})}var xe=t(27415),we=t(38350);var ke=t(37949);const Se=e=>e.docs.find((n=>n.id===e.mainDocId));const $e={default:oe,localeDropdown:function(e){let{mobile:n,dropdownItemsBefore:t,dropdownItemsAfter:r,queryString:a="",...o}=e;const{i18n:{currentLocale:i,locales:c,localeConfigs:u}}=(0,le.Z)(),p=(0,fe.l)(),{search:m,hash:f}=(0,s.TH)(),h=[...t,...c.map((e=>{const t=`${`pathname://${p.createUrl({locale:e,fullyQualified:!1})}`}${m}${f}${a}`;return{label:u[e].label,lang:u[e].htmlLang,to:t,target:"_self",autoAddBaseUrl:!1,className:e===i?n?"menu__link--active":"dropdown__link--active":""}})),...r],y=n?(0,l.translate)({message:"Languages",id:"theme.navbar.mobileLanguageDropdown.label",description:"The label for the mobile language switcher dropdown"}):u[i].label;return(0,d.jsx)(me,{...o,mobile:n,label:(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(he,{className:ye}),y]}),items:h})},search:function(e){let{mobile:n,className:t}=e;return n?null:(0,d.jsx)(ve,{className:t,children:(0,d.jsx)(ge.Z,{})})},dropdown:me,html:function(e){let{value:n,className:t,mobile:r=!1,isDropdownItem:o=!1}=e;const i=o?"li":"div";return(0,d.jsx)(i,{className:(0,a.Z)({navbar__item:!r&&!o,"menu__list-item":r},t),dangerouslySetInnerHTML:{__html:n}})},doc:function(e){let{docId:n,label:t,docsPluginId:r,...a}=e;const{activeDoc:o}=(0,xe.Iw)(r),i=(0,we.vY)(n,r),s=o?.path===i?.path;return null===i||i.unlisted&&!s?null:(0,d.jsx)(oe,{exact:!0,...a,isActive:()=>s||!!o?.sidebar&&o.sidebar===i.sidebar,label:t??i.id,to:i.path})},docSidebar:function(e){let{sidebarId:n,label:t,docsPluginId:r,...a}=e;const{activeDoc:o}=(0,xe.Iw)(r),i=(0,we.oz)(n,r).link;if(!i)throw new Error(`DocSidebarNavbarItem: Sidebar with ID "${n}" doesn't have anything to be linked to.`);return(0,d.jsx)(oe,{exact:!0,...a,isActive:()=>o?.sidebar===n,label:t??i.label,to:i.path})},docsVersion:function(e){let{label:n,to:t,docsPluginId:r,...a}=e;const o=(0,we.lO)(r)[0],i=n??o.label,s=t??(e=>e.docs.find((n=>n.id===e.mainDocId)))(o).path;return(0,d.jsx)(oe,{...a,label:i,to:s})},docsVersionDropdown:function(e){let{mobile:n,docsPluginId:t,dropdownActiveClassDisabled:r,dropdownItemsBefore:a,dropdownItemsAfter:o,...i}=e;const{search:c,hash:u}=(0,s.TH)(),p=(0,xe.Iw)(t),m=(0,xe.gB)(t),{savePreferredVersionName:f}=(0,ke.J)(t),h=[...a,...m.map((e=>{const n=p.alternateDocVersions[e.name]??Se(e);return{label:e.label,to:`${n.path}${c}${u}`,isActive:()=>e===p.activeVersion,onClick:()=>f(e.name)}})),...o],y=(0,we.lO)(t)[0],g=n&&h.length>1?(0,l.translate)({id:"theme.navbar.mobileVersionsDropdown.label",message:"Versions",description:"The label for the navbar versions dropdown on mobile view"}):y.label,b=n&&h.length>1?void 0:Se(y).path;return h.length<=1?(0,d.jsx)(oe,{...i,mobile:n,label:g,to:b,isActive:r?()=>!1:void 0}):(0,d.jsx)(me,{...i,mobile:n,label:g,to:b,items:h,isActive:r?()=>!1:void 0})}};function je(e){let{type:n,...t}=e;const r=function(e,n){return e&&"default"!==e?e:"items"in n?"dropdown":"default"}(n,t),a=$e[r];if(!a)throw new Error(`No NavbarItem component found for type "${n}".`);return(0,d.jsx)(a,{...t})}function Ee(){const e=(0,_.e)(),n=(0,x.L)().navbar.items;return(0,d.jsx)("ul",{className:"menu__list",children:n.map(((n,t)=>(0,r.createElement)(je,{mobile:!0,...n,onClick:()=>e.toggle(),key:t})))})}function Ce(e){return(0,d.jsx)("button",{...e,type:"button",className:"clean-btn navbar-sidebar__back",children:(0,d.jsx)(l.default,{id:"theme.navbar.mobileSidebarSecondaryMenu.backButtonLabel",description:"The label of the back button to return to main menu, inside the mobile navbar sidebar secondary menu (notably used to display the docs sidebar)",children:"\u2190 Back to main menu"})})}function Pe(){const e=0===(0,x.L)().navbar.items.length,n=L();return(0,d.jsxs)(d.Fragment,{children:[!e&&(0,d.jsx)(Ce,{onClick:()=>n.hide()}),n.content]})}function _e(){const e=(0,_.e)();var n;return void 0===(n=e.shown)&&(n=!0),(0,r.useEffect)((()=>(document.body.style.overflow=n?"hidden":"visible",()=>{document.body.style.overflow="visible"})),[n]),e.shouldRender?(0,d.jsx)(D,{header:(0,d.jsx)(Y,{}),primaryMenu:(0,d.jsx)(Ee,{}),secondaryMenu:(0,d.jsx)(Pe,{})}):null}const Te={navbarHideable:"navbarHideable_bChn",navbarHidden:"navbarHidden_zsXl"};function Oe(e){return(0,d.jsx)("div",{role:"presentation",...e,className:(0,a.Z)("navbar-sidebar__backdrop",e.className)})}function Ae(e){let{children:n}=e;const{navbar:{hideOnScroll:t,style:o}}=(0,x.L)(),i=(0,_.e)(),{navbarRef:s,isNavbarVisible:u}=function(e){const[n,t]=(0,r.useState)(e),a=(0,r.useRef)(!1),o=(0,r.useRef)(0),i=(0,r.useCallback)((e=>{null!==e&&(o.current=e.getBoundingClientRect().height)}),[]);return(0,T.RF)(((n,r)=>{let{scrollY:i}=n;if(!e)return;if(i<o.current)return void t(!0);if(a.current)return void(a.current=!1);const s=r?.scrollY,l=document.documentElement.scrollHeight-o.current,c=window.innerHeight;s&&i>=s?t(!1):i+c<l&&t(!0)})),(0,c.S)((n=>{if(!e)return;const r=n.location.hash;if(r?document.getElementById(r.substring(1)):void 0)return a.current=!0,void t(!1);t(!0)})),{navbarRef:i,isNavbarVisible:n}}(t);return(0,d.jsxs)("nav",{ref:s,"aria-label":(0,l.translate)({id:"theme.NavBar.navAriaLabel",message:"Main",description:"The ARIA label for the main navigation"}),className:(0,a.Z)("navbar","navbar--fixed-top",t&&[Te.navbarHideable,!u&&Te.navbarHidden],{"navbar--dark":"dark"===o,"navbar--primary":"primary"===o,"navbar-sidebar--show":i.shown}),children:[n,(0,d.jsx)(Oe,{onClick:i.toggle}),(0,d.jsx)(_e,{})]})}var Re=t(60958);const Ne={errorBoundaryError:"errorBoundaryError_FiLL",errorBoundaryFallback:"errorBoundaryFallback_lv4I"};function Ie(e){return(0,d.jsx)("button",{type:"button",...e,children:(0,d.jsx)(l.default,{id:"theme.ErrorPageContent.tryAgain",description:"The label of the button to try again rendering when the React error boundary captures an error",children:"Try again"})})}function Le(e){let{error:n}=e;const t=(0,Re.getErrorCausalChain)(n).map((e=>e.message)).join("\n\nCause:\n");return(0,d.jsx)("p",{className:Ne.errorBoundaryError,children:t})}class De extends r.Component{componentDidCatch(e,n){throw this.props.onError(e,n)}render(){return this.props.children}}const Me="right";function ze(e){let{width:n=30,height:t=30,className:r,...a}=e;return(0,d.jsx)("svg",{className:r,width:n,height:t,viewBox:"0 0 30 30","aria-hidden":"true",...a,children:(0,d.jsx)("path",{stroke:"currentColor",strokeLinecap:"round",strokeMiterlimit:"10",strokeWidth:"2",d:"M4 7h22M4 15h22M4 23h22"})})}function qe(){const{toggle:e,shown:n}=(0,_.e)();return(0,d.jsx)("button",{onClick:e,"aria-label":(0,l.translate)({id:"theme.docs.sidebar.toggleSidebarButtonAriaLabel",message:"Toggle navigation bar",description:"The ARIA label for hamburger menu button of mobile navigation"}),"aria-expanded":n,className:"navbar__toggle clean-btn",type:"button",children:(0,d.jsx)(ze,{})})}const Fe={colorModeToggle:"colorModeToggle_Hg9V"};function Ue(e){let{items:n}=e;return(0,d.jsx)(d.Fragment,{children:n.map(((e,n)=>(0,d.jsx)(De,{onError:n=>new Error(`A theme navbar item failed to render.\nPlease double-check the following navbar item (themeConfig.navbar.items) of your Docusaurus config:\n${JSON.stringify(e,null,2)}`,{cause:n}),children:(0,d.jsx)(je,{...e})},n)))})}function Be(e){let{left:n,right:t}=e;return(0,d.jsxs)("div",{className:"navbar__inner",children:[(0,d.jsx)("div",{className:"navbar__items",children:n}),(0,d.jsx)("div",{className:"navbar__items navbar__items--right",children:t})]})}function Ve(){const e=(0,_.e)(),n=(0,x.L)().navbar.items,[t,r]=function(e){function n(e){return"left"===(e.position??Me)}return[e.filter(n),e.filter((e=>!n(e)))]}(n),a=n.find((e=>"search"===e.type));return(0,d.jsx)(Be,{left:(0,d.jsxs)(d.Fragment,{children:[!e.disabled&&(0,d.jsx)(qe,{}),(0,d.jsx)(K,{}),(0,d.jsx)(Ue,{items:t})]}),right:(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(Ue,{items:r}),(0,d.jsx)(W,{className:Fe.colorModeToggle}),!a&&(0,d.jsx)(ve,{children:(0,d.jsx)(ge.Z,{})})]})})}function He(){return(0,d.jsx)(Ae,{children:(0,d.jsx)(Ve,{})})}function We(e){let{item:n}=e;const{to:t,href:r,label:a,prependBaseUrlToHref:o,...i}=n,s=(0,Q.ZP)(t),l=(0,Q.ZP)(r,{forcePrependBaseUrl:!0});return(0,d.jsxs)(J.Z,{className:"footer__link-item",...r?{href:o?l:r}:{to:s},...i,children:[a,r&&!(0,X.Z)(r)&&(0,d.jsx)(ne.Z,{})]})}function Ze(e){let{item:n}=e;return n.html?(0,d.jsx)("li",{className:"footer__item",dangerouslySetInnerHTML:{__html:n.html}}):(0,d.jsx)("li",{className:"footer__item",children:(0,d.jsx)(We,{item:n})},n.href??n.to)}function Ke(e){let{column:n}=e;return(0,d.jsxs)("div",{className:"col footer__col",children:[(0,d.jsx)("div",{className:"footer__title",children:n.title}),(0,d.jsx)("ul",{className:"footer__items clean-list",children:n.items.map(((e,n)=>(0,d.jsx)(Ze,{item:e},n)))})]})}function Ge(e){let{columns:n}=e;return(0,d.jsx)("div",{className:"row footer__links",children:n.map(((e,n)=>(0,d.jsx)(Ke,{column:e},n)))})}function Ye(){return(0,d.jsx)("span",{className:"footer__link-separator",children:"\xb7"})}function Je(e){let{item:n}=e;return n.html?(0,d.jsx)("span",{className:"footer__link-item",dangerouslySetInnerHTML:{__html:n.html}}):(0,d.jsx)(We,{item:n})}function Qe(e){let{links:n}=e;return(0,d.jsx)("div",{className:"footer__links text--center",children:(0,d.jsx)("div",{className:"footer__links",children:n.map(((e,t)=>(0,d.jsxs)(r.Fragment,{children:[(0,d.jsx)(Je,{item:e}),n.length!==t+1&&(0,d.jsx)(Ye,{})]},t)))})})}function Xe(e){let{links:n}=e;return function(e){return"title"in e[0]}(n)?(0,d.jsx)(Ge,{columns:n}):(0,d.jsx)(Qe,{links:n})}var en=t(36087);const nn={footerLogoLink:"footerLogoLink_zxYv"};function tn(e){let{logo:n}=e;const{withBaseUrl:t}=(0,Q.Cg)(),r={light:t(n.src),dark:t(n.srcDark??n.src)};return(0,d.jsx)(en.Z,{className:(0,a.Z)("footer__logo",n.className),alt:n.alt,sources:r,width:n.width,height:n.height,style:n.style})}function rn(e){let{logo:n}=e;return n.href?(0,d.jsx)(J.Z,{href:n.href,className:nn.footerLogoLink,target:n.target,children:(0,d.jsx)(tn,{logo:n})}):(0,d.jsx)(tn,{logo:n})}function an(e){let{copyright:n}=e;return(0,d.jsx)("div",{className:"footer__copyright",dangerouslySetInnerHTML:{__html:n}})}function on(e){let{style:n,links:t,logo:r,copyright:o}=e;return(0,d.jsx)("footer",{className:(0,a.Z)("footer",{"footer--dark":"dark"===n}),children:(0,d.jsxs)("div",{className:"container container-fluid",children:[t,(r||o)&&(0,d.jsxs)("div",{className:"footer__bottom text--center",children:[r&&(0,d.jsx)("div",{className:"margin-bottom--sm",children:r}),o]})]})})}function sn(){const{footer:e}=(0,x.L)();if(!e)return null;const{copyright:n,links:t,logo:r,style:a}=e;return(0,d.jsx)(on,{style:a,links:t&&t.length>0&&(0,d.jsx)(Xe,{links:t}),logo:r&&(0,d.jsx)(rn,{logo:r}),copyright:n&&(0,d.jsx)(an,{copyright:n})})}const ln=r.memo(sn),cn=(0,O.Qc)([M.S,w.p,T.OC,ke.L5,i.VC,function(e){let{children:n}=e;return(0,d.jsx)(A.n2,{children:(0,d.jsx)(_.M,{children:(0,d.jsx)(N,{children:n})})})}]);function dn(e){let{children:n}=e;return(0,d.jsx)(cn,{children:n})}var un=t(83851);function pn(e){let{error:n,tryAgain:t}=e;return(0,d.jsx)("main",{className:"container margin-vert--xl",children:(0,d.jsx)("div",{className:"row",children:(0,d.jsxs)("div",{className:"col col--6 col--offset-3",children:[(0,d.jsx)(un.Z,{as:"h1",className:"hero__title",children:(0,d.jsx)(l.default,{id:"theme.ErrorPageContent.title",description:"The title of the fallback page when the page crashed",children:"This page crashed."})}),(0,d.jsx)("div",{className:"margin-vert--lg",children:(0,d.jsx)(Ie,{onClick:t,className:"button button--primary shadow--lw"})}),(0,d.jsx)("hr",{}),(0,d.jsx)("div",{className:"margin-vert--md",children:(0,d.jsx)(Le,{error:n})})]})})})}const mn={mainWrapper:"mainWrapper_UyTV"};function fn(e){const{children:n,noFooter:t,wrapperClassName:r,title:s,description:l}=e;return(0,g.t)(),(0,d.jsxs)(dn,{children:[(0,d.jsx)(i.d,{title:s,description:l}),(0,d.jsx)(v,{}),(0,d.jsx)(P,{}),(0,d.jsx)(He,{}),(0,d.jsx)("div",{id:u,className:(0,a.Z)(y.k.wrapper.main,mn.mainWrapper,r),children:(0,d.jsx)(o.Z,{fallback:e=>(0,d.jsx)(pn,{...e}),children:n})}),!t&&(0,d.jsx)(ln,{})]})}},51881:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});t(2784);var r=t(27718),a=t(90077),o=t(37614),i=t(97683),s=t(36087),l=t(52322);function c(e){let{logo:n,alt:t,imageClassName:r}=e;const o={light:(0,a.ZP)(n.src),dark:(0,a.ZP)(n.srcDark||n.src)},i=(0,l.jsx)(s.Z,{className:n.className,sources:o,height:n.height,width:n.width,alt:t,style:n.style});return r?(0,l.jsx)("div",{className:r,children:i}):i}function d(e){const{siteConfig:{title:n}}=(0,o.Z)(),{navbar:{title:t,logo:s}}=(0,i.L)(),{imageClassName:d,titleClassName:u,...p}=e,m=(0,a.ZP)(s?.href||"/"),f=t?"":n,h=s?.alt??f;return(0,l.jsxs)(r.Z,{to:m,...p,...s?.target&&{target:s.target},children:[s&&(0,l.jsx)(c,{logo:s,alt:h,imageClassName:d}),null!=t&&(0,l.jsx)("b",{className:u,children:t})]})}},54390:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});t(2784);var r=t(69854),a=t(52322);function o(e){let{locale:n,version:t,tag:o}=e;const i=n;return(0,a.jsxs)(r.Z,{children:[n&&(0,a.jsx)("meta",{name:"docusaurus_locale",content:n}),t&&(0,a.jsx)("meta",{name:"docusaurus_version",content:t}),o&&(0,a.jsx)("meta",{name:"docusaurus_tag",content:o}),i&&(0,a.jsx)("meta",{name:"docsearch:language",content:i}),t&&(0,a.jsx)("meta",{name:"docsearch:version",content:t}),o&&(0,a.jsx)("meta",{name:"docsearch:docusaurus_tag",content:o})]})}},36087:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var r=t(2784),a=t(40489),o=t(89741),i=t(60361);const s={themedComponent:"themedComponent_DHUr","themedComponent--light":"themedComponent--light_DIHH","themedComponent--dark":"themedComponent--dark_Bv2M"};var l=t(52322);function c(e){let{className:n,children:t}=e;const c=(0,o.Z)(),{colorMode:d}=(0,i.I)();return(0,l.jsx)(l.Fragment,{children:(c?"dark"===d?["dark"]:["light"]:["light","dark"]).map((e=>{const o=t({theme:e,className:(0,a.Z)(n,s.themedComponent,s[`themedComponent--${e}`])});return(0,l.jsx)(r.Fragment,{children:o},e)}))})}function d(e){const{sources:n,className:t,alt:r,...a}=e;return(0,l.jsx)(c,{className:t,children:e=>{let{theme:t,className:o}=e;return(0,l.jsx)("img",{src:n[t],alt:r,className:o,...a})}})}},28698:(e,n,t)=>{"use strict";t.d(n,{u:()=>c,z:()=>g});var r=t(2784),a=t(31263),o=t(70164),i=t(80936),s=t(52322);const l="ease-in-out";function c(e){let{initialState:n}=e;const[t,a]=(0,r.useState)(n??!1),o=(0,r.useCallback)((()=>{a((e=>!e))}),[]);return{collapsed:t,setCollapsed:a,toggleCollapsed:o}}const d={display:"none",overflow:"hidden",height:"0px"},u={display:"block",overflow:"visible",height:"auto"};function p(e,n){const t=n?d:u;e.style.display=t.display,e.style.overflow=t.overflow,e.style.height=t.height}function m(e){let{collapsibleRef:n,collapsed:t,animation:a}=e;const o=(0,r.useRef)(!1);(0,r.useEffect)((()=>{const e=n.current;function r(){const n=e.scrollHeight,t=a?.duration??function(e){if((0,i.n)())return 1;const n=e/36;return Math.round(10*(4+15*n**.25+n/5))}(n);return{transition:`height ${t}ms ${a?.easing??l}`,height:`${n}px`}}function s(){const n=r();e.style.transition=n.transition,e.style.height=n.height}if(!o.current)return p(e,t),void(o.current=!0);return e.style.willChange="height",function(){const n=requestAnimationFrame((()=>{t?(s(),requestAnimationFrame((()=>{e.style.height=d.height,e.style.overflow=d.overflow}))):(e.style.display="block",requestAnimationFrame((()=>{s()})))}));return()=>cancelAnimationFrame(n)}()}),[n,t,a])}function f(e){if(!a.Z.canUseDOM)return e?d:u}function h(e){let{as:n="div",collapsed:t,children:a,animation:o,onCollapseTransitionEnd:i,className:l,disableSSRStyle:c}=e;const d=(0,r.useRef)(null);return m({collapsibleRef:d,collapsed:t,animation:o}),(0,s.jsx)(n,{ref:d,style:c?void 0:f(t),onTransitionEnd:e=>{"height"===e.propertyName&&(p(d.current,t),i?.(t))},className:l,children:a})}function y(e){let{collapsed:n,...t}=e;const[a,i]=(0,r.useState)(!n),[l,c]=(0,r.useState)(n);return(0,o.Z)((()=>{n||i(!0)}),[n]),(0,o.Z)((()=>{a&&c(n)}),[a,n]),a?(0,s.jsx)(h,{...t,collapsed:l}):null}function g(e){let{lazy:n,...t}=e;const r=n?y:h;return(0,s.jsx)(r,{...t})}},13717:(e,n,t)=>{"use strict";t.d(n,{n:()=>h,p:()=>f});var r=t(2784),a=t(89741),o=t(37611),i=t(6335),s=t(97683),l=t(52322);const c=(0,o.WA)("docusaurus.announcement.dismiss"),d=(0,o.WA)("docusaurus.announcement.id"),u=()=>"true"===c.get(),p=e=>c.set(String(e)),m=r.createContext(null);function f(e){let{children:n}=e;const t=function(){const{announcementBar:e}=(0,s.L)(),n=(0,a.Z)(),[t,o]=(0,r.useState)((()=>!!n&&u()));(0,r.useEffect)((()=>{o(u())}),[]);const i=(0,r.useCallback)((()=>{p(!0),o(!0)}),[]);return(0,r.useEffect)((()=>{if(!e)return;const{id:n}=e;let t=d.get();"annoucement-bar"===t&&(t="announcement-bar");const r=n!==t;d.set(n),r&&p(!1),!r&&u()||o(!1)}),[e]),(0,r.useMemo)((()=>({isActive:!!e&&!t,close:i})),[e,t,i])}();return(0,l.jsx)(m.Provider,{value:t,children:n})}function h(){const e=(0,r.useContext)(m);if(!e)throw new i.i6("AnnouncementBarProvider");return e}},60361:(e,n,t)=>{"use strict";t.d(n,{I:()=>g,S:()=>y});var r=t(2784),a=t(31263),o=t(6335),i=t(37611),s=t(97683),l=t(52322);const c=r.createContext(void 0),d="theme",u=(0,i.WA)(d),p={light:"light",dark:"dark"},m=e=>e===p.dark?p.dark:p.light,f=e=>a.Z.canUseDOM?m(document.documentElement.getAttribute("data-theme")):m(e),h=e=>{u.set(m(e))};function y(e){let{children:n}=e;const t=function(){const{colorMode:{defaultMode:e,disableSwitch:n,respectPrefersColorScheme:t}}=(0,s.L)(),[a,o]=(0,r.useState)(f(e));(0,r.useEffect)((()=>{n&&u.del()}),[n]);const i=(0,r.useCallback)((function(n,r){void 0===r&&(r={});const{persist:a=!0}=r;n?(o(n),a&&h(n)):(o(t?window.matchMedia("(prefers-color-scheme: dark)").matches?p.dark:p.light:e),u.del())}),[t,e]);(0,r.useEffect)((()=>{document.documentElement.setAttribute("data-theme",m(a))}),[a]),(0,r.useEffect)((()=>{if(n)return;const e=e=>{if(e.key!==d)return;const n=u.get();null!==n&&i(m(n))};return window.addEventListener("storage",e),()=>window.removeEventListener("storage",e)}),[n,i]);const l=(0,r.useRef)(!1);return(0,r.useEffect)((()=>{if(n&&!t)return;const e=window.matchMedia("(prefers-color-scheme: dark)"),r=()=>{window.matchMedia("print").matches||l.current?l.current=window.matchMedia("print").matches:i(null)};return e.addListener(r),()=>e.removeListener(r)}),[i,n,t]),(0,r.useMemo)((()=>({colorMode:a,setColorMode:i,get isDarkTheme(){return a===p.dark},setLightTheme(){i(p.light)},setDarkTheme(){i(p.dark)}})),[a,i])}();return(0,l.jsx)(c.Provider,{value:t,children:n})}function g(){const e=(0,r.useContext)(c);if(null==e)throw new o.i6("ColorModeProvider","Please see https://docusaurus.io/docs/api/themes/configuration#use-color-mode.");return e}},37949:(e,n,t)=>{"use strict";t.d(n,{J:()=>v,L5:()=>g});var r=t(2784),a=t(27415),o=t(78183),i=t(97683),s=t(38350),l=t(6335),c=t(37611),d=t(52322);const u=e=>`docs-preferred-version-${e}`,p={save:(e,n,t)=>{(0,c.WA)(u(e),{persistence:n}).set(t)},read:(e,n)=>(0,c.WA)(u(e),{persistence:n}).get(),clear:(e,n)=>{(0,c.WA)(u(e),{persistence:n}).del()}},m=e=>Object.fromEntries(e.map((e=>[e,{preferredVersionName:null}])));const f=r.createContext(null);function h(){const e=(0,a._r)(),n=(0,i.L)().docs.versionPersistence,t=(0,r.useMemo)((()=>Object.keys(e)),[e]),[o,s]=(0,r.useState)((()=>m(t)));(0,r.useEffect)((()=>{s(function(e){let{pluginIds:n,versionPersistence:t,allDocsData:r}=e;function a(e){const n=p.read(e,t);return r[e].versions.some((e=>e.name===n))?{preferredVersionName:n}:(p.clear(e,t),{preferredVersionName:null})}return Object.fromEntries(n.map((e=>[e,a(e)])))}({allDocsData:e,versionPersistence:n,pluginIds:t}))}),[e,n,t]);return[o,(0,r.useMemo)((()=>({savePreferredVersion:function(e,t){p.save(e,n,t),s((n=>({...n,[e]:{preferredVersionName:t}})))}})),[n])]}function y(e){let{children:n}=e;const t=h();return(0,d.jsx)(f.Provider,{value:t,children:n})}function g(e){let{children:n}=e;return s.cE?(0,d.jsx)(y,{children:n}):(0,d.jsx)(d.Fragment,{children:n})}function b(){const e=(0,r.useContext)(f);if(!e)throw new l.i6("DocsPreferredVersionContextProvider");return e}function v(e){void 0===e&&(e=o.m);const n=(0,a.zh)(e),[t,i]=b(),{preferredVersionName:s}=t[e];return{preferredVersion:n.versions.find((e=>e.name===s))??null,savePreferredVersionName:(0,r.useCallback)((n=>{i.savePreferredVersion(e,n)}),[i,e])}}},4228:(e,n,t)=>{"use strict";t.d(n,{V:()=>c,b:()=>l});var r=t(2784),a=t(6335),o=t(52322);const i=Symbol("EmptyContext"),s=r.createContext(i);function l(e){let{children:n,name:t,items:a}=e;const i=(0,r.useMemo)((()=>t&&a?{name:t,items:a}:null),[t,a]);return(0,o.jsx)(s.Provider,{value:i,children:n})}function c(){const e=(0,r.useContext)(s);if(e===i)throw new a.i6("DocsSidebarProvider");return e}},95663:(e,n,t)=>{"use strict";t.d(n,{E:()=>l,q:()=>s});var r=t(2784),a=t(6335),o=t(52322);const i=r.createContext(null);function s(e){let{children:n,version:t}=e;return(0,o.jsx)(i.Provider,{value:t,children:n})}function l(){const e=(0,r.useContext)(i);if(null===e)throw new a.i6("DocsVersionProvider");return e}},54313:(e,n,t)=>{"use strict";t.d(n,{M:()=>p,e:()=>m});var r=t(2784),a=t(47548),o=t(57963),i=t(32424),s=t(97683),l=t(6335),c=t(52322);const d=r.createContext(void 0);function u(){const e=function(){const e=(0,a.HY)(),{items:n}=(0,s.L)().navbar;return 0===n.length&&!e.component}(),n=(0,o.i)(),t=!e&&"mobile"===n,[l,c]=(0,r.useState)(!1);(0,i.Rb)((()=>{if(l)return c(!1),!1}));const d=(0,r.useCallback)((()=>{c((e=>!e))}),[]);return(0,r.useEffect)((()=>{"desktop"===n&&c(!1)}),[n]),(0,r.useMemo)((()=>({disabled:e,shouldRender:t,toggle:d,shown:l})),[e,t,d,l])}function p(e){let{children:n}=e;const t=u();return(0,c.jsx)(d.Provider,{value:t,children:n})}function m(){const e=r.useContext(d);if(void 0===e)throw new l.i6("NavbarMobileSidebarProvider");return e}},47548:(e,n,t)=>{"use strict";t.d(n,{HY:()=>l,Zo:()=>c,n2:()=>s});var r=t(2784),a=t(6335),o=t(52322);const i=r.createContext(null);function s(e){let{children:n}=e;const t=(0,r.useState)({component:null,props:null});return(0,o.jsx)(i.Provider,{value:t,children:n})}function l(){const e=(0,r.useContext)(i);if(!e)throw new a.i6("NavbarSecondaryMenuContentProvider");return e[0]}function c(e){let{component:n,props:t}=e;const o=(0,r.useContext)(i);if(!o)throw new a.i6("NavbarSecondaryMenuContentProvider");const[,s]=o,l=(0,a.Ql)(t);return(0,r.useEffect)((()=>{s({component:n,props:l})}),[s,n,l]),(0,r.useEffect)((()=>()=>s({component:null,props:null})),[s]),null}},9499:(e,n,t)=>{"use strict";t.d(n,{h:()=>a,t:()=>o});var r=t(2784);const a="navigation-with-keyboard";function o(){(0,r.useEffect)((()=>{function e(e){"keydown"===e.type&&"Tab"===e.key&&document.body.classList.add(a),"mousedown"===e.type&&document.body.classList.remove(a)}return document.addEventListener("keydown",e),document.addEventListener("mousedown",e),()=>{document.body.classList.remove(a),document.removeEventListener("keydown",e),document.removeEventListener("mousedown",e)}}),[])}},57963:(e,n,t)=>{"use strict";t.d(n,{i:()=>s});var r=t(2784),a=t(31263);const o={desktop:"desktop",mobile:"mobile",ssr:"ssr"},i=996;function s(e){let{desktopBreakpoint:n=i}=void 0===e?{}:e;const[t,s]=(0,r.useState)((()=>"ssr"));return(0,r.useEffect)((()=>{function e(){s(function(e){if(!a.Z.canUseDOM)throw new Error("getWindowSize() should only be called after React hydration");return window.innerWidth>e?o.desktop:o.mobile}(n))}return e(),window.addEventListener("resize",e),()=>{window.removeEventListener("resize",e)}}),[n]),t}},90211:(e,n,t)=>{"use strict";t.d(n,{k:()=>r});const r={page:{blogListPage:"blog-list-page",blogPostPage:"blog-post-page",blogTagsListPage:"blog-tags-list-page",blogTagPostListPage:"blog-tags-post-list-page",docsDocPage:"docs-doc-page",docsTagsListPage:"docs-tags-list-page",docsTagDocListPage:"docs-tags-doc-list-page",mdxPage:"mdx-page"},wrapper:{main:"main-wrapper",blogPages:"blog-wrapper",docsPages:"docs-wrapper",mdxPages:"mdx-wrapper"},common:{editThisPage:"theme-edit-this-page",lastUpdated:"theme-last-updated",backToTopButton:"theme-back-to-top-button",codeBlock:"theme-code-block",admonition:"theme-admonition",unlistedBanner:"theme-unlisted-banner",admonitionType:e=>`theme-admonition-${e}`},layout:{},docs:{docVersionBanner:"theme-doc-version-banner",docVersionBadge:"theme-doc-version-badge",docBreadcrumbs:"theme-doc-breadcrumbs",docMarkdown:"theme-doc-markdown",docTocMobile:"theme-doc-toc-mobile",docTocDesktop:"theme-doc-toc-desktop",docFooter:"theme-doc-footer",docFooterTagsRow:"theme-doc-footer-tags-row",docFooterEditMetaRow:"theme-doc-footer-edit-meta-row",docSidebarContainer:"theme-doc-sidebar-container",docSidebarMenu:"theme-doc-sidebar-menu",docSidebarItemCategory:"theme-doc-sidebar-item-category",docSidebarItemLink:"theme-doc-sidebar-item-link",docSidebarItemCategoryLevel:e=>`theme-doc-sidebar-item-category-level-${e}`,docSidebarItemLinkLevel:e=>`theme-doc-sidebar-item-link-level-${e}`},blog:{blogFooterTagsRow:"theme-blog-footer-tags-row",blogFooterEditMetaRow:"theme-blog-footer-edit-meta-row"},pages:{pageFooterEditMetaRow:"theme-pages-footer-edit-meta-row"}}},80936:(e,n,t)=>{"use strict";function r(){return window.matchMedia("(prefers-reduced-motion: reduce)").matches}t.d(n,{n:()=>r})},38350:(e,n,t)=>{"use strict";t.d(n,{LM:()=>f,MN:()=>C,SN:()=>E,_F:()=>b,cE:()=>p,f:()=>x,jA:()=>h,lO:()=>S,oz:()=>$,s1:()=>k,vY:()=>j,xz:()=>m});var r=t(2784),a=t(7267),o=t(9702),i=t(27415),s=t(37949),l=t(95663),c=t(4228),d=t(42244),u=t(87661);const p=!!i._r;function m(e){const n=(0,l.E)();if(!e)return;const t=n.docs[e];if(!t)throw new Error(`no version doc found by id=${e}`);return t}function f(e){return"link"!==e.type||e.unlisted?"category"===e.type?function(e){if(e.href&&!e.linkUnlisted)return e.href;for(const n of e.items){const e=f(n);if(e)return e}}(e):void 0:e.href}function h(){const{pathname:e}=(0,a.TH)(),n=(0,c.V)();if(!n)throw new Error("Unexpected: cant find current sidebar in context");const t=w({sidebarItems:n.items,pathname:e,onlyCategories:!0}).slice(-1)[0];if(!t)throw new Error(`${e} is not associated with a category. useCurrentSidebarCategory() should only be used on category index pages.`);return t}const y=(e,n)=>void 0!==e&&(0,u.Mg)(e,n),g=(e,n)=>e.some((e=>b(e,n)));function b(e,n){return"link"===e.type?y(e.href,n):"category"===e.type&&(y(e.href,n)||g(e.items,n))}function v(e,n){switch(e.type){case"category":return b(e,n)||e.items.some((e=>v(e,n)));case"link":return!e.unlisted||b(e,n);default:return!0}}function x(e,n){return(0,r.useMemo)((()=>e.filter((e=>v(e,n)))),[e,n])}function w(e){let{sidebarItems:n,pathname:t,onlyCategories:r=!1}=e;const a=[];return function e(n){for(const o of n)if("category"===o.type&&((0,u.Mg)(o.href,t)||e(o.items))||"link"===o.type&&(0,u.Mg)(o.href,t)){return r&&"category"!==o.type||a.unshift(o),!0}return!1}(n),a}function k(){const e=(0,c.V)(),{pathname:n}=(0,a.TH)(),t=(0,i.gA)()?.pluginData.breadcrumbs;return!1!==t&&e?w({sidebarItems:e.items,pathname:n}):null}function S(e){const{activeVersion:n}=(0,i.Iw)(e),{preferredVersion:t}=(0,s.J)(e),a=(0,i.yW)(e);return(0,r.useMemo)((()=>(0,d.j)([n,t,a].filter(Boolean))),[n,t,a])}function $(e,n){const t=S(n);return(0,r.useMemo)((()=>{const n=t.flatMap((e=>e.sidebars?Object.entries(e.sidebars):[])),r=n.find((n=>n[0]===e));if(!r)throw new Error(`Can't find any sidebar with id "${e}" in version${t.length>1?"s":""} ${t.map((e=>e.name)).join(", ")}".\nAvailable sidebar ids are:\n- ${n.map((e=>e[0])).join("\n- ")}`);return r[1]}),[e,t])}function j(e,n){const t=S(n);return(0,r.useMemo)((()=>{const n=t.flatMap((e=>e.docs)),r=n.find((n=>n.id===e));if(!r){if(t.flatMap((e=>e.draftIds)).includes(e))return null;throw new Error(`Couldn't find any doc with id "${e}" in version${t.length>1?"s":""} "${t.map((e=>e.name)).join(", ")}".\nAvailable doc ids are:\n- ${(0,d.j)(n.map((e=>e.id))).join("\n- ")}`)}return r}),[e,t])}function E(e){let{route:n}=e;const t=(0,a.TH)(),r=(0,l.E)(),i=n.routes,s=i.find((e=>(0,a.LX)(t.pathname,e)));if(!s)return null;const c=s.sidebar,d=c?r.docsSidebars[c]:void 0;return{docElement:(0,o.H)(i),sidebarName:c,sidebarItems:d}}function C(e){return e.filter((e=>!("category"===e.type||"link"===e.type)||!!f(e)))}},32424:(e,n,t)=>{"use strict";t.d(n,{Rb:()=>i,_X:()=>l});var r=t(2784),a=t(7267),o=t(6335);function i(e){!function(e){const n=(0,a.k6)(),t=(0,o.zX)(e);(0,r.useEffect)((()=>n.block(((e,n)=>t(e,n)))),[n,t])}(((n,t)=>{if("POP"===t)return e(n,t)}))}function s(e){const n=(0,a.k6)();return(0,r.useSyncExternalStore)(n.listen,(()=>e(n)),(()=>e(n)))}function l(e){return s((n=>null===e?null:new URLSearchParams(n.location.search).get(e)))}},42244:(e,n,t)=>{"use strict";function r(e,n){return void 0===n&&(n=(e,n)=>e===n),e.filter(((t,r)=>e.findIndex((e=>n(e,t)))!==r))}function a(e){return Array.from(new Set(e))}t.d(n,{j:()=>a,l:()=>r})},50328:(e,n,t)=>{"use strict";t.d(n,{FG:()=>m,d:()=>u,VC:()=>f});var r=t(2784),a=t(40489),o=t(69854),i=t(71313);function s(){const e=r.useContext(i._);if(!e)throw new Error("Unexpected: no Docusaurus route context found");return e}var l=t(90077),c=t(37614);var d=t(52322);function u(e){let{title:n,description:t,keywords:r,image:a,children:i}=e;const s=function(e){const{siteConfig:n}=(0,c.Z)(),{title:t,titleDelimiter:r}=n;return e?.trim().length?`${e.trim()} ${r} ${t}`:t}(n),{withBaseUrl:u}=(0,l.Cg)(),p=a?u(a,{absolute:!0}):void 0;return(0,d.jsxs)(o.Z,{children:[n&&(0,d.jsx)("title",{children:s}),n&&(0,d.jsx)("meta",{property:"og:title",content:s}),t&&(0,d.jsx)("meta",{name:"description",content:t}),t&&(0,d.jsx)("meta",{property:"og:description",content:t}),r&&(0,d.jsx)("meta",{name:"keywords",content:Array.isArray(r)?r.join(","):r}),p&&(0,d.jsx)("meta",{property:"og:image",content:p}),p&&(0,d.jsx)("meta",{name:"twitter:image",content:p}),i]})}const p=r.createContext(void 0);function m(e){let{className:n,children:t}=e;const i=r.useContext(p),s=(0,a.Z)(i,n);return(0,d.jsxs)(p.Provider,{value:s,children:[(0,d.jsx)(o.Z,{children:(0,d.jsx)("html",{className:s})}),t]})}function f(e){let{children:n}=e;const t=s(),r=`plugin-${t.plugin.name.replace(/docusaurus-(?:plugin|theme)-(?:content-)?/gi,"")}`;const o=`plugin-id-${t.plugin.id}`;return(0,d.jsx)(m,{className:(0,a.Z)(r,o),children:n})}},6335:(e,n,t)=>{"use strict";t.d(n,{D9:()=>s,Qc:()=>d,Ql:()=>c,i6:()=>l,zX:()=>i});var r=t(2784),a=t(70164),o=t(52322);function i(e){const n=(0,r.useRef)(e);return(0,a.Z)((()=>{n.current=e}),[e]),(0,r.useCallback)((function(){return n.current(...arguments)}),[])}function s(e){const n=(0,r.useRef)();return(0,a.Z)((()=>{n.current=e})),n.current}class l extends Error{constructor(e,n){super(),this.name="ReactContextError",this.message=`Hook ${this.stack?.split("\n")[1]?.match(/at (?:\w+\.)?(?<name>\w+)/)?.groups.name??""} is called outside the <${e}>. ${n??""}`}}function c(e){const n=Object.entries(e);return n.sort(((e,n)=>e[0].localeCompare(n[0]))),(0,r.useMemo)((()=>e),n.flat())}function d(e){return n=>{let{children:t}=n;return(0,o.jsx)(o.Fragment,{children:e.reduceRight(((e,n)=>(0,o.jsx)(n,{children:e})),t)})}}},87661:(e,n,t)=>{"use strict";t.d(n,{Mg:()=>i,Ns:()=>s});var r=t(2784),a=t(19895),o=t(37614);function i(e,n){const t=e=>(!e||e.endsWith("/")?e:`${e}/`)?.toLowerCase();return t(e)===t(n)}function s(){const{baseUrl:e}=(0,o.Z)().siteConfig;return(0,r.useMemo)((()=>function(e){let{baseUrl:n,routes:t}=e;function r(e){return e.path===n&&!0===e.exact}function a(e){return e.path===n&&!e.exact}return function e(n){if(0===n.length)return;return n.find(r)||e(n.filter(a).flatMap((e=>e.routes??[])))}(t)}({routes:a.Z,baseUrl:e})),[e])}},24126:(e,n,t)=>{"use strict";t.d(n,{Ct:()=>h,OC:()=>d,RF:()=>m,o5:()=>f});var r=t(2784),a=t(31263),o=t(89741),i=t(70164),s=t(6335),l=t(52322);const c=r.createContext(void 0);function d(e){let{children:n}=e;const t=function(){const e=(0,r.useRef)(!0);return(0,r.useMemo)((()=>({scrollEventsEnabledRef:e,enableScrollEvents:()=>{e.current=!0},disableScrollEvents:()=>{e.current=!1}})),[])}();return(0,l.jsx)(c.Provider,{value:t,children:n})}function u(){const e=(0,r.useContext)(c);if(null==e)throw new s.i6("ScrollControllerProvider");return e}const p=()=>a.Z.canUseDOM?{scrollX:window.pageXOffset,scrollY:window.pageYOffset}:null;function m(e,n){void 0===n&&(n=[]);const{scrollEventsEnabledRef:t}=u(),a=(0,r.useRef)(p()),o=(0,s.zX)(e);(0,r.useEffect)((()=>{const e=()=>{if(!t.current)return;const e=p();o(e,a.current),a.current=e},n={passive:!0};return e(),window.addEventListener("scroll",e,n),()=>window.removeEventListener("scroll",e,n)}),[o,t,...n])}function f(){const e=u(),n=function(){const e=(0,r.useRef)({elem:null,top:0}),n=(0,r.useCallback)((n=>{e.current={elem:n,top:n.getBoundingClientRect().top}}),[]),t=(0,r.useCallback)((()=>{const{current:{elem:n,top:t}}=e;if(!n)return{restored:!1};const r=n.getBoundingClientRect().top-t;return r&&window.scrollBy({left:0,top:r}),e.current={elem:null,top:0},{restored:0!==r}}),[]);return(0,r.useMemo)((()=>({save:n,restore:t})),[t,n])}(),t=(0,r.useRef)(void 0),a=(0,r.useCallback)((r=>{n.save(r),e.disableScrollEvents(),t.current=()=>{const{restored:r}=n.restore();if(t.current=void 0,r){const n=()=>{e.enableScrollEvents(),window.removeEventListener("scroll",n)};window.addEventListener("scroll",n)}else e.enableScrollEvents()}}),[e,n]);return(0,i.Z)((()=>{queueMicrotask((()=>t.current?.()))})),{blockElementScrollPositionUntilNextRender:a}}function h(){const e=(0,r.useRef)(null),n=(0,o.Z)()&&"smooth"===getComputedStyle(document.documentElement).scrollBehavior;return{startScroll:t=>{e.current=n?function(e){return window.scrollTo({top:e,behavior:"smooth"}),()=>{}}(t):function(e){let n=null;const t=document.documentElement.scrollTop>e;return function r(){const a=document.documentElement.scrollTop;(t&&a>e||!t&&a<e)&&(n=requestAnimationFrame(r),window.scrollTo(0,Math.floor(.85*(a-e))+e))}(),()=>n&&cancelAnimationFrame(n)}(t)},cancelScroll:()=>e.current?.()}}},4925:(e,n,t)=>{"use strict";t.d(n,{HX:()=>r,os:()=>a});t(37614);const r="default";function a(e,n){return`docs-${e}-${n}`}},37611:(e,n,t)=>{"use strict";t.d(n,{WA:()=>d,Nk:()=>u});var r=t(2784);const a=JSON.parse('{"d":"localStorage","u":""}'),o=a.d;function i(e){let{key:n,oldValue:t,newValue:r,storage:a}=e;if(t===r)return;const o=document.createEvent("StorageEvent");o.initStorageEvent("storage",!1,!1,n,t,r,window.location.href,a),window.dispatchEvent(o)}function s(e){if(void 0===e&&(e=o),"undefined"==typeof window)throw new Error("Browser storage is not available on Node.js/Docusaurus SSR process.");if("none"===e)return null;try{return window[e]}catch(t){return n=t,l||(console.warn("Docusaurus browser storage is not available.\nPossible reasons: running Docusaurus in an iframe, in an incognito browser session, or using too strict browser privacy settings.",n),l=!0),null}var n}let l=!1;const c={get:()=>null,set:()=>{},del:()=>{},listen:()=>()=>{}};function d(e,n){const t=`${e}${a.u}`;if("undefined"==typeof window)return function(e){function n(){throw new Error(`Illegal storage API usage for storage key "${e}".\nDocusaurus storage APIs are not supposed to be called on the server-rendering process.\nPlease only call storage APIs in effects and event handlers.`)}return{get:n,set:n,del:n,listen:n}}(t);const r=s(n?.persistence);return null===r?c:{get:()=>{try{return r.getItem(t)}catch(e){return console.error(`Docusaurus storage error, can't get key=${t}`,e),null}},set:e=>{try{const n=r.getItem(t);r.setItem(t,e),i({key:t,oldValue:n,newValue:e,storage:r})}catch(n){console.error(`Docusaurus storage error, can't set ${t}=${e}`,n)}},del:()=>{try{const e=r.getItem(t);r.removeItem(t),i({key:t,oldValue:e,newValue:null,storage:r})}catch(e){console.error(`Docusaurus storage error, can't delete key=${t}`,e)}},listen:e=>{try{const n=n=>{n.storageArea===r&&n.key===t&&e(n)};return window.addEventListener("storage",n),()=>window.removeEventListener("storage",n)}catch(n){return console.error(`Docusaurus storage error, can't listen for changes of key=${t}`,n),()=>{}}}}}function u(e,n){const t=(0,r.useRef)((()=>null===e?c:d(e,n))).current(),a=(0,r.useCallback)((e=>"undefined"==typeof window?()=>{}:t.listen(e)),[t]);return[(0,r.useSyncExternalStore)(a,(()=>"undefined"==typeof window?null:t.get()),(()=>null)),t]}},55552:(e,n,t)=>{"use strict";t.d(n,{l:()=>i});var r=t(37614),a=t(7267),o=t(60958);function i(){const{siteConfig:{baseUrl:e,url:n,trailingSlash:t},i18n:{defaultLocale:i,currentLocale:s}}=(0,r.Z)(),{pathname:l}=(0,a.TH)(),c=(0,o.applyTrailingSlash)(l,{trailingSlash:t,baseUrl:e}),d=s===i?e:e.replace(`/${s}/`,"/"),u=c.replace(e,"");return{createUrl:function(e){let{locale:t,fullyQualified:r}=e;return`${r?n:""}${function(e){return e===i?`${d}`:`${d}${e}/`}(t)}${u}`}}}},12105:(e,n,t)=>{"use strict";t.d(n,{S:()=>i});var r=t(2784),a=t(7267),o=t(6335);function i(e){const n=(0,a.TH)(),t=(0,o.D9)(n),i=(0,o.zX)(e);(0,r.useEffect)((()=>{t&&n!==t&&i({location:n,previousLocation:t})}),[i,n,t])}},97683:(e,n,t)=>{"use strict";t.d(n,{L:()=>a});var r=t(37614);function a(){return(0,r.Z)().siteConfig.themeConfig}},71025:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.removeTrailingSlash=n.addLeadingSlash=n.addTrailingSlash=void 0;const r=t(90599);function a(e){return e.endsWith("/")?e:`${e}/`}function o(e){return(0,r.removeSuffix)(e,"/")}n.addTrailingSlash=a,n.default=function(e,n){const{trailingSlash:t,baseUrl:r}=n;if(e.startsWith("#"))return e;if(void 0===t)return e;const[i]=e.split(/[#?]/),s="/"===i||i===r?i:(l=i,t?a(l):o(l));var l;return e.replace(i,s)},n.addLeadingSlash=function(e){return(0,r.addPrefix)(e,"/")},n.removeTrailingSlash=o},90415:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getErrorCausalChain=void 0,n.getErrorCausalChain=function e(n){return n.cause?[n,...e(n.cause)]:[n]}},60958:function(e,n,t){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.getErrorCausalChain=n.removePrefix=n.addSuffix=n.removeSuffix=n.addPrefix=n.removeTrailingSlash=n.addLeadingSlash=n.addTrailingSlash=n.applyTrailingSlash=n.blogPostContainerID=void 0,n.blogPostContainerID="__blog-post-container";var a=t(71025);Object.defineProperty(n,"applyTrailingSlash",{enumerable:!0,get:function(){return r(a).default}}),Object.defineProperty(n,"addTrailingSlash",{enumerable:!0,get:function(){return a.addTrailingSlash}}),Object.defineProperty(n,"addLeadingSlash",{enumerable:!0,get:function(){return a.addLeadingSlash}}),Object.defineProperty(n,"removeTrailingSlash",{enumerable:!0,get:function(){return a.removeTrailingSlash}});var o=t(90599);Object.defineProperty(n,"addPrefix",{enumerable:!0,get:function(){return o.addPrefix}}),Object.defineProperty(n,"removeSuffix",{enumerable:!0,get:function(){return o.removeSuffix}}),Object.defineProperty(n,"addSuffix",{enumerable:!0,get:function(){return o.addSuffix}}),Object.defineProperty(n,"removePrefix",{enumerable:!0,get:function(){return o.removePrefix}});var i=t(90415);Object.defineProperty(n,"getErrorCausalChain",{enumerable:!0,get:function(){return i.getErrorCausalChain}})},90599:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.removePrefix=n.addSuffix=n.removeSuffix=n.addPrefix=void 0,n.addPrefix=function(e,n){return e.startsWith(n)?e:`${n}${e}`},n.removeSuffix=function(e,n){return""===n?e:e.endsWith(n)?e.slice(0,-n.length):e},n.addSuffix=function(e,n){return e.endsWith(n)?e:`${e}${n}`},n.removePrefix=function(e,n){return e.startsWith(n)?e.slice(n.length):e}},19895:(e,n,t)=>{"use strict";t.d(n,{Z:()=>p});t(2784);var r=t(89028),a=t.n(r),o=t(16887);const i={"0098a75a":[()=>Promise.all([t.e(532),t.e(8592),t.e(2061)]).then(t.bind(t,49228)),"@site/docs/sketches/prototype.mdx",49228],"00be781a":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(3763)]).then(t.bind(t,65108)),"@site/docs/implementation-guides/pointers/testing/deployment.mdx",65108],"06923f2b":[()=>Promise.all([t.e(532),t.e(8592),t.e(1649)]).then(t.bind(t,37306)),"@site/spec/pointer/concepts.mdx",37306],"06d87cbd":[()=>Promise.all([t.e(8592),t.e(3818)]).then(t.bind(t,44261)),"@site/docs/goals.mdx",44261],"06f6442f":[()=>Promise.all([t.e(532),t.e(8592),t.e(5097)]).then(t.bind(t,60740)),"@site/spec/pointer/region/location/storage.mdx",60740],"0c6b334b":[()=>Promise.all([t.e(532),t.e(8592),t.e(2418)]).then(t.bind(t,5958)),"@site/spec/pointer/pointer.mdx",5958],"0d3f9d17":[()=>Promise.all([t.e(532),t.e(8592),t.e(799)]).then(t.bind(t,7737)),"@site/spec/type/elementary/bytes.mdx",7737],"0d8e4b06":[()=>Promise.all([t.e(532),t.e(8592),t.e(4584)]).then(t.bind(t,62207)),"@site/spec/program/context/remark.mdx",62207],"1154c93e":[()=>Promise.all([t.e(532),t.e(8592),t.e(1887)]).then(t.bind(t,62903)),"@site/spec/type/complex/tuple.mdx",62903],"14eb3368":[()=>Promise.all([t.e(532),t.e(9817)]).then(t.bind(t,45609)),"@theme/DocCategoryGeneratedIndexPage",45609],17896441:[()=>Promise.all([t.e(532),t.e(8592),t.e(3879),t.e(7918)]).then(t.bind(t,49948)),"@theme/DocItem",49948],18891827:[()=>Promise.all([t.e(8592),t.e(9081)]).then(t.bind(t,56731)),"@site/docs/overview.mdx",56731],19100351:[()=>Promise.all([t.e(532),t.e(8592),t.e(7994),t.e(5304)]).then(t.bind(t,89200)),"@site/spec/program/example.mdx",89200],"1917520d":[()=>Promise.all([t.e(532),t.e(8592),t.e(5722),t.e(1571)]).then(t.bind(t,99156)),"@site/spec/type/base.mdx",99156],"19c068a5":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(3904)]).then(t.bind(t,71613)),"@site/docs/implementation-guides/pointers/dereference-logic/dereference-logic.mdx",71613],"1df93b7f":[()=>Promise.all([t.e(532),t.e(3237)]).then(t.bind(t,47483)),"@site/src/pages/index.tsx",47483],"1f391b9e":[()=>Promise.all([t.e(532),t.e(8592),t.e(3879),t.e(3085)]).then(t.bind(t,48398)),"@theme/MDXPage",48398],"24164d9f":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(7317)]).then(t.bind(t,93100)),"@site/docs/implementation-guides/pointers/testing/jest.mdx",93100],"26210d4e":[()=>Promise.all([t.e(532),t.e(8592),t.e(8015)]).then(t.bind(t,81037)),"@site/spec/type/elementary/address.mdx",81037],"26adb6ed":[()=>Promise.all([t.e(532),t.e(8592),t.e(2343)]).then(t.bind(t,34903)),"@site/spec/type/complex/alias.mdx",34903],"27fc136d":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(9741)]).then(t.bind(t,98628)),"@site/docs/implementation-guides/pointers/testing/test-cases/uint256-array-memory.mdx",98628],"288a3aad":[()=>Promise.all([t.e(532),t.e(8592),t.e(2384)]).then(t.bind(t,70442)),"@site/spec/type/complex/function.mdx",70442],"2d54960a":[()=>t.e(4404).then(t.t.bind(t,14765,19)),"@generated/docusaurus-plugin-content-docs/spec/p/format-spec-category-complex-types-90c.json",14765],"2d5baa33":[()=>Promise.all([t.e(8592),t.e(5152)]).then(t.bind(t,9922)),"@site/docs/sketches/layout.mdx",9922],"2fe7c366":[()=>t.e(6924).then(t.t.bind(t,62930,19)),"@generated/docusaurus-plugin-content-docs/default/p/format-docs-category-prototype-sketches-eac.json",62930],"324b62c5":[()=>Promise.all([t.e(532),t.e(8592),t.e(9057)]).then(t.bind(t,26043)),"@site/spec/pointer/collection/collection.mdx",26043],"34a1fa87":[()=>Promise.all([t.e(532),t.e(8592),t.e(5340)]).then(t.bind(t,68443)),"@site/spec/pointer/region/location/calldata.mdx",68443],"39033cdf":[()=>Promise.all([t.e(532),t.e(8592),t.e(9874)]).then(t.bind(t,83459)),"@site/spec/type/complex/array.mdx",83459],"3bef66bf":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(4963)]).then(t.bind(t,23349)),"@site/docs/implementation-guides/pointers/types/pointer-types.mdx",23349],"3c31ec3b":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(95)]).then(t.bind(t,73488)),"@site/docs/implementation-guides/pointers/testing/blockchain-simulation.mdx",73488],"3d06257c":[()=>Promise.all([t.e(532),t.e(8592),t.e(2002)]).then(t.bind(t,48965)),"@site/spec/program/context/variables.mdx",48965],"41f6ea55":[()=>Promise.all([t.e(532),t.e(8592),t.e(7278)]).then(t.bind(t,40715)),"@site/spec/pointer/region/base.mdx",40715],"468cb0dd":[()=>Promise.all([t.e(532),t.e(8592),t.e(2156)]).then(t.bind(t,58464)),"@site/spec/program/program.mdx",58464],"47f40ad3":[()=>Promise.all([t.e(532),t.e(8592),t.e(3362)]).then(t.bind(t,89373)),"@site/spec/pointer/region/scheme/segment.mdx",89373],"4f48a76f":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(2333)]).then(t.bind(t,7092)),"@site/docs/implementation-guides/pointers/testing/test-cases/struct-storage.mdx",7092],"4ffa8edd":[()=>Promise.all([t.e(532),t.e(8592),t.e(7091)]).then(t.bind(t,54380)),"@site/spec/pointer/region/location/stack.mdx",54380],"50fa7aa7":[()=>Promise.all([t.e(532),t.e(8592),t.e(1422)]).then(t.bind(t,37088)),"@site/spec/type/elementary/string.mdx",37088],55366030:[()=>Promise.all([t.e(532),t.e(8592),t.e(5007)]).then(t.bind(t,5062)),"@site/spec/pointer/region/scheme/slice.mdx",5062],"57805cd5":[()=>Promise.all([t.e(532),t.e(8592),t.e(6218)]).then(t.bind(t,29726)),"@site/spec/pointer/region/region.mdx",29726],"5a3947ce":[()=>Promise.all([t.e(532),t.e(8592),t.e(6676)]).then(t.bind(t,87516)),"@site/spec/data/value.mdx",87516],"5c90228f":[()=>Promise.all([t.e(532),t.e(8592),t.e(8822)]).then(t.bind(t,54243)),"@site/spec/materials/source.mdx",54243],"5e95c892":[()=>t.e(9661).then(t.bind(t,44629)),"@theme/DocsRoot",44629],"5e9f5e1a":[()=>Promise.resolve().then(t.bind(t,36809)),"@generated/docusaurus.config",36809],"5fa83de1":[()=>Promise.all([t.e(532),t.e(8592),t.e(5642)]).then(t.bind(t,19327)),"@site/spec/type/overview.mdx",19327],"5fb36c82":[()=>Promise.all([t.e(532),t.e(8592),t.e(5438)]).then(t.bind(t,20116)),"@site/spec/pointer/region/location/code.mdx",20116],"60b8d43b":[()=>Promise.all([t.e(8592),t.e(7219)]).then(t.bind(t,1067)),"@site/spec/pointer/overview.mdx",1067],"6397ae1b":[()=>Promise.all([t.e(532),t.e(8592),t.e(5910)]).then(t.bind(t,63860)),"@site/spec/pointer/collection/list.mdx",63860],"658aa8be":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(997)]).then(t.bind(t,91135)),"@site/docs/implementation-guides/pointers/testing/test-cases/test-cases.mdx",91135],"65b9696e":[()=>t.e(6037).then(t.t.bind(t,94818,19)),"@generated/docusaurus-plugin-content-docs/spec/p/format-spec-e89.json",94818],"6656ad10":[()=>t.e(8623).then(t.t.bind(t,17814,19)),"@generated/docusaurus-plugin-content-docs/spec/p/format-spec-category-elementary-types-26a.json",17814],"6bb5505e":[()=>Promise.all([t.e(532),t.e(8592),t.e(8797)]).then(t.bind(t,52894)),"@site/spec/pointer/collection/scope.mdx",52894],"6dcd11e3":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(8107)]).then(t.bind(t,12162)),"@site/docs/implementation-guides/pointers/types/cursors.mdx",12162],"6e8ff3aa":[()=>Promise.all([t.e(532),t.e(8592),t.e(2093)]).then(t.bind(t,64856)),"@site/spec/type/type.mdx",64856],"7168108a":[()=>Promise.all([t.e(532),t.e(8592),t.e(4427)]).then(t.bind(t,66673)),"@site/spec/pointer/region/location/transient.mdx",66673],"73e8c510":[()=>Promise.all([t.e(532),t.e(8592),t.e(8605)]).then(t.bind(t,9179)),"@site/spec/materials/id.mdx",9179],"74f0bff4":[()=>Promise.all([t.e(532),t.e(8592),t.e(3e3)]).then(t.bind(t,49678)),"@site/spec/type/elementary/int.mdx",49678],"7ea30011":[()=>Promise.all([t.e(532),t.e(8592),t.e(1653)]).then(t.bind(t,19420)),"@site/spec/info/info.mdx",19420],"805f8f48":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(5068)]).then(t.bind(t,18153)),"@site/docs/implementation-guides/pointers/testing/example-pointers.mdx",18153],"87bcd65e":[()=>Promise.all([t.e(532),t.e(8592),t.e(488)]).then(t.bind(t,62237)),"@site/spec/type/elementary/fixed.mdx",62237],"8aa384a9":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(1583)]).then(t.bind(t,18290)),"@site/docs/implementation-guides/pointers/dereference-logic/making-regions-concrete.mdx",18290],"8e037750":[()=>Promise.all([t.e(532),t.e(8592),t.e(7033)]).then(t.bind(t,95491)),"@site/spec/type/concepts.mdx",95491],"96cb052f":[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(9076)]).then(t.bind(t,46543)),"@site/docs/implementation-guides/pointers/testing/test-cases/string-storage.mdx",46543],"9785fb56":[()=>Promise.all([t.e(532),t.e(8592),t.e(8825)]).then(t.bind(t,35301)),"@site/spec/program/context/gather.mdx",35301],"9999236a":[()=>Promise.all([t.e(532),t.e(8592),t.e(8320)]).then(t.bind(t,36543)),"@site/spec/pointer/template.mdx",36543],"9ac2b418":[()=>Promise.all([t.e(532),t.e(8592),t.e(351)]).then(t.bind(t,64421)),"@site/spec/type/complex/struct.mdx",64421],"9c15981d":[()=>Promise.all([t.e(8592),t.e(1236)]).then(t.bind(t,25157)),"@site/spec/program/concepts.mdx",25157],"9c6e1aee":[()=>Promise.all([t.e(532),t.e(8592),t.e(882)]).then(t.bind(t,31745)),"@site/spec/pointer/collection/conditional.mdx",31745],"9e15fc25":[()=>Promise.all([t.e(532),t.e(8592),t.e(554)]).then(t.bind(t,12811)),"@site/docs/known-challenges.mdx",12811],a36bb8b3:[()=>Promise.all([t.e(532),t.e(8592),t.e(1081)]).then(t.bind(t,11375)),"@site/spec/program/context/context.mdx",11375],a6fccf34:[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(1724)]).then(t.bind(t,18206)),"@site/docs/implementation-guides/pointers/reading-from-regions.mdx",18206],a7456010:[()=>t.e(5980).then(t.t.bind(t,79365,19)),"@generated/docusaurus-plugin-content-pages/default/__plugin.json",79365],a7bd4aaa:[()=>t.e(8518).then(t.bind(t,42582)),"@theme/DocVersionRoot",42582],a94703ab:[()=>Promise.all([t.e(532),t.e(4368)]).then(t.bind(t,91999)),"@theme/DocRoot",91999],a9779a33:[()=>Promise.all([t.e(8592),t.e(1178)]).then(t.bind(t,82221)),"@site/spec/data/overview.mdx",82221],aba21aa0:[()=>t.e(3629).then(t.t.bind(t,41765,19)),"@generated/docusaurus-plugin-content-docs/default/__plugin.json",41765],ac92a050:[()=>Promise.all([t.e(532),t.e(8592),t.e(4402)]).then(t.bind(t,28178)),"@site/spec/program/instruction.mdx",28178],ad7f7207:[()=>Promise.all([t.e(8592),t.e(2112)]).then(t.bind(t,56379)),"@site/spec/materials/overview.mdx",56379],aeecf7cf:[()=>Promise.all([t.e(532),t.e(8592),t.e(5815)]).then(t.bind(t,8492)),"@site/spec/type/elementary/enum.mdx",8492],b27771bd:[()=>Promise.all([t.e(532),t.e(8592),t.e(3427)]).then(t.bind(t,72363)),"@site/spec/type/complex/mapping.mdx",72363],b702b8d4:[()=>Promise.all([t.e(532),t.e(8592),t.e(6424)]).then(t.bind(t,9187)),"@site/spec/pointer/region/location/memory.mdx",9187],b70fd545:[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(1685)]).then(t.bind(t,41374)),"@site/docs/implementation-guides/pointers/testing/compilation.mdx",41374],b8b25df5:[()=>Promise.all([t.e(532),t.e(8592),t.e(6040)]).then(t.bind(t,69256)),"@site/spec/program/context/code.mdx",69256],bcf1c89a:[()=>Promise.all([t.e(532),t.e(8592),t.e(1101)]).then(t.bind(t,71444)),"@site/spec/program/context/frame.mdx",71444],be5c8d03:[()=>Promise.all([t.e(532),t.e(8592),t.e(5791)]).then(t.bind(t,84860)),"@site/spec/type/elementary/contract.mdx",84860],bea7a14c:[()=>Promise.all([t.e(532),t.e(8592),t.e(9442)]).then(t.bind(t,89278)),"@site/spec/info/resources.mdx",89278],c26eb700:[()=>Promise.all([t.e(532),t.e(8592),t.e(6003)]).then(t.bind(t,92733)),"@site/spec/materials/compilation.mdx",92733],c3e4b2a1:[()=>Promise.all([t.e(532),t.e(6477)]).then(t.bind(t,52517)),"@site/src/pages/home/index.tsx",52517],c47862a6:[()=>Promise.all([t.e(532),t.e(8592),t.e(4567)]).then(t.bind(t,62978)),"@site/spec/type/elementary/uint.mdx",62978],c73c1d3a:[()=>Promise.all([t.e(532),t.e(8592),t.e(556)]).then(t.bind(t,32587)),"@site/spec/materials/source-range.mdx",32587],ca0d25b7:[()=>Promise.all([t.e(532),t.e(8592),t.e(2232)]).then(t.bind(t,77216)),"@site/spec/data/hex.mdx",77216],cb7b1c3b:[()=>Promise.all([t.e(8592),t.e(8263)]).then(t.bind(t,61634)),"@site/docs/implementation-guides/pointers/types/types.mdx",61634],ccf56d1d:[()=>Promise.all([t.e(532),t.e(8592),t.e(9312)]).then(t.bind(t,39843)),"@site/spec/pointer/region/location/returndata.mdx",39843],ce1d6aaa:[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(8470)]).then(t.bind(t,72052)),"@site/docs/implementation-guides/pointers/evaluating-expressions.mdx",72052],ceb0eefa:[()=>Promise.all([t.e(8592),t.e(8709)]).then(t.bind(t,57985)),"@site/spec/info/overview.mdx",57985],d37c0134:[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(6338)]).then(t.bind(t,37374)),"@site/docs/implementation-guides/pointers/dereference-logic/generating-regions.mdx",37374],d3f864f6:[()=>t.e(2095).then(t.t.bind(t,98870,19)),"@generated/docusaurus-plugin-content-docs/default/p/format-docs-d4e.json",98870],d6a63adc:[()=>Promise.all([t.e(8592),t.e(6454)]).then(t.bind(t,1594)),"@site/spec/overview.mdx",1594],d95ad7b1:[()=>Promise.all([t.e(532),t.e(8592),t.e(6046)]).then(t.bind(t,86220)),"@site/spec/program/context/pick.mdx",86220],dc0c7504:[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(7626)]).then(t.bind(t,33552)),"@site/docs/implementation-guides/pointers/types/data-and-machines.mdx",33552],dcaebccf:[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(2592)]).then(t.bind(t,6473)),"@site/docs/implementation-guides/pointers/pointers.mdx",6473],ddfabb78:[()=>Promise.all([t.e(8592),t.e(6852)]).then(t.bind(t,46708)),"@site/docs/implementation-guides/implementation-guides.mdx",46708],dfd51a51:[()=>t.e(4035).then(t.t.bind(t,75320,19)),"@generated/docusaurus-plugin-content-docs/spec/__plugin.json",75320],e793cb8b:[()=>Promise.all([t.e(8592),t.e(1600)]).then(t.bind(t,99904)),"@site/docs/implementation-guides/pointers/testing/testing.mdx",99904],e8328cbe:[()=>Promise.all([t.e(532),t.e(8592),t.e(5491)]).then(t.bind(t,1380)),"@site/spec/pointer/collection/group.mdx",1380],e856c143:[()=>Promise.all([t.e(8592),t.e(683)]).then(t.bind(t,94647)),"@site/src/pages/status.mdx",94647],ede070c3:[()=>Promise.all([t.e(532),t.e(8592),t.e(1018)]).then(t.bind(t,96749)),"@site/spec/data/unsigned.mdx",96749],ee3e0fff:[()=>Promise.all([t.e(532),t.e(8592),t.e(9437)]).then(t.bind(t,5641)),"@site/spec/pointer/expression.mdx",5641],ee64d9a0:[()=>Promise.all([t.e(8592),t.e(7316)]).then(t.bind(t,80046)),"@site/spec/program/overview.mdx",80046],f210e6d3:[()=>Promise.all([t.e(532),t.e(8592),t.e(1512)]).then(t.bind(t,32562)),"@site/spec/type/elementary/bool.mdx",32562],f2745fbe:[()=>Promise.all([t.e(532),t.e(8592),t.e(5548)]).then(t.bind(t,11786)),"@site/spec/type/elementary/ufixed.mdx",11786],f577767d:[()=>Promise.all([t.e(532),t.e(8592),t.e(477),t.e(763)]).then(t.bind(t,65045)),"@site/docs/implementation-guides/pointers/testing/machine-observation.mdx",65045]};var s=t(52322);function l(e){let{error:n,retry:t,pastDelay:r}=e;return n?(0,s.jsxs)("div",{style:{textAlign:"center",color:"#fff",backgroundColor:"#fa383e",borderColor:"#fa383e",borderStyle:"solid",borderRadius:"0.25rem",borderWidth:"1px",boxSizing:"border-box",display:"block",padding:"1rem",flex:"0 0 50%",marginLeft:"25%",marginRight:"25%",marginTop:"5rem",maxWidth:"50%",width:"100%"},children:[(0,s.jsx)("p",{children:String(n)}),(0,s.jsx)("div",{children:(0,s.jsx)("button",{type:"button",onClick:t,children:"Retry"})})]}):r?(0,s.jsx)("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",height:"100vh"},children:(0,s.jsx)("svg",{id:"loader",style:{width:128,height:110,position:"absolute",top:"calc(100vh - 64%)"},viewBox:"0 0 45 45",xmlns:"http://www.w3.org/2000/svg",stroke:"#61dafb",children:(0,s.jsxs)("g",{fill:"none",fillRule:"evenodd",transform:"translate(1 1)",strokeWidth:"2",children:[(0,s.jsxs)("circle",{cx:"22",cy:"22",r:"6",strokeOpacity:"0",children:[(0,s.jsx)("animate",{attributeName:"r",begin:"1.5s",dur:"3s",values:"6;22",calcMode:"linear",repeatCount:"indefinite"}),(0,s.jsx)("animate",{attributeName:"stroke-opacity",begin:"1.5s",dur:"3s",values:"1;0",calcMode:"linear",repeatCount:"indefinite"}),(0,s.jsx)("animate",{attributeName:"stroke-width",begin:"1.5s",dur:"3s",values:"2;0",calcMode:"linear",repeatCount:"indefinite"})]}),(0,s.jsxs)("circle",{cx:"22",cy:"22",r:"6",strokeOpacity:"0",children:[(0,s.jsx)("animate",{attributeName:"r",begin:"3s",dur:"3s",values:"6;22",calcMode:"linear",repeatCount:"indefinite"}),(0,s.jsx)("animate",{attributeName:"stroke-opacity",begin:"3s",dur:"3s",values:"1;0",calcMode:"linear",repeatCount:"indefinite"}),(0,s.jsx)("animate",{attributeName:"stroke-width",begin:"3s",dur:"3s",values:"2;0",calcMode:"linear",repeatCount:"indefinite"})]}),(0,s.jsx)("circle",{cx:"22",cy:"22",r:"8",children:(0,s.jsx)("animate",{attributeName:"r",begin:"0s",dur:"1.5s",values:"6;1;2;3;4;5;6",calcMode:"linear",repeatCount:"indefinite"})})]})})}):null}var c=t(20805),d=t(71313);function u(e,n){if("*"===e)return a()({loading:l,loader:()=>t.e(12).then(t.bind(t,30012)),modules:["@theme/NotFound"],webpack:()=>[30012],render(e,n){const t=e.default;return(0,s.jsx)(d.z,{value:{plugin:{name:"native",id:"default"}},children:(0,s.jsx)(t,{...n})})}});const r=o[`${e}-${n}`],u={},p=[],m=[],f=(0,c.Z)(r);return Object.entries(f).forEach((e=>{let[n,t]=e;const r=i[t];r&&(u[n]=r[0],p.push(r[1]),m.push(r[2]))})),a().Map({loading:l,loader:u,modules:p,webpack:()=>m,render(n,t){const a=JSON.parse(JSON.stringify(r));Object.entries(n).forEach((n=>{let[t,r]=n;const o=r.default;if(!o)throw new Error(`The page component at ${e} doesn't have a default export. This makes it impossible to render anything. Consider default-exporting a React component.`);"object"!=typeof o&&"function"!=typeof o||Object.keys(r).filter((e=>"default"!==e)).forEach((e=>{o[e]=r[e]}));let i=a;const s=t.split(".");s.slice(0,-1).forEach((e=>{i=i[e]})),i[s[s.length-1]]=o}));const o=a.__comp;delete a.__comp;const i=a.__context;delete a.__context;const l=a.__props;return delete a.__props,(0,s.jsx)(d.z,{value:i,children:(0,s.jsx)(o,{...a,...l,...t})})}})}const p=[{path:"/format/home/",component:u("/format/home/","8f8"),exact:!0},{path:"/format/status",component:u("/format/status","d6d"),exact:!0},{path:"/format/docs",component:u("/format/docs","be4"),routes:[{path:"/format/docs",component:u("/format/docs","267"),routes:[{path:"/format/docs",component:u("/format/docs","68e"),routes:[{path:"/format/docs/category/prototype-sketches",component:u("/format/docs/category/prototype-sketches","809"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/goals",component:u("/format/docs/goals","0bb"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/",component:u("/format/docs/implementation-guides/","66d"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/",component:u("/format/docs/implementation-guides/pointers/","5f2"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/dereference-logic/",component:u("/format/docs/implementation-guides/pointers/dereference-logic/","cb8"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/dereference-logic/generating-regions",component:u("/format/docs/implementation-guides/pointers/dereference-logic/generating-regions","8e9"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/dereference-logic/making-regions-concrete",component:u("/format/docs/implementation-guides/pointers/dereference-logic/making-regions-concrete","1e7"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/evaluating-expressions",component:u("/format/docs/implementation-guides/pointers/evaluating-expressions","ed9"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/reading-from-regions",component:u("/format/docs/implementation-guides/pointers/reading-from-regions","109"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/",component:u("/format/docs/implementation-guides/pointers/testing/","5cd"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/blockchain-simulation",component:u("/format/docs/implementation-guides/pointers/testing/blockchain-simulation","950"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/compilation",component:u("/format/docs/implementation-guides/pointers/testing/compilation","07c"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/deployment",component:u("/format/docs/implementation-guides/pointers/testing/deployment","9b5"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/example-pointers",component:u("/format/docs/implementation-guides/pointers/testing/example-pointers","4cc"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/jest",component:u("/format/docs/implementation-guides/pointers/testing/jest","1f4"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/machine-observation",component:u("/format/docs/implementation-guides/pointers/testing/machine-observation","a54"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/test-cases/",component:u("/format/docs/implementation-guides/pointers/testing/test-cases/","834"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/test-cases/string-storage",component:u("/format/docs/implementation-guides/pointers/testing/test-cases/string-storage","2e2"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/test-cases/struct-storage",component:u("/format/docs/implementation-guides/pointers/testing/test-cases/struct-storage","5d7"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/testing/test-cases/uint256-array-memory",component:u("/format/docs/implementation-guides/pointers/testing/test-cases/uint256-array-memory","fc6"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/types/",component:u("/format/docs/implementation-guides/pointers/types/","e07"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/types/cursors",component:u("/format/docs/implementation-guides/pointers/types/cursors","6a3"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/types/data-and-machines",component:u("/format/docs/implementation-guides/pointers/types/data-and-machines","34a"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/implementation-guides/pointers/types/pointer-types",component:u("/format/docs/implementation-guides/pointers/types/pointer-types","fee"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/known-challenges",component:u("/format/docs/known-challenges","5aa"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/overview",component:u("/format/docs/overview","ff5"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/sketches/layout",component:u("/format/docs/sketches/layout","926"),exact:!0,sidebar:"docsSidebar"},{path:"/format/docs/sketches/prototype",component:u("/format/docs/sketches/prototype","9b3"),exact:!0,sidebar:"docsSidebar"}]}]}]},{path:"/format/spec",component:u("/format/spec","916"),routes:[{path:"/format/spec",component:u("/format/spec","1f1"),routes:[{path:"/format/spec",component:u("/format/spec","33d"),routes:[{path:"/format/spec/category/complex-types",component:u("/format/spec/category/complex-types","8c2"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/category/elementary-types",component:u("/format/spec/category/elementary-types","ed4"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/data/hex",component:u("/format/spec/data/hex","e36"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/data/overview",component:u("/format/spec/data/overview","95a"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/data/unsigned",component:u("/format/spec/data/unsigned","125"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/data/value",component:u("/format/spec/data/value","888"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/info/",component:u("/format/spec/info/","2e5"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/info/overview",component:u("/format/spec/info/overview","ead"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/info/resources",component:u("/format/spec/info/resources","48a"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/materials/compilation",component:u("/format/spec/materials/compilation","d27"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/materials/id",component:u("/format/spec/materials/id","672"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/materials/overview",component:u("/format/spec/materials/overview","1ec"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/materials/source",component:u("/format/spec/materials/source","73e"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/materials/source-range",component:u("/format/spec/materials/source-range","1d1"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/overview",component:u("/format/spec/overview","d74"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/",component:u("/format/spec/pointer/","ac2"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/collection/",component:u("/format/spec/pointer/collection/","204"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/collection/conditional",component:u("/format/spec/pointer/collection/conditional","f89"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/collection/group",component:u("/format/spec/pointer/collection/group","60f"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/collection/list",component:u("/format/spec/pointer/collection/list","e12"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/collection/scope",component:u("/format/spec/pointer/collection/scope","6af"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/concepts",component:u("/format/spec/pointer/concepts","4f7"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/expression",component:u("/format/spec/pointer/expression","38a"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/overview",component:u("/format/spec/pointer/overview","20e"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/",component:u("/format/spec/pointer/region/","a75"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/base",component:u("/format/spec/pointer/region/base","2ed"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/location/calldata",component:u("/format/spec/pointer/region/location/calldata","352"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/location/code",component:u("/format/spec/pointer/region/location/code","bde"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/location/memory",component:u("/format/spec/pointer/region/location/memory","d08"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/location/returndata",component:u("/format/spec/pointer/region/location/returndata","424"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/location/stack",component:u("/format/spec/pointer/region/location/stack","08f"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/location/storage",component:u("/format/spec/pointer/region/location/storage","a40"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/location/transient",component:u("/format/spec/pointer/region/location/transient","3e8"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/scheme/segment",component:u("/format/spec/pointer/region/scheme/segment","acf"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/region/scheme/slice",component:u("/format/spec/pointer/region/scheme/slice","481"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/pointer/template",component:u("/format/spec/pointer/template","fec"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/",component:u("/format/spec/program/","0a6"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/concepts",component:u("/format/spec/program/concepts","fb8"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/context/",component:u("/format/spec/program/context/","223"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/context/code",component:u("/format/spec/program/context/code","782"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/context/frame",component:u("/format/spec/program/context/frame","497"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/context/gather",component:u("/format/spec/program/context/gather","972"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/context/pick",component:u("/format/spec/program/context/pick","368"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/context/remark",component:u("/format/spec/program/context/remark","c00"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/context/variables",component:u("/format/spec/program/context/variables","47f"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/example",component:u("/format/spec/program/example","61b"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/instruction",component:u("/format/spec/program/instruction","a58"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/program/overview",component:u("/format/spec/program/overview","876"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/",component:u("/format/spec/type/","ff8"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/base",component:u("/format/spec/type/base","663"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/complex/alias",component:u("/format/spec/type/complex/alias","4d3"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/complex/array",component:u("/format/spec/type/complex/array","3bd"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/complex/function",component:u("/format/spec/type/complex/function","51d"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/complex/mapping",component:u("/format/spec/type/complex/mapping","23e"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/complex/struct",component:u("/format/spec/type/complex/struct","75b"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/complex/tuple",component:u("/format/spec/type/complex/tuple","c0b"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/concepts",component:u("/format/spec/type/concepts","e7a"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/elementary/address",component:u("/format/spec/type/elementary/address","5cc"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/elementary/bool",component:u("/format/spec/type/elementary/bool","fc0"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/elementary/bytes",component:u("/format/spec/type/elementary/bytes","2b6"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/elementary/contract",component:u("/format/spec/type/elementary/contract","571"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/elementary/enum",component:u("/format/spec/type/elementary/enum","cdd"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/elementary/fixed",component:u("/format/spec/type/elementary/fixed","3d7"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/elementary/int",component:u("/format/spec/type/elementary/int","09e"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/elementary/string",component:u("/format/spec/type/elementary/string","c22"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/elementary/ufixed",component:u("/format/spec/type/elementary/ufixed","c61"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/elementary/uint",component:u("/format/spec/type/elementary/uint","6ea"),exact:!0,sidebar:"docsSidebar"},{path:"/format/spec/type/overview",component:u("/format/spec/type/overview","101"),exact:!0,sidebar:"docsSidebar"}]}]}]},{path:"/format/",component:u("/format/","610"),exact:!0},{path:"*",component:u("*")}]},14410:(e,n,t)=>{"use strict";t.d(n,{lX:()=>x,q_:()=>E,ob:()=>m,PP:()=>P,Ep:()=>p});var r=t(7896);function a(e){return"/"===e.charAt(0)}function o(e,n){for(var t=n,r=t+1,a=e.length;r<a;t+=1,r+=1)e[t]=e[r];e.pop()}const i=function(e,n){void 0===n&&(n="");var t,r=e&&e.split("/")||[],i=n&&n.split("/")||[],s=e&&a(e),l=n&&a(n),c=s||l;if(e&&a(e)?i=r:r.length&&(i.pop(),i=i.concat(r)),!i.length)return"/";if(i.length){var d=i[i.length-1];t="."===d||".."===d||""===d}else t=!1;for(var u=0,p=i.length;p>=0;p--){var m=i[p];"."===m?o(i,p):".."===m?(o(i,p),u++):u&&(o(i,p),u--)}if(!c)for(;u--;u)i.unshift("..");!c||""===i[0]||i[0]&&a(i[0])||i.unshift("");var f=i.join("/");return t&&"/"!==f.substr(-1)&&(f+="/"),f};var s=t(10362);function l(e){return"/"===e.charAt(0)?e:"/"+e}function c(e){return"/"===e.charAt(0)?e.substr(1):e}function d(e,n){return function(e,n){return 0===e.toLowerCase().indexOf(n.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(n.length))}(e,n)?e.substr(n.length):e}function u(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function p(e){var n=e.pathname,t=e.search,r=e.hash,a=n||"/";return t&&"?"!==t&&(a+="?"===t.charAt(0)?t:"?"+t),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function m(e,n,t,a){var o;"string"==typeof e?(o=function(e){var n=e||"/",t="",r="",a=n.indexOf("#");-1!==a&&(r=n.substr(a),n=n.substr(0,a));var o=n.indexOf("?");return-1!==o&&(t=n.substr(o),n=n.substr(0,o)),{pathname:n,search:"?"===t?"":t,hash:"#"===r?"":r}}(e),o.state=n):(void 0===(o=(0,r.Z)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==n&&void 0===o.state&&(o.state=n));try{o.pathname=decodeURI(o.pathname)}catch(s){throw s instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):s}return t&&(o.key=t),a?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=i(o.pathname,a.pathname)):o.pathname=a.pathname:o.pathname||(o.pathname="/"),o}function f(){var e=null;var n=[];return{setPrompt:function(n){return e=n,function(){e===n&&(e=null)}},confirmTransitionTo:function(n,t,r,a){if(null!=e){var o="function"==typeof e?e(n,t):e;"string"==typeof o?"function"==typeof r?r(o,a):a(!0):a(!1!==o)}else a(!0)},appendListener:function(e){var t=!0;function r(){t&&e.apply(void 0,arguments)}return n.push(r),function(){t=!1,n=n.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];n.forEach((function(e){return e.apply(void 0,t)}))}}}var h=!("undefined"==typeof window||!window.document||!window.document.createElement);function y(e,n){n(window.confirm(e))}var g="popstate",b="hashchange";function v(){try{return window.history.state||{}}catch(e){return{}}}function x(e){void 0===e&&(e={}),h||(0,s.Z)(!1);var n,t=window.history,a=(-1===(n=window.navigator.userAgent).indexOf("Android 2.")&&-1===n.indexOf("Android 4.0")||-1===n.indexOf("Mobile Safari")||-1!==n.indexOf("Chrome")||-1!==n.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,c=i.forceRefresh,x=void 0!==c&&c,w=i.getUserConfirmation,k=void 0===w?y:w,S=i.keyLength,$=void 0===S?6:S,j=e.basename?u(l(e.basename)):"";function E(e){var n=e||{},t=n.key,r=n.state,a=window.location,o=a.pathname+a.search+a.hash;return j&&(o=d(o,j)),m(o,r,t)}function C(){return Math.random().toString(36).substr(2,$)}var P=f();function _(e){(0,r.Z)(F,e),F.length=t.length,P.notifyListeners(F.location,F.action)}function T(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||R(E(e.state))}function O(){R(E(v()))}var A=!1;function R(e){if(A)A=!1,_();else{P.confirmTransitionTo(e,"POP",k,(function(n){n?_({action:"POP",location:e}):function(e){var n=F.location,t=I.indexOf(n.key);-1===t&&(t=0);var r=I.indexOf(e.key);-1===r&&(r=0);var a=t-r;a&&(A=!0,D(a))}(e)}))}}var N=E(v()),I=[N.key];function L(e){return j+p(e)}function D(e){t.go(e)}var M=0;function z(e){1===(M+=e)&&1===e?(window.addEventListener(g,T),o&&window.addEventListener(b,O)):0===M&&(window.removeEventListener(g,T),o&&window.removeEventListener(b,O))}var q=!1;var F={length:t.length,action:"POP",location:N,createHref:L,push:function(e,n){var r="PUSH",o=m(e,n,C(),F.location);P.confirmTransitionTo(o,r,k,(function(e){if(e){var n=L(o),i=o.key,s=o.state;if(a)if(t.pushState({key:i,state:s},null,n),x)window.location.href=n;else{var l=I.indexOf(F.location.key),c=I.slice(0,l+1);c.push(o.key),I=c,_({action:r,location:o})}else window.location.href=n}}))},replace:function(e,n){var r="REPLACE",o=m(e,n,C(),F.location);P.confirmTransitionTo(o,r,k,(function(e){if(e){var n=L(o),i=o.key,s=o.state;if(a)if(t.replaceState({key:i,state:s},null,n),x)window.location.replace(n);else{var l=I.indexOf(F.location.key);-1!==l&&(I[l]=o.key),_({action:r,location:o})}else window.location.replace(n)}}))},go:D,goBack:function(){D(-1)},goForward:function(){D(1)},block:function(e){void 0===e&&(e=!1);var n=P.setPrompt(e);return q||(z(1),q=!0),function(){return q&&(q=!1,z(-1)),n()}},listen:function(e){var n=P.appendListener(e);return z(1),function(){z(-1),n()}}};return F}var w="hashchange",k={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+c(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:c,decodePath:l},slash:{encodePath:l,decodePath:l}};function S(e){var n=e.indexOf("#");return-1===n?e:e.slice(0,n)}function $(){var e=window.location.href,n=e.indexOf("#");return-1===n?"":e.substring(n+1)}function j(e){window.location.replace(S(window.location.href)+"#"+e)}function E(e){void 0===e&&(e={}),h||(0,s.Z)(!1);var n=window.history,t=(window.navigator.userAgent.indexOf("Firefox"),e),a=t.getUserConfirmation,o=void 0===a?y:a,i=t.hashType,c=void 0===i?"slash":i,g=e.basename?u(l(e.basename)):"",b=k[c],v=b.encodePath,x=b.decodePath;function E(){var e=x($());return g&&(e=d(e,g)),m(e)}var C=f();function P(e){(0,r.Z)(q,e),q.length=n.length,C.notifyListeners(q.location,q.action)}var _=!1,T=null;function O(){var e,n,t=$(),r=v(t);if(t!==r)j(r);else{var a=E(),i=q.location;if(!_&&(n=a,(e=i).pathname===n.pathname&&e.search===n.search&&e.hash===n.hash))return;if(T===p(a))return;T=null,function(e){if(_)_=!1,P();else{var n="POP";C.confirmTransitionTo(e,n,o,(function(t){t?P({action:n,location:e}):function(e){var n=q.location,t=I.lastIndexOf(p(n));-1===t&&(t=0);var r=I.lastIndexOf(p(e));-1===r&&(r=0);var a=t-r;a&&(_=!0,L(a))}(e)}))}}(a)}}var A=$(),R=v(A);A!==R&&j(R);var N=E(),I=[p(N)];function L(e){n.go(e)}var D=0;function M(e){1===(D+=e)&&1===e?window.addEventListener(w,O):0===D&&window.removeEventListener(w,O)}var z=!1;var q={length:n.length,action:"POP",location:N,createHref:function(e){var n=document.querySelector("base"),t="";return n&&n.getAttribute("href")&&(t=S(window.location.href)),t+"#"+v(g+p(e))},push:function(e,n){var t="PUSH",r=m(e,void 0,void 0,q.location);C.confirmTransitionTo(r,t,o,(function(e){if(e){var n=p(r),a=v(g+n);if($()!==a){T=n,function(e){window.location.hash=e}(a);var o=I.lastIndexOf(p(q.location)),i=I.slice(0,o+1);i.push(n),I=i,P({action:t,location:r})}else P()}}))},replace:function(e,n){var t="REPLACE",r=m(e,void 0,void 0,q.location);C.confirmTransitionTo(r,t,o,(function(e){if(e){var n=p(r),a=v(g+n);$()!==a&&(T=n,j(a));var o=I.indexOf(p(q.location));-1!==o&&(I[o]=n),P({action:t,location:r})}}))},go:L,goBack:function(){L(-1)},goForward:function(){L(1)},block:function(e){void 0===e&&(e=!1);var n=C.setPrompt(e);return z||(M(1),z=!0),function(){return z&&(z=!1,M(-1)),n()}},listen:function(e){var n=C.appendListener(e);return M(1),function(){M(-1),n()}}};return q}function C(e,n,t){return Math.min(Math.max(e,n),t)}function P(e){void 0===e&&(e={});var n=e,t=n.getUserConfirmation,a=n.initialEntries,o=void 0===a?["/"]:a,i=n.initialIndex,s=void 0===i?0:i,l=n.keyLength,c=void 0===l?6:l,d=f();function u(e){(0,r.Z)(x,e),x.length=x.entries.length,d.notifyListeners(x.location,x.action)}function h(){return Math.random().toString(36).substr(2,c)}var y=C(s,0,o.length-1),g=o.map((function(e){return m(e,void 0,"string"==typeof e?h():e.key||h())})),b=p;function v(e){var n=C(x.index+e,0,x.entries.length-1),r=x.entries[n];d.confirmTransitionTo(r,"POP",t,(function(e){e?u({action:"POP",location:r,index:n}):u()}))}var x={length:g.length,action:"POP",location:g[y],index:y,entries:g,createHref:b,push:function(e,n){var r="PUSH",a=m(e,n,h(),x.location);d.confirmTransitionTo(a,r,t,(function(e){if(e){var n=x.index+1,t=x.entries.slice(0);t.length>n?t.splice(n,t.length-n,a):t.push(a),u({action:r,location:a,index:n,entries:t})}}))},replace:function(e,n){var r="REPLACE",a=m(e,n,h(),x.location);d.confirmTransitionTo(a,r,t,(function(e){e&&(x.entries[x.index]=a,u({action:r,location:a}))}))},go:v,goBack:function(){v(-1)},goForward:function(){v(1)},canGo:function(e){var n=x.index+e;return n>=0&&n<x.entries.length},block:function(e){return void 0===e&&(e=!1),d.setPrompt(e)},listen:function(e){return d.appendListener(e)}};return x}},73463:(e,n,t)=>{"use strict";var r=t(48570),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?i:s[e.$$typeof]||a}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=i;var c=Object.defineProperty,d=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,m=Object.getPrototypeOf,f=Object.prototype;e.exports=function e(n,t,r){if("string"!=typeof t){if(f){var a=m(t);a&&a!==f&&e(n,a,r)}var i=d(t);u&&(i=i.concat(u(t)));for(var s=l(n),h=l(t),y=0;y<i.length;++y){var g=i[y];if(!(o[g]||r&&r[g]||h&&h[g]||s&&s[g])){var b=p(t,g);try{c(n,g,b)}catch(v){}}}}return n}},47677:e=>{"use strict";e.exports=function(e,n,t,r,a,o,i,s){if(!e){var l;if(void 0===n)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[t,r,a,o,i,s],d=0;(l=new Error(n.replace(/%s/g,(function(){return c[d++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},77906:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},55749:(e,n,t)=>{"use strict";t.r(n)},1964:(e,n,t)=>{"use strict";t.r(n)},92521:function(e,n,t){var r,a;r=function(){var e,n,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(e,n,t){return e<n?n:e>t?t:e}function o(e){return 100*(-1+e)}function i(e,n,t){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+o(e)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+o(e)+"%,0)"}:{"margin-left":o(e)+"%"}).transition="all "+n+"ms "+t,a}t.configure=function(e){var n,t;for(n in e)void 0!==(t=e[n])&&e.hasOwnProperty(n)&&(r[n]=t);return this},t.status=null,t.set=function(e){var n=t.isStarted();e=a(e,r.minimum,1),t.status=1===e?null:e;var o=t.render(!n),c=o.querySelector(r.barSelector),d=r.speed,u=r.easing;return o.offsetWidth,s((function(n){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),l(c,i(e,d,u)),1===e?(l(o,{transition:"none",opacity:1}),o.offsetWidth,setTimeout((function(){l(o,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),n()}),d)}),d)):setTimeout(n,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var e=function(){setTimeout((function(){t.status&&(t.trickle(),e())}),r.trickleSpeed)};return r.trickle&&e(),this},t.done=function(e){return e||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(e){var n=t.status;return n?("number"!=typeof e&&(e=(1-n)*a(Math.random()*n,.1,.95)),n=a(n+e,0,.994),t.set(n)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},e=0,n=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===n&&t.start(),e++,n++,r.always((function(){0==--n?(e=0,t.done()):t.set((e-n)/e)})),this):this},t.render=function(e){if(t.isRendered())return document.getElementById("nprogress");d(document.documentElement,"nprogress-busy");var n=document.createElement("div");n.id="nprogress",n.innerHTML=r.template;var a,i=n.querySelector(r.barSelector),s=e?"-100":o(t.status||0),c=document.querySelector(r.parent);return l(i,{transition:"all 0 linear",transform:"translate3d("+s+"%,0,0)"}),r.showSpinner||(a=n.querySelector(r.spinnerSelector))&&m(a),c!=document.body&&d(c,"nprogress-custom-parent"),c.appendChild(n),n},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&m(e)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var e=document.body.style,n="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return n+"Perspective"in e?"translate3d":n+"Transform"in e?"translate":"margin"};var s=function(){var e=[];function n(){var t=e.shift();t&&t(n)}return function(t){e.push(t),1==e.length&&n()}}(),l=function(){var e=["Webkit","O","Moz","ms"],n={};function t(e){return e.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,n){return n.toUpperCase()}))}function r(n){var t=document.body.style;if(n in t)return n;for(var r,a=e.length,o=n.charAt(0).toUpperCase()+n.slice(1);a--;)if((r=e[a]+o)in t)return r;return n}function a(e){return e=t(e),n[e]||(n[e]=r(e))}function o(e,n,t){n=a(n),e.style[n]=t}return function(e,n){var t,r,a=arguments;if(2==a.length)for(t in n)void 0!==(r=n[t])&&n.hasOwnProperty(t)&&o(e,t,r);else o(e,a[1],a[2])}}();function c(e,n){return("string"==typeof e?e:p(e)).indexOf(" "+n+" ")>=0}function d(e,n){var t=p(e),r=t+n;c(t,n)||(e.className=r.substring(1))}function u(e,n){var t,r=p(e);c(e,n)&&(t=r.replace(" "+n+" "," "),e.className=t.substring(1,t.length-1))}function p(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function m(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return t},void 0===(a="function"==typeof r?r.call(n,t,n,e):r)||(e.exports=a)},62363:()=>{Prism.languages.json={property:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,lookbehind:!0,greedy:!0},comment:{pattern:/\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},number:/-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,punctuation:/[{}[\],]/,operator:/:/,boolean:/\b(?:false|true)\b/,null:{pattern:/\bnull\b/,alias:"keyword"}},Prism.languages.webmanifest=Prism.languages.json},23502:()=>{!function(e){function n(e,n){return"___"+e.toUpperCase()+n+"___"}Object.defineProperties(e.languages["markup-templating"]={},{buildPlaceholders:{value:function(t,r,a,o){if(t.language===r){var i=t.tokenStack=[];t.code=t.code.replace(a,(function(e){if("function"==typeof o&&!o(e))return e;for(var a,s=i.length;-1!==t.code.indexOf(a=n(r,s));)++s;return i[s]=e,a})),t.grammar=e.languages.markup}}},tokenizePlaceholders:{value:function(t,r){if(t.language===r&&t.tokenStack){t.grammar=e.languages[r];var a=0,o=Object.keys(t.tokenStack);!function i(s){for(var l=0;l<s.length&&!(a>=o.length);l++){var c=s[l];if("string"==typeof c||c.content&&"string"==typeof c.content){var d=o[a],u=t.tokenStack[d],p="string"==typeof c?c:c.content,m=n(r,d),f=p.indexOf(m);if(f>-1){++a;var h=p.substring(0,f),y=new e.Token(r,e.tokenize(u,t.grammar),"language-"+r,u),g=p.substring(f+m.length),b=[];h&&b.push.apply(b,i([h])),b.push(y),g&&b.push.apply(b,i([g])),"string"==typeof c?s.splice.apply(s,[l,1].concat(b)):c.content=b}}else c.content&&i(c.content)}return s}(t.tokens)}}}})}(Prism)},97861:(e,n,t)=>{var r={"./prism-json":62363};function a(e){var n=o(e);return t(n)}function o(e){if(!t.o(r,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id=97861},68262:(e,n,t)=>{"use strict";var r=t(23586);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,n,t,a,o,i){if(i!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function n(){return e}e.isRequired=e;var t={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:o,resetWarningCache:a};return t.PropTypes=t,t}},13980:(e,n,t)=>{e.exports=t(68262)()},23586:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},52967:(e,n,t)=>{"use strict";var r=t(2784),a=t(14616);function o(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,s={};function l(e,n){c(e,n),c(e+"Capture",n)}function c(e,n){for(s[e]=n,e=0;e<n.length;e++)i.add(n[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),u=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,m={},f={};function h(e,n,t,r,a,o,i){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=o,this.removeEmptyString=i}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];y[n]=new h(n,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function v(e,n,t,r){var a=y.hasOwnProperty(n)?y[n]:null;(null!==a?0!==a.type:r||!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,a,r)&&(t=null),r||null===a?function(e){return!!u.call(f,e)||!u.call(m,e)&&(p.test(e)?f[e]=!0:(m[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,""+t)):a.mustUseProperty?e[a.propertyName]=null===t?3!==a.type&&"":t:(n=a.attributeName,r=a.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(a=a.type)||4===a&&!0===t?"":""+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(g,b);y[n]=new h(n,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(g,b);y[n]=new h(n,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(g,b);y[n]=new h(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),k=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),$=Symbol.for("react.strict_mode"),j=Symbol.for("react.profiler"),E=Symbol.for("react.provider"),C=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),_=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),A=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var L,D=Object.assign;function M(e){if(void 0===L)try{throw Error()}catch(t){var n=t.stack.trim().match(/\n( *(at )?)/);L=n&&n[1]||""}return"\n"+L+e}var z=!1;function q(e,n){if(!e||z)return"";z=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(c){var r=c}Reflect.construct(e,[],n)}else{try{n.call()}catch(c){r=c}e.call(n.prototype)}else{try{throw Error()}catch(c){r=c}e()}}catch(c){if(c&&r&&"string"==typeof c.stack){for(var a=c.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,s=o.length-1;1<=i&&0<=s&&a[i]!==o[s];)s--;for(;1<=i&&0<=s;i--,s--)if(a[i]!==o[s]){if(1!==i||1!==s)do{if(i--,0>--s||a[i]!==o[s]){var l="\n"+a[i].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=i&&0<=s);break}}}finally{z=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:"")?M(e):""}function F(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return e=q(e.type,!1);case 11:return e=q(e.type.render,!1);case 1:return e=q(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case j:return"Profiler";case $:return"StrictMode";case _:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case E:return(e._context.displayName||"Context")+".Provider";case P:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(n=e.displayName||null)?n:U(e.type)||"Memo";case A:n=e._payload,e=e._init;try{return U(e(n))}catch(t){}}return null}function B(e){var n=e.type;switch(e.tag){case 24:return"Cache";case 9:return(n.displayName||"Context")+".Consumer";case 10:return(n._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=n.render).displayName||e.name||"",n.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return n;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(n);case 8:return n===$?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof n)return n.displayName||n.name||null;if("string"==typeof n)return n}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function W(e){e._valueTracker||(e._valueTracker=function(e){var n=H(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var a=t.get,o=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function Z(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function G(e,n){var t=n.checked;return D({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function Y(e,n){var t=null==n.defaultValue?"":n.defaultValue,r=null!=n.checked?n.checked:n.defaultChecked;t=V(null!=n.value?n.value:t),e._wrapperState={initialChecked:r,initialValue:t,controlled:"checkbox"===n.type||"radio"===n.type?null!=n.checked:null!=n.value}}function J(e,n){null!=(n=n.checked)&&v(e,"checked",n,!1)}function Q(e,n){J(e,n);var t=V(n.value),r=n.type;if(null!=t)"number"===r?(0===t&&""===e.value||e.value!=t)&&(e.value=""+t):e.value!==""+t&&(e.value=""+t);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");n.hasOwnProperty("value")?ee(e,n.type,t):n.hasOwnProperty("defaultValue")&&ee(e,n.type,V(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function X(e,n,t){if(n.hasOwnProperty("value")||n.hasOwnProperty("defaultValue")){var r=n.type;if(!("submit"!==r&&"reset"!==r||void 0!==n.value&&null!==n.value))return;n=""+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==t&&(e.name=t)}function ee(e,n,t){"number"===n&&K(e.ownerDocument)===e||(null==t?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+t&&(e.defaultValue=""+t))}var ne=Array.isArray;function te(e,n,t,r){if(e=e.options,n){n={};for(var a=0;a<t.length;a++)n["$"+t[a]]=!0;for(t=0;t<e.length;t++)a=n.hasOwnProperty("$"+e[t].value),e[t].selected!==a&&(e[t].selected=a),a&&r&&(e[t].defaultSelected=!0)}else{for(t=""+V(t),n=null,a=0;a<e.length;a++){if(e[a].value===t)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==n||e[a].disabled||(n=e[a])}null!==n&&(n.selected=!0)}}function re(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(o(91));return D({},n,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(o(92));if(ne(t)){if(1<t.length)throw Error(o(93));t=t[0]}n=t}null==n&&(n=""),t=n}e._wrapperState={initialValue:V(t)}}function oe(e,n){var t=V(n.value),r=V(n.defaultValue);null!=t&&((t=""+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=""+r)}function ie(e){var n=e.textContent;n===e._wrapperState.initialValue&&""!==n&&null!==n&&(e.value=n)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,n){return null==e||"http://www.w3.org/1999/xhtml"===e?se(n):"http://www.w3.org/2000/svg"===e&&"foreignObject"===n?"http://www.w3.org/1999/xhtml":e}var ce,de,ue=(de=function(e,n){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=n;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+n.valueOf().toString()+"</svg>",n=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,n,t,r){MSApp.execUnsafeLocalFunction((function(){return de(e,n)}))}:de);function pe(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var me={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},fe=["Webkit","ms","Moz","O"];function he(e,n,t){return null==n||"boolean"==typeof n||""===n?"":t||"number"!=typeof n||0===n||me.hasOwnProperty(e)&&me[e]?(""+n).trim():n+"px"}function ye(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf("--"),a=he(t,n[t],r);"float"===t&&(t="cssFloat"),r?e.setProperty(t,a):e[t]=a}}Object.keys(me).forEach((function(e){fe.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),me[n]=me[e]}))}));var ge=D({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,n){if(n){if(ge[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(o(60));if("object"!=typeof n.dangerouslySetInnerHTML||!("__html"in n.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=n.style&&"object"!=typeof n.style)throw Error(o(62))}}function ve(e,n){if(-1===e.indexOf("-"))return"string"==typeof n.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Se=null,$e=null;function je(e){if(e=va(e)){if("function"!=typeof ke)throw Error(o(280));var n=e.stateNode;n&&(n=wa(n),ke(e.stateNode,e.type,n))}}function Ee(e){Se?$e?$e.push(e):$e=[e]:Se=e}function Ce(){if(Se){var e=Se,n=$e;if($e=Se=null,je(e),n)for(e=0;e<n.length;e++)je(n[e])}}function Pe(e,n){return e(n)}function _e(){}var Te=!1;function Oe(e,n,t){if(Te)return e(n,t);Te=!0;try{return Pe(e,n,t)}finally{Te=!1,(null!==Se||null!==$e)&&(_e(),Ce())}}function Ae(e,n){var t=e.stateNode;if(null===t)return null;var r=wa(t);if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(o(231,n,typeof t));return t}var Re=!1;if(d)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(de){Re=!1}function Ie(e,n,t,r,a,o,i,s,l){var c=Array.prototype.slice.call(arguments,3);try{n.apply(t,c)}catch(d){this.onError(d)}}var Le=!1,De=null,Me=!1,ze=null,qe={onError:function(e){Le=!0,De=e}};function Fe(e,n,t,r,a,o,i,s,l){Le=!1,De=null,Ie.apply(qe,arguments)}function Ue(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{0!=(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function Be(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&(null!==(e=e.alternate)&&(n=e.memoizedState)),null!==n)return n.dehydrated}return null}function Ve(e){if(Ue(e)!==e)throw Error(o(188))}function He(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=Ue(e)))throw Error(o(188));return n!==e?null:e}for(var t=e,r=n;;){var a=t.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){t=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===t)return Ve(a),e;if(i===r)return Ve(a),n;i=i.sibling}throw Error(o(188))}if(t.return!==r.return)t=a,r=i;else{for(var s=!1,l=a.child;l;){if(l===t){s=!0,t=a,r=i;break}if(l===r){s=!0,r=a,t=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===t){s=!0,t=i,r=a;break}if(l===r){s=!0,r=i,t=a;break}l=l.sibling}if(!s)throw Error(o(189))}}if(t.alternate!==r)throw Error(o(190))}if(3!==t.tag)throw Error(o(188));return t.stateNode.current===t?e:n}(e))?We(e):null}function We(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var n=We(e);if(null!==n)return n;e=e.sibling}return null}var Ze=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Ge=a.unstable_shouldYield,Ye=a.unstable_requestPaint,Je=a.unstable_now,Qe=a.unstable_getCurrentPriorityLevel,Xe=a.unstable_ImmediatePriority,en=a.unstable_UserBlockingPriority,nn=a.unstable_NormalPriority,tn=a.unstable_LowPriority,rn=a.unstable_IdlePriority,an=null,on=null;var sn=Math.clz32?Math.clz32:function(e){return e>>>=0,0===e?32:31-(ln(e)/cn|0)|0},ln=Math.log,cn=Math.LN2;var dn=64,un=4194304;function pn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function mn(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&t;if(0!==i){var s=i&~a;0!==s?r=pn(s):0!==(o&=i)&&(r=pn(o))}else 0!==(i=t&~a)?r=pn(i):0!==o&&(r=pn(o));if(0===r)return 0;if(0!==n&&n!==r&&0==(n&a)&&((a=r&-r)>=(o=n&-n)||16===a&&0!=(4194240&o)))return n;if(0!=(4&r)&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)a=1<<(t=31-sn(n)),r|=e[t],n&=~a;return r}function fn(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function hn(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function yn(){var e=dn;return 0==(4194240&(dn<<=1))&&(dn=64),e}function gn(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function bn(e,n,t){e.pendingLanes|=n,536870912!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-sn(n)]=t}function vn(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-sn(t),a=1<<r;a&n|e[r]&n&&(e[r]|=n),t&=~a}}var xn=0;function wn(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var kn,Sn,$n,jn,En,Cn=!1,Pn=[],_n=null,Tn=null,On=null,An=new Map,Rn=new Map,Nn=[],In="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ln(e,n){switch(e){case"focusin":case"focusout":_n=null;break;case"dragenter":case"dragleave":Tn=null;break;case"mouseover":case"mouseout":On=null;break;case"pointerover":case"pointerout":An.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rn.delete(n.pointerId)}}function Dn(e,n,t,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==n&&(null!==(n=va(n))&&Sn(n)),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==a&&-1===n.indexOf(a)&&n.push(a),e)}function Mn(e){var n=ba(e.target);if(null!==n){var t=Ue(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=Be(t)))return e.blockedOn=n,void En(e.priority,(function(){$n(t)}))}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function zn(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Yn(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=va(t))&&Sn(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);xe=r,t.target.dispatchEvent(r),xe=null,n.shift()}return!0}function qn(e,n,t){zn(e)&&t.delete(n)}function Fn(){Cn=!1,null!==_n&&zn(_n)&&(_n=null),null!==Tn&&zn(Tn)&&(Tn=null),null!==On&&zn(On)&&(On=null),An.forEach(qn),Rn.forEach(qn)}function Un(e,n){e.blockedOn===n&&(e.blockedOn=null,Cn||(Cn=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Fn)))}function Bn(e){function n(n){return Un(n,e)}if(0<Pn.length){Un(Pn[0],e);for(var t=1;t<Pn.length;t++){var r=Pn[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_n&&Un(_n,e),null!==Tn&&Un(Tn,e),null!==On&&Un(On,e),An.forEach(n),Rn.forEach(n),t=0;t<Nn.length;t++)(r=Nn[t]).blockedOn===e&&(r.blockedOn=null);for(;0<Nn.length&&null===(t=Nn[0]).blockedOn;)Mn(t),null===t.blockedOn&&Nn.shift()}var Vn=x.ReactCurrentBatchConfig,Hn=!0;function Wn(e,n,t,r){var a=xn,o=Vn.transition;Vn.transition=null;try{xn=1,Kn(e,n,t,r)}finally{xn=a,Vn.transition=o}}function Zn(e,n,t,r){var a=xn,o=Vn.transition;Vn.transition=null;try{xn=4,Kn(e,n,t,r)}finally{xn=a,Vn.transition=o}}function Kn(e,n,t,r){if(Hn){var a=Yn(e,n,t,r);if(null===a)Vr(e,n,r,Gn,t),Ln(e,r);else if(function(e,n,t,r,a){switch(n){case"focusin":return _n=Dn(_n,e,n,t,r,a),!0;case"dragenter":return Tn=Dn(Tn,e,n,t,r,a),!0;case"mouseover":return On=Dn(On,e,n,t,r,a),!0;case"pointerover":var o=a.pointerId;return An.set(o,Dn(An.get(o)||null,e,n,t,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Rn.set(o,Dn(Rn.get(o)||null,e,n,t,r,a)),!0}return!1}(a,e,n,t,r))r.stopPropagation();else if(Ln(e,r),4&n&&-1<In.indexOf(e)){for(;null!==a;){var o=va(a);if(null!==o&&kn(o),null===(o=Yn(e,n,t,r))&&Vr(e,n,r,Gn,t),o===a)break;a=o}null!==a&&r.stopPropagation()}else Vr(e,n,r,null,t)}}var Gn=null;function Yn(e,n,t,r){if(Gn=null,null!==(e=ba(e=we(r))))if(null===(n=Ue(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=Be(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return Gn=e,null}function Jn(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Qe()){case Xe:return 1;case en:return 4;case nn:case tn:return 16;case rn:return 536870912;default:return 16}default:return 16}}var Qn=null,Xn=null,et=null;function nt(){if(et)return et;var e,n,t=Xn,r=t.length,a="value"in Qn?Qn.value:Qn.textContent,o=a.length;for(e=0;e<r&&t[e]===a[e];e++);var i=r-e;for(n=1;n<=i&&t[r-n]===a[o-n];n++);return et=a.slice(e,1<n?1-n:void 0)}function tt(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function rt(){return!0}function at(){return!1}function ot(e){function n(n,t,r,a,o){for(var i in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(n=e[i],this[i]=n?n(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rt:at,this.isPropagationStopped=at,this}return D(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rt)},persist:function(){},isPersistent:rt}),n}var it,st,lt,ct={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dt=ot(ct),ut=D({},ct,{view:0,detail:0}),pt=ot(ut),mt=D({},ut,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:jt,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==lt&&(lt&&"mousemove"===e.type?(it=e.screenX-lt.screenX,st=e.screenY-lt.screenY):st=it=0,lt=e),it)},movementY:function(e){return"movementY"in e?e.movementY:st}}),ft=ot(mt),ht=ot(D({},mt,{dataTransfer:0})),yt=ot(D({},ut,{relatedTarget:0})),gt=ot(D({},ct,{animationName:0,elapsedTime:0,pseudoElement:0})),bt=D({},ct,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),vt=ot(bt),xt=ot(D({},ct,{data:0})),wt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},St={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function $t(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=St[e])&&!!n[e]}function jt(){return $t}var Et=D({},ut,{key:function(e){if(e.key){var n=wt[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=tt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kt[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:jt,charCode:function(e){return"keypress"===e.type?tt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ct=ot(Et),Pt=ot(D({},mt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_t=ot(D({},ut,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:jt})),Tt=ot(D({},ct,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ot=D({},mt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),At=ot(Ot),Rt=[9,13,27,32],Nt=d&&"CompositionEvent"in window,It=null;d&&"documentMode"in document&&(It=document.documentMode);var Lt=d&&"TextEvent"in window&&!It,Dt=d&&(!Nt||It&&8<It&&11>=It),Mt=String.fromCharCode(32),zt=!1;function qt(e,n){switch(e){case"keyup":return-1!==Rt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ft(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ut=!1;var Bt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Bt[e.type]:"textarea"===n}function Ht(e,n,t,r){Ee(r),0<(n=Wr(n,"onChange")).length&&(t=new dt("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var Wt=null,Zt=null;function Kt(e){Mr(e,0)}function Gt(e){if(Z(xa(e)))return e}function Yt(e,n){if("change"===e)return n}var Jt=!1;if(d){var Qt;if(d){var Xt="oninput"in document;if(!Xt){var er=document.createElement("div");er.setAttribute("oninput","return;"),Xt="function"==typeof er.oninput}Qt=Xt}else Qt=!1;Jt=Qt&&(!document.documentMode||9<document.documentMode)}function nr(){Wt&&(Wt.detachEvent("onpropertychange",tr),Zt=Wt=null)}function tr(e){if("value"===e.propertyName&&Gt(Zt)){var n=[];Ht(n,Zt,e,we(e)),Oe(Kt,n)}}function rr(e,n,t){"focusin"===e?(nr(),Zt=t,(Wt=n).attachEvent("onpropertychange",tr)):"focusout"===e&&nr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gt(Zt)}function or(e,n){if("click"===e)return Gt(n)}function ir(e,n){if("input"===e||"change"===e)return Gt(n)}var sr="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function lr(e,n){if(sr(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var a=t[r];if(!u.call(n,a)||!sr(e[a],n[a]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dr(e,n){var t,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function ur(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?ur(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function pr(){for(var e=window,n=K();n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(r){t=!1}if(!t)break;n=K((e=n.contentWindow).document)}return n}function mr(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function fr(e){var n=pr(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&ur(t.ownerDocument.documentElement,t)){if(null!==r&&mr(t))if(n=r.start,void 0===(e=r.end)&&(e=n),"selectionStart"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var a=t.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=dr(t,o);var i=dr(t,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((n=n.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(n),e.extend(i.node,i.offset)):(n.setEnd(i.node,i.offset),e.addRange(n)))}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=d&&"documentMode"in document&&11>=document.documentMode,yr=null,gr=null,br=null,vr=!1;function xr(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;vr||null==yr||yr!==K(r)||("selectionStart"in(r=yr)&&mr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&lr(br,r)||(br=r,0<(r=Wr(gr,"onSelect")).length&&(n=new dt("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=yr)))}function wr(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var kr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Sr={},$r={};function jr(e){if(Sr[e])return Sr[e];if(!kr[e])return e;var n,t=kr[e];for(n in t)if(t.hasOwnProperty(n)&&n in $r)return Sr[e]=t[n];return e}d&&($r=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Er=jr("animationend"),Cr=jr("animationiteration"),Pr=jr("animationstart"),_r=jr("transitionend"),Tr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ar(e,n){Tr.set(e,n),l(n,[e])}for(var Rr=0;Rr<Or.length;Rr++){var Nr=Or[Rr];Ar(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Ar(Er,"onAnimationEnd"),Ar(Cr,"onAnimationIteration"),Ar(Pr,"onAnimationStart"),Ar("dblclick","onDoubleClick"),Ar("focusin","onFocus"),Ar("focusout","onBlur"),Ar(_r,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Dr(e,n,t){var r=e.type||"unknown-event";e.currentTarget=t,function(e,n,t,r,a,i,s,l,c){if(Fe.apply(this,arguments),Le){if(!Le)throw Error(o(198));var d=De;Le=!1,De=null,Me||(Me=!0,ze=d)}}(r,n,void 0,e),e.currentTarget=null}function Mr(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],a=r.event;r=r.listeners;e:{var o=void 0;if(n)for(var i=r.length-1;0<=i;i--){var s=r[i],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&a.isPropagationStopped())break e;Dr(a,s,c),o=l}else for(i=0;i<r.length;i++){if(l=(s=r[i]).instance,c=s.currentTarget,s=s.listener,l!==o&&a.isPropagationStopped())break e;Dr(a,s,c),o=l}}}if(Me)throw e=ze,Me=!1,ze=null,e}function zr(e,n){var t=n[ha];void 0===t&&(t=n[ha]=new Set);var r=e+"__bubble";t.has(r)||(Br(n,e,2,!1),t.add(r))}function qr(e,n,t){var r=0;n&&(r|=4),Br(t,e,r,n)}var Fr="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[Fr]){e[Fr]=!0,i.forEach((function(n){"selectionchange"!==n&&(Lr.has(n)||qr(n,!1,e),qr(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Fr]||(n[Fr]=!0,qr("selectionchange",!1,n))}}function Br(e,n,t,r){switch(Jn(n)){case 1:var a=Wn;break;case 4:a=Zn;break;default:a=Kn}t=a.bind(null,n,t,e),a=void 0,!Re||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(a=!0),r?void 0!==a?e.addEventListener(n,t,{capture:!0,passive:a}):e.addEventListener(n,t,!0):void 0!==a?e.addEventListener(n,t,{passive:a}):e.addEventListener(n,t,!1)}function Vr(e,n,t,r,a){var o=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===a||8===s.nodeType&&s.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===a||8===l.nodeType&&l.parentNode===a))return;i=i.return}for(;null!==s;){if(null===(i=ba(s)))return;if(5===(l=i.tag)||6===l){r=o=i;continue e}s=s.parentNode}}r=r.return}Oe((function(){var r=o,a=we(t),i=[];e:{var s=Tr.get(e);if(void 0!==s){var l=dt,c=e;switch(e){case"keypress":if(0===tt(t))break e;case"keydown":case"keyup":l=Ct;break;case"focusin":c="focus",l=yt;break;case"focusout":c="blur",l=yt;break;case"beforeblur":case"afterblur":l=yt;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=ft;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=ht;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=_t;break;case Er:case Cr:case Pr:l=gt;break;case _r:l=Tt;break;case"scroll":l=pt;break;case"wheel":l=At;break;case"copy":case"cut":case"paste":l=vt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pt}var d=0!=(4&n),u=!d&&"scroll"===e,p=d?null!==s?s+"Capture":null:s;d=[];for(var m,f=r;null!==f;){var h=(m=f).stateNode;if(5===m.tag&&null!==h&&(m=h,null!==p&&(null!=(h=Ae(f,p))&&d.push(Hr(f,h,m)))),u)break;f=f.return}0<d.length&&(s=new l(s,c,null,t,a),i.push({event:s,listeners:d}))}}if(0==(7&n)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||t===xe||!(c=t.relatedTarget||t.fromElement)||!ba(c)&&!c[fa])&&(l||s)&&(s=a.window===a?a:(s=a.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=t.relatedTarget||t.toElement)?ba(c):null)&&(c!==(u=Ue(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(d=ft,h="onMouseLeave",p="onMouseEnter",f="mouse","pointerout"!==e&&"pointerover"!==e||(d=Pt,h="onPointerLeave",p="onPointerEnter",f="pointer"),u=null==l?s:xa(l),m=null==c?s:xa(c),(s=new d(h,f+"leave",l,t,a)).target=u,s.relatedTarget=m,h=null,ba(a)===r&&((d=new d(p,f+"enter",c,t,a)).target=m,d.relatedTarget=u,h=d),u=h,l&&c)e:{for(p=c,f=0,m=d=l;m;m=Zr(m))f++;for(m=0,h=p;h;h=Zr(h))m++;for(;0<f-m;)d=Zr(d),f--;for(;0<m-f;)p=Zr(p),m--;for(;f--;){if(d===p||null!==p&&d===p.alternate)break e;d=Zr(d),p=Zr(p)}d=null}else d=null;null!==l&&Kr(i,s,l,d,!1),null!==c&&null!==u&&Kr(i,u,c,d,!0)}if("select"===(l=(s=r?xa(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var y=Yt;else if(Vt(s))if(Jt)y=ir;else{y=ar;var g=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(y=or);switch(y&&(y=y(e,r))?Ht(i,y,t,a):(g&&g(e,s,r),"focusout"===e&&(g=s._wrapperState)&&g.controlled&&"number"===s.type&&ee(s,"number",s.value)),g=r?xa(r):window,e){case"focusin":(Vt(g)||"true"===g.contentEditable)&&(yr=g,gr=r,br=null);break;case"focusout":br=gr=yr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,xr(i,t,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":xr(i,t,a)}var b;if(Nt)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else Ut?qt(e,t)&&(v="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(v="onCompositionStart");v&&(Dt&&"ko"!==t.locale&&(Ut||"onCompositionStart"!==v?"onCompositionEnd"===v&&Ut&&(b=nt()):(Xn="value"in(Qn=a)?Qn.value:Qn.textContent,Ut=!0)),0<(g=Wr(r,v)).length&&(v=new xt(v,e,null,t,a),i.push({event:v,listeners:g}),b?v.data=b:null!==(b=Ft(t))&&(v.data=b))),(b=Lt?function(e,n){switch(e){case"compositionend":return Ft(n);case"keypress":return 32!==n.which?null:(zt=!0,Mt);case"textInput":return(e=n.data)===Mt&&zt?null:e;default:return null}}(e,t):function(e,n){if(Ut)return"compositionend"===e||!Nt&&qt(e,n)?(e=nt(),et=Xn=Qn=null,Ut=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Dt&&"ko"!==n.locale?null:n.data}}(e,t))&&(0<(r=Wr(r,"onBeforeInput")).length&&(a=new xt("onBeforeInput","beforeinput",null,t,a),i.push({event:a,listeners:r}),a.data=b))}Mr(i,n)}))}function Hr(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Wr(e,n){for(var t=n+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Ae(e,t))&&r.unshift(Hr(e,o,a)),null!=(o=Ae(e,n))&&r.push(Hr(e,o,a))),e=e.return}return r}function Zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,n,t,r,a){for(var o=n._reactName,i=[];null!==t&&t!==r;){var s=t,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,a?null!=(l=Ae(t,o))&&i.unshift(Hr(t,l,s)):a||null!=(l=Ae(t,o))&&i.push(Hr(t,l,s))),t=t.return}0!==i.length&&e.push({event:n,listeners:i})}var Gr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Jr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Yr,"")}function Qr(e,n,t){if(n=Jr(n),Jr(e)!==n&&t)throw Error(o(425))}function Xr(){}var ea=null,na=null;function ta(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(sa)}:ra;function sa(e){setTimeout((function(){throw e}))}function la(e,n){var t=n,r=0;do{var a=t.nextSibling;if(e.removeChild(t),a&&8===a.nodeType)if("/$"===(t=a.data)){if(0===r)return e.removeChild(a),void Bn(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=a}while(t);Bn(n)}function ca(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n)break;if("/$"===n)return null}}return e}function da(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}var ua=Math.random().toString(36).slice(2),pa="__reactFiber$"+ua,ma="__reactProps$"+ua,fa="__reactContainer$"+ua,ha="__reactEvents$"+ua,ya="__reactListeners$"+ua,ga="__reactHandles$"+ua;function ba(e){var n=e[pa];if(n)return n;for(var t=e.parentNode;t;){if(n=t[fa]||t[pa]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=da(e);null!==e;){if(t=e[pa])return t;e=da(e)}return n}t=(e=t).parentNode}return null}function va(e){return!(e=e[pa]||e[fa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function wa(e){return e[ma]||null}var ka=[],Sa=-1;function $a(e){return{current:e}}function ja(e){0>Sa||(e.current=ka[Sa],ka[Sa]=null,Sa--)}function Ea(e,n){Sa++,ka[Sa]=e.current,e.current=n}var Ca={},Pa=$a(Ca),_a=$a(!1),Ta=Ca;function Oa(e,n){var t=e.type.contextTypes;if(!t)return Ca;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in t)o[a]=n[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=o),o}function Aa(e){return null!=(e=e.childContextTypes)}function Ra(){ja(_a),ja(Pa)}function Na(e,n,t){if(Pa.current!==Ca)throw Error(o(168));Ea(Pa,n),Ea(_a,t)}function Ia(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,"function"!=typeof r.getChildContext)return t;for(var a in r=r.getChildContext())if(!(a in n))throw Error(o(108,B(e)||"Unknown",a));return D({},t,r)}function La(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ca,Ta=Pa.current,Ea(Pa,e),Ea(_a,_a.current),!0}function Da(e,n,t){var r=e.stateNode;if(!r)throw Error(o(169));t?(e=Ia(e,n,Ta),r.__reactInternalMemoizedMergedChildContext=e,ja(_a),ja(Pa),Ea(Pa,e)):ja(_a),Ea(_a,t)}var Ma=null,za=!1,qa=!1;function Fa(e){null===Ma?Ma=[e]:Ma.push(e)}function Ua(){if(!qa&&null!==Ma){qa=!0;var e=0,n=xn;try{var t=Ma;for(xn=1;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}Ma=null,za=!1}catch(a){throw null!==Ma&&(Ma=Ma.slice(e+1)),Ze(Xe,Ua),a}finally{xn=n,qa=!1}}return null}var Ba=[],Va=0,Ha=null,Wa=0,Za=[],Ka=0,Ga=null,Ya=1,Ja="";function Qa(e,n){Ba[Va++]=Wa,Ba[Va++]=Ha,Ha=e,Wa=n}function Xa(e,n,t){Za[Ka++]=Ya,Za[Ka++]=Ja,Za[Ka++]=Ga,Ga=e;var r=Ya;e=Ja;var a=32-sn(r)-1;r&=~(1<<a),t+=1;var o=32-sn(n)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ya=1<<32-sn(n)+a|t<<a|r,Ja=o+e}else Ya=1<<o|t<<a|r,Ja=e}function eo(e){null!==e.return&&(Qa(e,1),Xa(e,1,0))}function no(e){for(;e===Ha;)Ha=Ba[--Va],Ba[Va]=null,Wa=Ba[--Va],Ba[Va]=null;for(;e===Ga;)Ga=Za[--Ka],Za[Ka]=null,Ja=Za[--Ka],Za[Ka]=null,Ya=Za[--Ka],Za[Ka]=null}var to=null,ro=null,ao=!1,oo=null;function io(e,n){var t=Ac(5,null,null,0);t.elementType="DELETED",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function so(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,to=e,ro=ca(n.firstChild),!0);case 6:return null!==(n=""===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,to=e,ro=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(t=null!==Ga?{id:Ya,overflow:Ja}:null,e.memoizedState={dehydrated:n,treeContext:t,retryLane:1073741824},(t=Ac(18,null,null,0)).stateNode=n,t.return=e,e.child=t,to=e,ro=null,!0);default:return!1}}function lo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function co(e){if(ao){var n=ro;if(n){var t=n;if(!so(e,n)){if(lo(e))throw Error(o(418));n=ca(t.nextSibling);var r=to;n&&so(e,n)?io(r,t):(e.flags=-4097&e.flags|2,ao=!1,to=e)}}else{if(lo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,to=e}}}function uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;to=e}function po(e){if(e!==to)return!1;if(!ao)return uo(e),ao=!0,!1;var n;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n="head"!==(n=e.type)&&"body"!==n&&!ta(e.type,e.memoizedProps)),n&&(n=ro)){if(lo(e))throw mo(),Error(o(418));for(;n;)io(e,n),n=ca(n.nextSibling)}if(uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType){var t=e.data;if("/$"===t){if(0===n){ro=ca(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++}e=e.nextSibling}ro=null}}else ro=to?ca(e.stateNode.nextSibling):null;return!0}function mo(){for(var e=ro;e;)e=ca(e.nextSibling)}function fo(){ro=to=null,ao=!1}function ho(e){null===oo?oo=[e]:oo.push(e)}var yo=x.ReactCurrentBatchConfig;function go(e,n){if(e&&e.defaultProps){for(var t in n=D({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}return n}var bo=$a(null),vo=null,xo=null,wo=null;function ko(){wo=xo=vo=null}function So(e){var n=bo.current;ja(bo),e._currentValue=n}function $o(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function jo(e,n){vo=e,wo=xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&n)&&(xs=!0),e.firstContext=null)}function Eo(e){var n=e._currentValue;if(wo!==e)if(e={context:e,memoizedValue:n,next:null},null===xo){if(null===vo)throw Error(o(308));xo=e,vo.dependencies={lanes:0,firstContext:e}}else xo=xo.next=e;return n}var Co=null;function Po(e){null===Co?Co=[e]:Co.push(e)}function _o(e,n,t,r){var a=n.interleaved;return null===a?(t.next=t,Po(n)):(t.next=a.next,a.next=t),n.interleaved=t,To(e,r)}function To(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var Oo=!1;function Ao(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ro(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function No(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function Io(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&_l)){var a=r.pending;return null===a?n.next=n:(n.next=a.next,a.next=n),r.pending=n,To(e,t)}return null===(a=r.interleaved)?(n.next=n,Po(r)):(n.next=a.next,a.next=n),r.interleaved=n,To(e,t)}function Lo(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,0!=(4194240&t))){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,vn(e,t)}}function Do(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var a=null,o=null;if(null!==(t=t.firstBaseUpdate)){do{var i={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===o?a=o=i:o=o.next=i,t=t.next}while(null!==t);null===o?a=o=n:o=o.next=n}else a=o=n;return t={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function Mo(e,n,t,r){var a=e.updateQueue;Oo=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var l=s,c=l.next;l.next=null,null===i?o=c:i.next=c,i=l;var d=e.alternate;null!==d&&((s=(d=d.updateQueue).lastBaseUpdate)!==i&&(null===s?d.firstBaseUpdate=c:s.next=c,d.lastBaseUpdate=l))}if(null!==o){var u=a.baseState;for(i=0,d=c=l=null,s=o;;){var p=s.lane,m=s.eventTime;if((r&p)===p){null!==d&&(d=d.next={eventTime:m,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var f=e,h=s;switch(p=n,m=t,h.tag){case 1:if("function"==typeof(f=h.payload)){u=f.call(m,u,p);break e}u=f;break e;case 3:f.flags=-65537&f.flags|128;case 0:if(null==(p="function"==typeof(f=h.payload)?f.call(m,u,p):f))break e;u=D({},u,p);break e;case 2:Oo=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(p=a.effects)?a.effects=[s]:p.push(s))}else m={eventTime:m,lane:p,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===d?(c=d=m,l=u):d=d.next=m,i|=p;if(null===(s=s.next)){if(null===(s=a.shared.pending))break;s=(p=s).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}if(null===d&&(l=u),a.baseState=l,a.firstBaseUpdate=c,a.lastBaseUpdate=d,null!==(n=a.shared.interleaved)){a=n;do{i|=a.lane,a=a.next}while(a!==n)}else null===o&&(a.shared.lanes=0);Dl|=i,e.lanes=i,e.memoizedState=u}}function zo(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],a=r.callback;if(null!==a){if(r.callback=null,r=t,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var qo=(new r.Component).refs;function Fo(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:D({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var Uo={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=nc(),a=tc(e),o=No(r,a);o.payload=n,null!=t&&(o.callback=t),null!==(n=Io(e,o,a))&&(rc(n,e,a,r),Lo(n,e,a))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=nc(),a=tc(e),o=No(r,a);o.tag=1,o.payload=n,null!=t&&(o.callback=t),null!==(n=Io(e,o,a))&&(rc(n,e,a,r),Lo(n,e,a))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=nc(),r=tc(e),a=No(t,r);a.tag=2,null!=n&&(a.callback=n),null!==(n=Io(e,a,r))&&(rc(n,e,r,t),Lo(n,e,r))}};function Bo(e,n,t,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!n.prototype||!n.prototype.isPureReactComponent||(!lr(t,r)||!lr(a,o))}function Vo(e,n,t){var r=!1,a=Ca,o=n.contextType;return"object"==typeof o&&null!==o?o=Eo(o):(a=Aa(n)?Ta:Pa.current,o=(r=null!=(r=n.contextTypes))?Oa(e,a):Ca),n=new n(t,o),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=Uo,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),n}function Ho(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&Uo.enqueueReplaceState(n,n.state,null)}function Wo(e,n,t,r){var a=e.stateNode;a.props=t,a.state=e.memoizedState,a.refs=qo,Ao(e);var o=n.contextType;"object"==typeof o&&null!==o?a.context=Eo(o):(o=Aa(n)?Ta:Pa.current,a.context=Oa(e,o)),a.state=e.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(Fo(e,n,o,t),a.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(n=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),n!==a.state&&Uo.enqueueReplaceState(a,a.state,null),Mo(e,t,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function Zo(e,n,t){if(null!==(e=t.ref)&&"function"!=typeof e&&"object"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(o(309));var r=t.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==n&&null!==n.ref&&"function"==typeof n.ref&&n.ref._stringRef===i?n.ref:(n=function(e){var n=a.refs;n===qo&&(n=a.refs={}),null===e?delete n[i]:n[i]=e},n._stringRef=i,n)}if("string"!=typeof e)throw Error(o(284));if(!t._owner)throw Error(o(290,e))}return e}function Ko(e,n){throw e=Object.prototype.toString.call(n),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function Go(e){return(0,e._init)(e._payload)}function Yo(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function a(e,n){return(e=Nc(e,n)).index=0,e.sibling=null,e}function i(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function s(n){return e&&null===n.alternate&&(n.flags|=2),n}function l(e,n,t,r){return null===n||6!==n.tag?((n=Mc(t,e.mode,r)).return=e,n):((n=a(n,t)).return=e,n)}function c(e,n,t,r){var o=t.type;return o===S?u(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===A&&Go(o)===n.type)?((r=a(n,t.props)).ref=Zo(e,n,t),r.return=e,r):((r=Ic(t.type,t.key,t.props,null,e.mode,r)).ref=Zo(e,n,t),r.return=e,r)}function d(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=zc(t,e.mode,r)).return=e,n):((n=a(n,t.children||[])).return=e,n)}function u(e,n,t,r,o){return null===n||7!==n.tag?((n=Lc(t,e.mode,r,o)).return=e,n):((n=a(n,t)).return=e,n)}function p(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n)return(n=Mc(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return(t=Ic(n.type,n.key,n.props,null,e.mode,t)).ref=Zo(e,null,n),t.return=e,t;case k:return(n=zc(n,e.mode,t)).return=e,n;case A:return p(e,(0,n._init)(n._payload),t)}if(ne(n)||I(n))return(n=Lc(n,e.mode,t,null)).return=e,n;Ko(e,n)}return null}function m(e,n,t,r){var a=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t)return null!==a?null:l(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return t.key===a?c(e,n,t,r):null;case k:return t.key===a?d(e,n,t,r):null;case A:return m(e,n,(a=t._init)(t._payload),r)}if(ne(t)||I(t))return null!==a?null:u(e,n,t,r,null);Ko(e,t)}return null}function f(e,n,t,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return l(n,e=e.get(t)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return c(n,e=e.get(null===r.key?t:r.key)||null,r,a);case k:return d(n,e=e.get(null===r.key?t:r.key)||null,r,a);case A:return f(e,n,t,(0,r._init)(r._payload),a)}if(ne(r)||I(r))return u(n,e=e.get(t)||null,r,a,null);Ko(n,r)}return null}function h(a,o,s,l){for(var c=null,d=null,u=o,h=o=0,y=null;null!==u&&h<s.length;h++){u.index>h?(y=u,u=null):y=u.sibling;var g=m(a,u,s[h],l);if(null===g){null===u&&(u=y);break}e&&u&&null===g.alternate&&n(a,u),o=i(g,o,h),null===d?c=g:d.sibling=g,d=g,u=y}if(h===s.length)return t(a,u),ao&&Qa(a,h),c;if(null===u){for(;h<s.length;h++)null!==(u=p(a,s[h],l))&&(o=i(u,o,h),null===d?c=u:d.sibling=u,d=u);return ao&&Qa(a,h),c}for(u=r(a,u);h<s.length;h++)null!==(y=f(u,a,h,s[h],l))&&(e&&null!==y.alternate&&u.delete(null===y.key?h:y.key),o=i(y,o,h),null===d?c=y:d.sibling=y,d=y);return e&&u.forEach((function(e){return n(a,e)})),ao&&Qa(a,h),c}function y(a,s,l,c){var d=I(l);if("function"!=typeof d)throw Error(o(150));if(null==(l=d.call(l)))throw Error(o(151));for(var u=d=null,h=s,y=s=0,g=null,b=l.next();null!==h&&!b.done;y++,b=l.next()){h.index>y?(g=h,h=null):g=h.sibling;var v=m(a,h,b.value,c);if(null===v){null===h&&(h=g);break}e&&h&&null===v.alternate&&n(a,h),s=i(v,s,y),null===u?d=v:u.sibling=v,u=v,h=g}if(b.done)return t(a,h),ao&&Qa(a,y),d;if(null===h){for(;!b.done;y++,b=l.next())null!==(b=p(a,b.value,c))&&(s=i(b,s,y),null===u?d=b:u.sibling=b,u=b);return ao&&Qa(a,y),d}for(h=r(a,h);!b.done;y++,b=l.next())null!==(b=f(h,a,y,b.value,c))&&(e&&null!==b.alternate&&h.delete(null===b.key?y:b.key),s=i(b,s,y),null===u?d=b:u.sibling=b,u=b);return e&&h.forEach((function(e){return n(a,e)})),ao&&Qa(a,y),d}return function e(r,o,i,l){if("object"==typeof i&&null!==i&&i.type===S&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case w:e:{for(var c=i.key,d=o;null!==d;){if(d.key===c){if((c=i.type)===S){if(7===d.tag){t(r,d.sibling),(o=a(d,i.props.children)).return=r,r=o;break e}}else if(d.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===A&&Go(c)===d.type){t(r,d.sibling),(o=a(d,i.props)).ref=Zo(r,d,i),o.return=r,r=o;break e}t(r,d);break}n(r,d),d=d.sibling}i.type===S?((o=Lc(i.props.children,r.mode,l,i.key)).return=r,r=o):((l=Ic(i.type,i.key,i.props,null,r.mode,l)).ref=Zo(r,o,i),l.return=r,r=l)}return s(r);case k:e:{for(d=i.key;null!==o;){if(o.key===d){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){t(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}t(r,o);break}n(r,o),o=o.sibling}(o=zc(i,r.mode,l)).return=r,r=o}return s(r);case A:return e(r,o,(d=i._init)(i._payload),l)}if(ne(i))return h(r,o,i,l);if(I(i))return y(r,o,i,l);Ko(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(t(r,o.sibling),(o=a(o,i)).return=r,r=o):(t(r,o),(o=Mc(i,r.mode,l)).return=r,r=o),s(r)):t(r,o)}}var Jo=Yo(!0),Qo=Yo(!1),Xo={},ei=$a(Xo),ni=$a(Xo),ti=$a(Xo);function ri(e){if(e===Xo)throw Error(o(174));return e}function ai(e,n){switch(Ea(ti,n),Ea(ni,e),Ea(ei,Xo),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:le(null,"");break;default:n=le(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}ja(ei),Ea(ei,n)}function oi(){ja(ei),ja(ni),ja(ti)}function ii(e){ri(ti.current);var n=ri(ei.current),t=le(n,e.type);n!==t&&(Ea(ni,e),Ea(ei,t))}function si(e){ni.current===e&&(ja(ei),ja(ni))}var li=$a(0);function ci(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(128&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var di=[];function ui(){for(var e=0;e<di.length;e++)di[e]._workInProgressVersionPrimary=null;di.length=0}var pi=x.ReactCurrentDispatcher,mi=x.ReactCurrentBatchConfig,fi=0,hi=null,yi=null,gi=null,bi=!1,vi=!1,xi=0,wi=0;function ki(){throw Error(o(321))}function Si(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!sr(e[t],n[t]))return!1;return!0}function $i(e,n,t,r,a,i){if(fi=i,hi=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,pi.current=null===e||null===e.memoizedState?ss:ls,e=t(r,a),vi){i=0;do{if(vi=!1,xi=0,25<=i)throw Error(o(301));i+=1,gi=yi=null,n.updateQueue=null,pi.current=cs,e=t(r,a)}while(vi)}if(pi.current=is,n=null!==yi&&null!==yi.next,fi=0,gi=yi=hi=null,bi=!1,n)throw Error(o(300));return e}function ji(){var e=0!==xi;return xi=0,e}function Ei(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gi?hi.memoizedState=gi=e:gi=gi.next=e,gi}function Ci(){if(null===yi){var e=hi.alternate;e=null!==e?e.memoizedState:null}else e=yi.next;var n=null===gi?hi.memoizedState:gi.next;if(null!==n)gi=n,yi=e;else{if(null===e)throw Error(o(310));e={memoizedState:(yi=e).memoizedState,baseState:yi.baseState,baseQueue:yi.baseQueue,queue:yi.queue,next:null},null===gi?hi.memoizedState=gi=e:gi=gi.next=e}return gi}function Pi(e,n){return"function"==typeof n?n(e):n}function _i(e){var n=Ci(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=yi,a=r.baseQueue,i=t.pending;if(null!==i){if(null!==a){var s=a.next;a.next=i.next,i.next=s}r.baseQueue=a=i,t.pending=null}if(null!==a){i=a.next,r=r.baseState;var l=s=null,c=null,d=i;do{var u=d.lane;if((fi&u)===u)null!==c&&(c=c.next={lane:0,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null}),r=d.hasEagerState?d.eagerState:e(r,d.action);else{var p={lane:u,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null};null===c?(l=c=p,s=r):c=c.next=p,hi.lanes|=u,Dl|=u}d=d.next}while(null!==d&&d!==i);null===c?s=r:c.next=l,sr(r,n.memoizedState)||(xs=!0),n.memoizedState=r,n.baseState=s,n.baseQueue=c,t.lastRenderedState=r}if(null!==(e=t.interleaved)){a=e;do{i=a.lane,hi.lanes|=i,Dl|=i,a=a.next}while(a!==e)}else null===a&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function Ti(e){var n=Ci(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=t.dispatch,a=t.pending,i=n.memoizedState;if(null!==a){t.pending=null;var s=a=a.next;do{i=e(i,s.action),s=s.next}while(s!==a);sr(i,n.memoizedState)||(xs=!0),n.memoizedState=i,null===n.baseQueue&&(n.baseState=i),t.lastRenderedState=i}return[i,r]}function Oi(){}function Ai(e,n){var t=hi,r=Ci(),a=n(),i=!sr(r.memoizedState,a);if(i&&(r.memoizedState=a,xs=!0),r=r.queue,Vi(Ii.bind(null,t,r,e),[e]),r.getSnapshot!==n||i||null!==gi&&1&gi.memoizedState.tag){if(t.flags|=2048,zi(9,Ni.bind(null,t,r,a,n),void 0,null),null===Tl)throw Error(o(349));0!=(30&fi)||Ri(t,n,a)}return a}function Ri(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=hi.updateQueue)?(n={lastEffect:null,stores:null},hi.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function Ni(e,n,t,r){n.value=t,n.getSnapshot=r,Li(n)&&Di(e)}function Ii(e,n,t){return t((function(){Li(n)&&Di(e)}))}function Li(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!sr(e,t)}catch(r){return!0}}function Di(e){var n=To(e,1);null!==n&&rc(n,e,1,-1)}function Mi(e){var n=Ei();return"function"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pi,lastRenderedState:e},n.queue=e,e=e.dispatch=ts.bind(null,hi,e),[n.memoizedState,e]}function zi(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=hi.updateQueue)?(n={lastEffect:null,stores:null},hi.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function qi(){return Ci().memoizedState}function Fi(e,n,t,r){var a=Ei();hi.flags|=e,a.memoizedState=zi(1|n,t,void 0,void 0===r?null:r)}function Ui(e,n,t,r){var a=Ci();r=void 0===r?null:r;var o=void 0;if(null!==yi){var i=yi.memoizedState;if(o=i.destroy,null!==r&&Si(r,i.deps))return void(a.memoizedState=zi(n,t,o,r))}hi.flags|=e,a.memoizedState=zi(1|n,t,o,r)}function Bi(e,n){return Fi(8390656,8,e,n)}function Vi(e,n){return Ui(2048,8,e,n)}function Hi(e,n){return Ui(4,2,e,n)}function Wi(e,n){return Ui(4,4,e,n)}function Zi(e,n){return"function"==typeof n?(e=e(),n(e),function(){n(null)}):null!=n?(e=e(),n.current=e,function(){n.current=null}):void 0}function Ki(e,n,t){return t=null!=t?t.concat([e]):null,Ui(4,4,Zi.bind(null,n,e),t)}function Gi(){}function Yi(e,n){var t=Ci();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&Si(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function Ji(e,n){var t=Ci();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&Si(n,r[1])?r[0]:(e=e(),t.memoizedState=[e,n],e)}function Qi(e,n,t){return 0==(21&fi)?(e.baseState&&(e.baseState=!1,xs=!0),e.memoizedState=t):(sr(t,n)||(t=yn(),hi.lanes|=t,Dl|=t,e.baseState=!0),n)}function Xi(e,n){var t=xn;xn=0!==t&&4>t?t:4,e(!0);var r=mi.transition;mi.transition={};try{e(!1),n()}finally{xn=t,mi.transition=r}}function es(){return Ci().memoizedState}function ns(e,n,t){var r=tc(e);if(t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},rs(e))as(n,t);else if(null!==(t=_o(e,n,t,r))){rc(t,e,r,nc()),os(t,n,r)}}function ts(e,n,t){var r=tc(e),a={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(rs(e))as(n,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=n.lastRenderedReducer))try{var i=n.lastRenderedState,s=o(i,t);if(a.hasEagerState=!0,a.eagerState=s,sr(s,i)){var l=n.interleaved;return null===l?(a.next=a,Po(n)):(a.next=l.next,l.next=a),void(n.interleaved=a)}}catch(c){}null!==(t=_o(e,n,a,r))&&(rc(t,e,r,a=nc()),os(t,n,r))}}function rs(e){var n=e.alternate;return e===hi||null!==n&&n===hi}function as(e,n){vi=bi=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function os(e,n,t){if(0!=(4194240&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,vn(e,t)}}var is={readContext:Eo,useCallback:ki,useContext:ki,useEffect:ki,useImperativeHandle:ki,useInsertionEffect:ki,useLayoutEffect:ki,useMemo:ki,useReducer:ki,useRef:ki,useState:ki,useDebugValue:ki,useDeferredValue:ki,useTransition:ki,useMutableSource:ki,useSyncExternalStore:ki,useId:ki,unstable_isNewReconciler:!1},ss={readContext:Eo,useCallback:function(e,n){return Ei().memoizedState=[e,void 0===n?null:n],e},useContext:Eo,useEffect:Bi,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,Fi(4194308,4,Zi.bind(null,n,e),t)},useLayoutEffect:function(e,n){return Fi(4194308,4,e,n)},useInsertionEffect:function(e,n){return Fi(4,2,e,n)},useMemo:function(e,n){var t=Ei();return n=void 0===n?null:n,e=e(),t.memoizedState=[e,n],e},useReducer:function(e,n,t){var r=Ei();return n=void 0!==t?t(n):n,r.memoizedState=r.baseState=n,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},r.queue=e,e=e.dispatch=ns.bind(null,hi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ei().memoizedState=e},useState:Mi,useDebugValue:Gi,useDeferredValue:function(e){return Ei().memoizedState=e},useTransition:function(){var e=Mi(!1),n=e[0];return e=Xi.bind(null,e[1]),Ei().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=hi,a=Ei();if(ao){if(void 0===t)throw Error(o(407));t=t()}else{if(t=n(),null===Tl)throw Error(o(349));0!=(30&fi)||Ri(r,n,t)}a.memoizedState=t;var i={value:t,getSnapshot:n};return a.queue=i,Bi(Ii.bind(null,r,i,e),[e]),r.flags|=2048,zi(9,Ni.bind(null,r,i,t,n),void 0,null),t},useId:function(){var e=Ei(),n=Tl.identifierPrefix;if(ao){var t=Ja;n=":"+n+"R"+(t=(Ya&~(1<<32-sn(Ya)-1)).toString(32)+t),0<(t=xi++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=wi++).toString(32)+":";return e.memoizedState=n},unstable_isNewReconciler:!1},ls={readContext:Eo,useCallback:Yi,useContext:Eo,useEffect:Vi,useImperativeHandle:Ki,useInsertionEffect:Hi,useLayoutEffect:Wi,useMemo:Ji,useReducer:_i,useRef:qi,useState:function(){return _i(Pi)},useDebugValue:Gi,useDeferredValue:function(e){return Qi(Ci(),yi.memoizedState,e)},useTransition:function(){return[_i(Pi)[0],Ci().memoizedState]},useMutableSource:Oi,useSyncExternalStore:Ai,useId:es,unstable_isNewReconciler:!1},cs={readContext:Eo,useCallback:Yi,useContext:Eo,useEffect:Vi,useImperativeHandle:Ki,useInsertionEffect:Hi,useLayoutEffect:Wi,useMemo:Ji,useReducer:Ti,useRef:qi,useState:function(){return Ti(Pi)},useDebugValue:Gi,useDeferredValue:function(e){var n=Ci();return null===yi?n.memoizedState=e:Qi(n,yi.memoizedState,e)},useTransition:function(){return[Ti(Pi)[0],Ci().memoizedState]},useMutableSource:Oi,useSyncExternalStore:Ai,useId:es,unstable_isNewReconciler:!1};function ds(e,n){try{var t="",r=n;do{t+=F(r),r=r.return}while(r);var a=t}catch(o){a="\nError generating stack: "+o.message+"\n"+o.stack}return{value:e,source:n,stack:a,digest:null}}function us(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function ps(e,n){try{console.error(n.value)}catch(t){setTimeout((function(){throw t}))}}var ms="function"==typeof WeakMap?WeakMap:Map;function fs(e,n,t){(t=No(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){Hl||(Hl=!0,Wl=r),ps(0,n)},t}function hs(e,n,t){(t=No(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=n.value;t.payload=function(){return r(a)},t.callback=function(){ps(0,n)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(t.callback=function(){ps(0,n),"function"!=typeof r&&(null===Zl?Zl=new Set([this]):Zl.add(this));var e=n.stack;this.componentDidCatch(n.value,{componentStack:null!==e?e:""})}),t}function ys(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new ms;var a=new Set;r.set(n,a)}else void 0===(a=r.get(n))&&(a=new Set,r.set(n,a));a.has(t)||(a.add(t),e=Ec.bind(null,e,n,t),n.then(e,e))}function gs(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function bs(e,n,t,r,a){return 0==(1&e.mode)?(e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=No(-1,1)).tag=2,Io(t,n,1))),t.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var vs=x.ReactCurrentOwner,xs=!1;function ws(e,n,t,r){n.child=null===e?Qo(n,null,t,r):Jo(n,e.child,t,r)}function ks(e,n,t,r,a){t=t.render;var o=n.ref;return jo(n,a),r=$i(e,n,t,r,o,a),t=ji(),null===e||xs?(ao&&t&&eo(n),n.flags|=1,ws(e,n,r,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Hs(e,n,a))}function Ss(e,n,t,r,a){if(null===e){var o=t.type;return"function"!=typeof o||Rc(o)||void 0!==o.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=Ic(t.type,null,r,n,n.mode,a)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=o,$s(e,n,o,r,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((t=null!==(t=t.compare)?t:lr)(i,r)&&e.ref===n.ref)return Hs(e,n,a)}return n.flags|=1,(e=Nc(o,r)).ref=n.ref,e.return=n,n.child=e}function $s(e,n,t,r,a){if(null!==e){var o=e.memoizedProps;if(lr(o,r)&&e.ref===n.ref){if(xs=!1,n.pendingProps=r=o,0==(e.lanes&a))return n.lanes=e.lanes,Hs(e,n,a);0!=(131072&e.flags)&&(xs=!0)}}return Cs(e,n,t,r,a)}function js(e,n,t){var r=n.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&n.mode))n.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ea(Nl,Rl),Rl|=t;else{if(0==(1073741824&t))return e=null!==o?o.baseLanes|t:t,n.lanes=n.childLanes=1073741824,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,Ea(Nl,Rl),Rl|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:t,Ea(Nl,Rl),Rl|=r}else null!==o?(r=o.baseLanes|t,n.memoizedState=null):r=t,Ea(Nl,Rl),Rl|=r;return ws(e,n,a,t),n.child}function Es(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function Cs(e,n,t,r,a){var o=Aa(t)?Ta:Pa.current;return o=Oa(n,o),jo(n,a),t=$i(e,n,t,r,o,a),r=ji(),null===e||xs?(ao&&r&&eo(n),n.flags|=1,ws(e,n,t,a),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~a,Hs(e,n,a))}function Ps(e,n,t,r,a){if(Aa(t)){var o=!0;La(n)}else o=!1;if(jo(n,a),null===n.stateNode)Vs(e,n),Vo(n,t,r),Wo(n,t,r,a),r=!0;else if(null===e){var i=n.stateNode,s=n.memoizedProps;i.props=s;var l=i.context,c=t.contextType;"object"==typeof c&&null!==c?c=Eo(c):c=Oa(n,c=Aa(t)?Ta:Pa.current);var d=t.getDerivedStateFromProps,u="function"==typeof d||"function"==typeof i.getSnapshotBeforeUpdate;u||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||l!==c)&&Ho(n,i,r,c),Oo=!1;var p=n.memoizedState;i.state=p,Mo(n,r,i,a),l=n.memoizedState,s!==r||p!==l||_a.current||Oo?("function"==typeof d&&(Fo(n,t,d,r),l=n.memoizedState),(s=Oo||Bo(n,t,s,r,p,l,c))?(u||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(n.flags|=4194308)):("function"==typeof i.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=l),i.props=r,i.state=l,i.context=c,r=s):("function"==typeof i.componentDidMount&&(n.flags|=4194308),r=!1)}else{i=n.stateNode,Ro(e,n),s=n.memoizedProps,c=n.type===n.elementType?s:go(n.type,s),i.props=c,u=n.pendingProps,p=i.context,"object"==typeof(l=t.contextType)&&null!==l?l=Eo(l):l=Oa(n,l=Aa(t)?Ta:Pa.current);var m=t.getDerivedStateFromProps;(d="function"==typeof m||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==u||p!==l)&&Ho(n,i,r,l),Oo=!1,p=n.memoizedState,i.state=p,Mo(n,r,i,a);var f=n.memoizedState;s!==u||p!==f||_a.current||Oo?("function"==typeof m&&(Fo(n,t,m,r),f=n.memoizedState),(c=Oo||Bo(n,t,c,r,p,f,l)||!1)?(d||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,f,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,f,l)),"function"==typeof i.componentDidUpdate&&(n.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=f),i.props=r,i.state=f,i.context=l,r=c):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(n.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(n.flags|=1024),r=!1)}return _s(e,n,t,r,o,a)}function _s(e,n,t,r,a,o){Es(e,n);var i=0!=(128&n.flags);if(!r&&!i)return a&&Da(n,t,!1),Hs(e,n,o);r=n.stateNode,vs.current=n;var s=i&&"function"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&i?(n.child=Jo(n,e.child,null,o),n.child=Jo(n,null,s,o)):ws(e,n,s,o),n.memoizedState=r.state,a&&Da(n,t,!0),n.child}function Ts(e){var n=e.stateNode;n.pendingContext?Na(0,n.pendingContext,n.pendingContext!==n.context):n.context&&Na(0,n.context,!1),ai(e,n.containerInfo)}function Os(e,n,t,r,a){return fo(),ho(a),n.flags|=256,ws(e,n,t,r),n.child}var As,Rs,Ns,Is,Ls={dehydrated:null,treeContext:null,retryLane:0};function Ds(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ms(e,n,t){var r,a=n.pendingProps,i=li.current,s=!1,l=0!=(128&n.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(s=!0,n.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Ea(li,1&i),null===e)return co(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&n.mode)?n.lanes=1:"$!"===e.data?n.lanes=8:n.lanes=1073741824,null):(l=a.children,e=a.fallback,s?(a=n.mode,s=n.child,l={mode:"hidden",children:l},0==(1&a)&&null!==s?(s.childLanes=0,s.pendingProps=l):s=Dc(l,a,0,null),e=Lc(e,a,t,null),s.return=n,e.return=n,s.sibling=e,n.child=s,n.child.memoizedState=Ds(t),n.memoizedState=Ls,e):zs(n,l));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,n,t,r,a,i,s){if(t)return 256&n.flags?(n.flags&=-257,qs(e,n,s,r=us(Error(o(422))))):null!==n.memoizedState?(n.child=e.child,n.flags|=128,null):(i=r.fallback,a=n.mode,r=Dc({mode:"visible",children:r.children},a,0,null),(i=Lc(i,a,s,null)).flags|=2,r.return=n,i.return=n,r.sibling=i,n.child=r,0!=(1&n.mode)&&Jo(n,e.child,null,s),n.child.memoizedState=Ds(s),n.memoizedState=Ls,i);if(0==(1&n.mode))return qs(e,n,s,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var l=r.dgst;return r=l,qs(e,n,s,r=us(i=Error(o(419)),r,void 0))}if(l=0!=(s&e.childLanes),xs||l){if(null!==(r=Tl)){switch(s&-s){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|s))?0:a)&&a!==i.retryLane&&(i.retryLane=a,To(e,a),rc(r,e,a,-1))}return yc(),qs(e,n,s,r=us(Error(o(421))))}return"$?"===a.data?(n.flags|=128,n.child=e.child,n=Pc.bind(null,e),a._reactRetry=n,null):(e=i.treeContext,ro=ca(a.nextSibling),to=n,ao=!0,oo=null,null!==e&&(Za[Ka++]=Ya,Za[Ka++]=Ja,Za[Ka++]=Ga,Ya=e.id,Ja=e.overflow,Ga=n),n=zs(n,r.children),n.flags|=4096,n)}(e,n,l,a,r,i,t);if(s){s=a.fallback,l=n.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:a.children};return 0==(1&l)&&n.child!==i?((a=n.child).childLanes=0,a.pendingProps=c,n.deletions=null):(a=Nc(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==r?s=Nc(r,s):(s=Lc(s,l,t,null)).flags|=2,s.return=n,a.return=n,a.sibling=s,n.child=a,a=s,s=n.child,l=null===(l=e.child.memoizedState)?Ds(t):{baseLanes:l.baseLanes|t,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~t,n.memoizedState=Ls,a}return e=(s=e.child).sibling,a=Nc(s,{mode:"visible",children:a.children}),0==(1&n.mode)&&(a.lanes=t),a.return=n,a.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=a,n.memoizedState=null,a}function zs(e,n){return(n=Dc({mode:"visible",children:n},e.mode,0,null)).return=e,e.child=n}function qs(e,n,t,r){return null!==r&&ho(r),Jo(n,e.child,null,t),(e=zs(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function Fs(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),$o(e.return,n,t)}function Us(e,n,t,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:a}:(o.isBackwards=n,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=t,o.tailMode=a)}function Bs(e,n,t){var r=n.pendingProps,a=r.revealOrder,o=r.tail;if(ws(e,n,r.children,t),0!=(2&(r=li.current)))r=1&r|2,n.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fs(e,t,n);else if(19===e.tag)Fs(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ea(li,r),0==(1&n.mode))n.memoizedState=null;else switch(a){case"forwards":for(t=n.child,a=null;null!==t;)null!==(e=t.alternate)&&null===ci(e)&&(a=t),t=t.sibling;null===(t=a)?(a=n.child,n.child=null):(a=t.sibling,t.sibling=null),Us(n,!1,a,t,o);break;case"backwards":for(t=null,a=n.child,n.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ci(e)){n.child=a;break}e=a.sibling,a.sibling=t,t=a,a=e}Us(n,!0,t,null,o);break;case"together":Us(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function Vs(e,n){0==(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function Hs(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),Dl|=n.lanes,0==(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(o(153));if(null!==n.child){for(t=Nc(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Nc(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function Ws(e,n){if(!ao)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Zs(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)t|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function Ks(e,n,t){var r=n.pendingProps;switch(no(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Zs(n),null;case 1:case 17:return Aa(n.type)&&Ra(),Zs(n),null;case 3:return r=n.stateNode,oi(),ja(_a),ja(Pa),ui(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(po(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&n.flags)||(n.flags|=1024,null!==oo&&(sc(oo),oo=null))),Rs(e,n),Zs(n),null;case 5:si(n);var a=ri(ti.current);if(t=n.type,null!==e&&null!=n.stateNode)Ns(e,n,t,r,a),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(o(166));return Zs(n),null}if(e=ri(ei.current),po(n)){r=n.stateNode,t=n.type;var i=n.memoizedProps;switch(r[pa]=n,r[ma]=i,e=0!=(1&n.mode),t){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(a=0;a<Ir.length;a++)zr(Ir[a],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":Y(r,i),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},zr("invalid",r);break;case"textarea":ae(r,i),zr("invalid",r)}for(var l in be(t,i),a=null,i)if(i.hasOwnProperty(l)){var c=i[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Qr(r.textContent,c,e),a=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Qr(r.textContent,c,e),a=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&zr("scroll",r)}switch(t){case"input":W(r),X(r,i,!0);break;case"textarea":W(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Xr)}r=a,n.updateQueue=r,null!==r&&(n.flags|=4)}else{l=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(t)),"http://www.w3.org/1999/xhtml"===e?"script"===t?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(t,{is:r.is}):(e=l.createElement(t),"select"===t&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,t),e[pa]=n,e[ma]=r,As(e,n,!1,!1),n.stateNode=e;e:{switch(l=ve(t,r),t){case"dialog":zr("cancel",e),zr("close",e),a=r;break;case"iframe":case"object":case"embed":zr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Ir.length;a++)zr(Ir[a],e);a=r;break;case"source":zr("error",e),a=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),a=r;break;case"details":zr("toggle",e),a=r;break;case"input":Y(e,r),a=G(e,r),zr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=D({},r,{value:void 0}),zr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),zr("invalid",e)}for(i in be(t,a),c=a)if(c.hasOwnProperty(i)){var d=c[i];"style"===i?ye(e,d):"dangerouslySetInnerHTML"===i?null!=(d=d?d.__html:void 0)&&ue(e,d):"children"===i?"string"==typeof d?("textarea"!==t||""!==d)&&pe(e,d):"number"==typeof d&&pe(e,""+d):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(s.hasOwnProperty(i)?null!=d&&"onScroll"===i&&zr("scroll",e):null!=d&&v(e,i,d,l))}switch(t){case"input":W(e),X(e,r,!1);break;case"textarea":W(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?te(e,!!r.multiple,i,!1):null!=r.defaultValue&&te(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Xr)}switch(t){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return Zs(n),null;case 6:if(e&&null!=n.stateNode)Is(e,n,e.memoizedProps,r);else{if("string"!=typeof r&&null===n.stateNode)throw Error(o(166));if(t=ri(ti.current),ri(ei.current),po(n)){if(r=n.stateNode,t=n.memoizedProps,r[pa]=n,(i=r.nodeValue!==t)&&null!==(e=to))switch(e.tag){case 3:Qr(r.nodeValue,t,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Qr(r.nodeValue,t,0!=(1&e.mode))}i&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[pa]=n,n.stateNode=r}return Zs(n),null;case 13:if(ja(li),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&0!=(1&n.mode)&&0==(128&n.flags))mo(),fo(),n.flags|=98560,i=!1;else if(i=po(n),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=n.memoizedState)?i.dehydrated:null))throw Error(o(317));i[pa]=n}else fo(),0==(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Zs(n),i=!1}else null!==oo&&(sc(oo),oo=null),i=!0;if(!i)return 65536&n.flags?n:null}return 0!=(128&n.flags)?(n.lanes=t,n):((r=null!==r)!==(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,0!=(1&n.mode)&&(null===e||0!=(1&li.current)?0===Il&&(Il=3):yc())),null!==n.updateQueue&&(n.flags|=4),Zs(n),null);case 4:return oi(),Rs(e,n),null===e&&Ur(n.stateNode.containerInfo),Zs(n),null;case 10:return So(n.type._context),Zs(n),null;case 19:if(ja(li),null===(i=n.memoizedState))return Zs(n),null;if(r=0!=(128&n.flags),null===(l=i.rendering))if(r)Ws(i,!1);else{if(0!==Il||null!==e&&0!=(128&e.flags))for(e=n.child;null!==e;){if(null!==(l=ci(e))){for(n.flags|=128,Ws(i,!1),null!==(r=l.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)e=r,(i=t).flags&=14680066,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return Ea(li,1&li.current|2),n.child}e=e.sibling}null!==i.tail&&Je()>Bl&&(n.flags|=128,r=!0,Ws(i,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=ci(l))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),Ws(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate&&!ao)return Zs(n),null}else 2*Je()-i.renderingStartTime>Bl&&1073741824!==t&&(n.flags|=128,r=!0,Ws(i,!1),n.lanes=4194304);i.isBackwards?(l.sibling=n.child,n.child=l):(null!==(t=i.last)?t.sibling=l:n.child=l,i.last=l)}return null!==i.tail?(n=i.tail,i.rendering=n,i.tail=n.sibling,i.renderingStartTime=Je(),n.sibling=null,t=li.current,Ea(li,r?1&t|2:1&t),n):(Zs(n),null);case 22:case 23:return pc(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&0!=(1&n.mode)?0!=(1073741824&Rl)&&(Zs(n),6&n.subtreeFlags&&(n.flags|=8192)):Zs(n),null;case 24:case 25:return null}throw Error(o(156,n.tag))}function Gs(e,n){switch(no(n),n.tag){case 1:return Aa(n.type)&&Ra(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return oi(),ja(_a),ja(Pa),ui(),0!=(65536&(e=n.flags))&&0==(128&e)?(n.flags=-65537&e|128,n):null;case 5:return si(n),null;case 13:if(ja(li),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(o(340));fo()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return ja(li),null;case 4:return oi(),null;case 10:return So(n.type._context),null;case 22:case 23:return pc(),null;default:return null}}As=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},Rs=function(){},Ns=function(e,n,t,r){var a=e.memoizedProps;if(a!==r){e=n.stateNode,ri(ei.current);var o,i=null;switch(t){case"input":a=G(e,a),r=G(e,r),i=[];break;case"select":a=D({},a,{value:void 0}),r=D({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(d in be(t,r),t=null,a)if(!r.hasOwnProperty(d)&&a.hasOwnProperty(d)&&null!=a[d])if("style"===d){var l=a[d];for(o in l)l.hasOwnProperty(o)&&(t||(t={}),t[o]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(s.hasOwnProperty(d)?i||(i=[]):(i=i||[]).push(d,null));for(d in r){var c=r[d];if(l=null!=a?a[d]:void 0,r.hasOwnProperty(d)&&c!==l&&(null!=c||null!=l))if("style"===d)if(l){for(o in l)!l.hasOwnProperty(o)||c&&c.hasOwnProperty(o)||(t||(t={}),t[o]="");for(o in c)c.hasOwnProperty(o)&&l[o]!==c[o]&&(t||(t={}),t[o]=c[o])}else t||(i||(i=[]),i.push(d,t)),t=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(i=i||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(s.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&zr("scroll",e),i||l===c||(i=[])):(i=i||[]).push(d,c))}t&&(i=i||[]).push("style",t);var d=i;(n.updateQueue=d)&&(n.flags|=4)}},Is=function(e,n,t,r){t!==r&&(n.flags|=4)};var Ys=!1,Js=!1,Qs="function"==typeof WeakSet?WeakSet:Set,Xs=null;function el(e,n){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(r){jc(e,n,r)}else t.current=null}function nl(e,n,t){try{t()}catch(r){jc(e,n,r)}}var tl=!1;function rl(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&nl(n,t,o)}a=a.next}while(a!==r)}}function al(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function ol(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,"function"==typeof n?n(e):n.current=e}}function il(e){var n=e.alternate;null!==n&&(e.alternate=null,il(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&(null!==(n=e.stateNode)&&(delete n[pa],delete n[ma],delete n[ha],delete n[ya],delete n[ga])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function sl(e){return 5===e.tag||3===e.tag||4===e.tag}function ll(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||sl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cl(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(cl(e,n,t),e=e.sibling;null!==e;)cl(e,n,t),e=e.sibling}function dl(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&null!==(e=e.child))for(dl(e,n,t),e=e.sibling;null!==e;)dl(e,n,t),e=e.sibling}var ul=null,pl=!1;function ml(e,n,t){for(t=t.child;null!==t;)fl(e,n,t),t=t.sibling}function fl(e,n,t){if(on&&"function"==typeof on.onCommitFiberUnmount)try{on.onCommitFiberUnmount(an,t)}catch(s){}switch(t.tag){case 5:Js||el(t,n);case 6:var r=ul,a=pl;ul=null,ml(e,n,t),pl=a,null!==(ul=r)&&(pl?(e=ul,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):ul.removeChild(t.stateNode));break;case 18:null!==ul&&(pl?(e=ul,t=t.stateNode,8===e.nodeType?la(e.parentNode,t):1===e.nodeType&&la(e,t),Bn(e)):la(ul,t.stateNode));break;case 4:r=ul,a=pl,ul=t.stateNode.containerInfo,pl=!0,ml(e,n,t),ul=r,pl=a;break;case 0:case 11:case 14:case 15:if(!Js&&(null!==(r=t.updateQueue)&&null!==(r=r.lastEffect))){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&nl(t,n,i),a=a.next}while(a!==r)}ml(e,n,t);break;case 1:if(!Js&&(el(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(s){jc(t,n,s)}ml(e,n,t);break;case 21:ml(e,n,t);break;case 22:1&t.mode?(Js=(r=Js)||null!==t.memoizedState,ml(e,n,t),Js=r):ml(e,n,t);break;default:ml(e,n,t)}}function hl(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new Qs),n.forEach((function(n){var r=_c.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}}function yl(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var a=t[r];try{var i=e,s=n,l=s;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,pl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,pl=!0;break e}l=l.return}if(null===ul)throw Error(o(160));fl(i,s,a),ul=null,pl=!1;var c=a.alternate;null!==c&&(c.return=null),a.return=null}catch(d){jc(a,n,d)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)gl(n,e),n=n.sibling}function gl(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(yl(n,e),bl(e),4&r){try{rl(3,e,e.return),al(3,e)}catch(y){jc(e,e.return,y)}try{rl(5,e,e.return)}catch(y){jc(e,e.return,y)}}break;case 1:yl(n,e),bl(e),512&r&&null!==t&&el(t,t.return);break;case 5:if(yl(n,e),bl(e),512&r&&null!==t&&el(t,t.return),32&e.flags){var a=e.stateNode;try{pe(a,"")}catch(y){jc(e,e.return,y)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,s=null!==t?t.memoizedProps:i,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===i.type&&null!=i.name&&J(a,i),ve(l,s);var d=ve(l,i);for(s=0;s<c.length;s+=2){var u=c[s],p=c[s+1];"style"===u?ye(a,p):"dangerouslySetInnerHTML"===u?ue(a,p):"children"===u?pe(a,p):v(a,u,p,d)}switch(l){case"input":Q(a,i);break;case"textarea":oe(a,i);break;case"select":var m=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var f=i.value;null!=f?te(a,!!i.multiple,f,!1):m!==!!i.multiple&&(null!=i.defaultValue?te(a,!!i.multiple,i.defaultValue,!0):te(a,!!i.multiple,i.multiple?[]:"",!1))}a[ma]=i}catch(y){jc(e,e.return,y)}}break;case 6:if(yl(n,e),bl(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(y){jc(e,e.return,y)}}break;case 3:if(yl(n,e),bl(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{Bn(n.containerInfo)}catch(y){jc(e,e.return,y)}break;case 4:default:yl(n,e),bl(e);break;case 13:yl(n,e),bl(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Ul=Je())),4&r&&hl(e);break;case 22:if(u=null!==t&&null!==t.memoizedState,1&e.mode?(Js=(d=Js)||u,yl(n,e),Js=d):yl(n,e),bl(e),8192&r){if(d=null!==e.memoizedState,(e.stateNode.isHidden=d)&&!u&&0!=(1&e.mode))for(Xs=e,u=e.child;null!==u;){for(p=Xs=u;null!==Xs;){switch(f=(m=Xs).child,m.tag){case 0:case 11:case 14:case 15:rl(4,m,m.return);break;case 1:el(m,m.return);var h=m.stateNode;if("function"==typeof h.componentWillUnmount){r=m,t=m.return;try{n=r,h.props=n.memoizedProps,h.state=n.memoizedState,h.componentWillUnmount()}catch(y){jc(r,t,y)}}break;case 5:el(m,m.return);break;case 22:if(null!==m.memoizedState){kl(p);continue}}null!==f?(f.return=m,Xs=f):kl(p)}u=u.sibling}e:for(u=null,p=e;;){if(5===p.tag){if(null===u){u=p;try{a=p.stateNode,d?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(l=p.stateNode,s=null!=(c=p.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=he("display",s))}catch(y){jc(e,e.return,y)}}}else if(6===p.tag){if(null===u)try{p.stateNode.nodeValue=d?"":p.memoizedProps}catch(y){jc(e,e.return,y)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;u===p&&(u=null),p=p.return}u===p&&(u=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:yl(n,e),bl(e),4&r&&hl(e);case 21:}}function bl(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(sl(t)){var r=t;break e}t=t.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(pe(a,""),r.flags&=-33),dl(e,ll(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;cl(e,ll(e),i);break;default:throw Error(o(161))}}catch(s){jc(e,e.return,s)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function vl(e,n,t){Xs=e,xl(e,n,t)}function xl(e,n,t){for(var r=0!=(1&e.mode);null!==Xs;){var a=Xs,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Ys;if(!i){var s=a.alternate,l=null!==s&&null!==s.memoizedState||Js;s=Ys;var c=Js;if(Ys=i,(Js=l)&&!c)for(Xs=a;null!==Xs;)l=(i=Xs).child,22===i.tag&&null!==i.memoizedState?Sl(a):null!==l?(l.return=i,Xs=l):Sl(a);for(;null!==o;)Xs=o,xl(o,n,t),o=o.sibling;Xs=a,Ys=s,Js=c}wl(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Xs=o):wl(e)}}function wl(e){for(;null!==Xs;){var n=Xs;if(0!=(8772&n.flags)){var t=n.alternate;try{if(0!=(8772&n.flags))switch(n.tag){case 0:case 11:case 15:Js||al(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!Js)if(null===t)r.componentDidMount();else{var a=n.elementType===n.type?t.memoizedProps:go(n.type,t.memoizedProps);r.componentDidUpdate(a,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=n.updateQueue;null!==i&&zo(n,i,r);break;case 3:var s=n.updateQueue;if(null!==s){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}zo(n,s,t)}break;case 5:var l=n.stateNode;if(null===t&&4&n.flags){t=l;var c=n.memoizedProps;switch(n.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&t.focus();break;case"img":c.src&&(t.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var d=n.alternate;if(null!==d){var u=d.memoizedState;if(null!==u){var p=u.dehydrated;null!==p&&Bn(p)}}}break;default:throw Error(o(163))}Js||512&n.flags&&ol(n)}catch(m){jc(n,n.return,m)}}if(n===e){Xs=null;break}if(null!==(t=n.sibling)){t.return=n.return,Xs=t;break}Xs=n.return}}function kl(e){for(;null!==Xs;){var n=Xs;if(n===e){Xs=null;break}var t=n.sibling;if(null!==t){t.return=n.return,Xs=t;break}Xs=n.return}}function Sl(e){for(;null!==Xs;){var n=Xs;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{al(4,n)}catch(l){jc(n,t,l)}break;case 1:var r=n.stateNode;if("function"==typeof r.componentDidMount){var a=n.return;try{r.componentDidMount()}catch(l){jc(n,a,l)}}var o=n.return;try{ol(n)}catch(l){jc(n,o,l)}break;case 5:var i=n.return;try{ol(n)}catch(l){jc(n,i,l)}}}catch(l){jc(n,n.return,l)}if(n===e){Xs=null;break}var s=n.sibling;if(null!==s){s.return=n.return,Xs=s;break}Xs=n.return}}var $l,jl=Math.ceil,El=x.ReactCurrentDispatcher,Cl=x.ReactCurrentOwner,Pl=x.ReactCurrentBatchConfig,_l=0,Tl=null,Ol=null,Al=0,Rl=0,Nl=$a(0),Il=0,Ll=null,Dl=0,Ml=0,zl=0,ql=null,Fl=null,Ul=0,Bl=1/0,Vl=null,Hl=!1,Wl=null,Zl=null,Kl=!1,Gl=null,Yl=0,Jl=0,Ql=null,Xl=-1,ec=0;function nc(){return 0!=(6&_l)?Je():-1!==Xl?Xl:Xl=Je()}function tc(e){return 0==(1&e.mode)?1:0!=(2&_l)&&0!==Al?Al&-Al:null!==yo.transition?(0===ec&&(ec=yn()),ec):0!==(e=xn)?e:e=void 0===(e=window.event)?16:Jn(e.type)}function rc(e,n,t,r){if(50<Jl)throw Jl=0,Ql=null,Error(o(185));bn(e,t,r),0!=(2&_l)&&e===Tl||(e===Tl&&(0==(2&_l)&&(Ml|=t),4===Il&&lc(e,Al)),ac(e,r),1===t&&0===_l&&0==(1&n.mode)&&(Bl=Je()+500,za&&Ua()))}function ac(e,n){var t=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-sn(o),s=1<<i,l=a[i];-1===l?0!=(s&t)&&0==(s&r)||(a[i]=fn(s,n)):l<=n&&(e.expiredLanes|=s),o&=~s}}(e,n);var r=mn(e,e===Tl?Al:0);if(0===r)null!==t&&Ke(t),e.callbackNode=null,e.callbackPriority=0;else if(n=r&-r,e.callbackPriority!==n){if(null!=t&&Ke(t),1===n)0===e.tag?function(e){za=!0,Fa(e)}(cc.bind(null,e)):Fa(cc.bind(null,e)),ia((function(){0==(6&_l)&&Ua()})),t=null;else{switch(wn(r)){case 1:t=Xe;break;case 4:t=en;break;case 16:default:t=nn;break;case 536870912:t=rn}t=Tc(t,oc.bind(null,e))}e.callbackPriority=n,e.callbackNode=t}}function oc(e,n){if(Xl=-1,ec=0,0!=(6&_l))throw Error(o(327));var t=e.callbackNode;if(Sc()&&e.callbackNode!==t)return null;var r=mn(e,e===Tl?Al:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||n)n=gc(e,r);else{n=r;var a=_l;_l|=2;var i=hc();for(Tl===e&&Al===n||(Vl=null,Bl=Je()+500,mc(e,n));;)try{vc();break}catch(l){fc(e,l)}ko(),El.current=i,_l=a,null!==Ol?n=0:(Tl=null,Al=0,n=Il)}if(0!==n){if(2===n&&(0!==(a=hn(e))&&(r=a,n=ic(e,a))),1===n)throw t=Ll,mc(e,0),lc(e,r),ac(e,Je()),t;if(6===n)lc(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var a=t[r],o=a.getSnapshot;a=a.value;try{if(!sr(o(),a))return!1}catch(s){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(a)&&(2===(n=gc(e,r))&&(0!==(i=hn(e))&&(r=i,n=ic(e,i))),1===n))throw t=Ll,mc(e,0),lc(e,r),ac(e,Je()),t;switch(e.finishedWork=a,e.finishedLanes=r,n){case 0:case 1:throw Error(o(345));case 2:case 5:kc(e,Fl,Vl);break;case 3:if(lc(e,r),(130023424&r)===r&&10<(n=Ul+500-Je())){if(0!==mn(e,0))break;if(((a=e.suspendedLanes)&r)!==r){nc(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(kc.bind(null,e,Fl,Vl),n);break}kc(e,Fl,Vl);break;case 4:if(lc(e,r),(4194240&r)===r)break;for(n=e.eventTimes,a=-1;0<r;){var s=31-sn(r);i=1<<s,(s=n[s])>a&&(a=s),r&=~i}if(r=a,10<(r=(120>(r=Je()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*jl(r/1960))-r)){e.timeoutHandle=ra(kc.bind(null,e,Fl,Vl),r);break}kc(e,Fl,Vl);break;default:throw Error(o(329))}}}return ac(e,Je()),e.callbackNode===t?oc.bind(null,e):null}function ic(e,n){var t=ql;return e.current.memoizedState.isDehydrated&&(mc(e,n).flags|=256),2!==(e=gc(e,n))&&(n=Fl,Fl=t,null!==n&&sc(n)),e}function sc(e){null===Fl?Fl=e:Fl.push.apply(Fl,e)}function lc(e,n){for(n&=~zl,n&=~Ml,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-sn(n),r=1<<t;e[t]=-1,n&=~r}}function cc(e){if(0!=(6&_l))throw Error(o(327));Sc();var n=mn(e,0);if(0==(1&n))return ac(e,Je()),null;var t=gc(e,n);if(0!==e.tag&&2===t){var r=hn(e);0!==r&&(n=r,t=ic(e,r))}if(1===t)throw t=Ll,mc(e,0),lc(e,n),ac(e,Je()),t;if(6===t)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,kc(e,Fl,Vl),ac(e,Je()),null}function dc(e,n){var t=_l;_l|=1;try{return e(n)}finally{0===(_l=t)&&(Bl=Je()+500,za&&Ua())}}function uc(e){null!==Gl&&0===Gl.tag&&0==(6&_l)&&Sc();var n=_l;_l|=1;var t=Pl.transition,r=xn;try{if(Pl.transition=null,xn=1,e)return e()}finally{xn=r,Pl.transition=t,0==(6&(_l=n))&&Ua()}}function pc(){Rl=Nl.current,ja(Nl)}function mc(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,aa(t)),null!==Ol)for(t=Ol.return;null!==t;){var r=t;switch(no(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ra();break;case 3:oi(),ja(_a),ja(Pa),ui();break;case 5:si(r);break;case 4:oi();break;case 13:case 19:ja(li);break;case 10:So(r.type._context);break;case 22:case 23:pc()}t=t.return}if(Tl=e,Ol=e=Nc(e.current,null),Al=Rl=n,Il=0,Ll=null,zl=Ml=Dl=0,Fl=ql=null,null!==Co){for(n=0;n<Co.length;n++)if(null!==(r=(t=Co[n]).interleaved)){t.interleaved=null;var a=r.next,o=t.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}t.pending=r}Co=null}return e}function fc(e,n){for(;;){var t=Ol;try{if(ko(),pi.current=is,bi){for(var r=hi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}bi=!1}if(fi=0,gi=yi=hi=null,vi=!1,xi=0,Cl.current=null,null===t||null===t.return){Il=1,Ll=n,Ol=null;break}e:{var i=e,s=t.return,l=t,c=n;if(n=Al,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var d=c,u=l,p=u.tag;if(0==(1&u.mode)&&(0===p||11===p||15===p)){var m=u.alternate;m?(u.updateQueue=m.updateQueue,u.memoizedState=m.memoizedState,u.lanes=m.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=gs(s);if(null!==f){f.flags&=-257,bs(f,s,l,0,n),1&f.mode&&ys(i,d,n),c=d;var h=(n=f).updateQueue;if(null===h){var y=new Set;y.add(c),n.updateQueue=y}else h.add(c);break e}if(0==(1&n)){ys(i,d,n),yc();break e}c=Error(o(426))}else if(ao&&1&l.mode){var g=gs(s);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),bs(g,s,l,0,n),ho(ds(c,l));break e}}i=c=ds(c,l),4!==Il&&(Il=2),null===ql?ql=[i]:ql.push(i),i=s;do{switch(i.tag){case 3:i.flags|=65536,n&=-n,i.lanes|=n,Do(i,fs(0,c,n));break e;case 1:l=c;var b=i.type,v=i.stateNode;if(0==(128&i.flags)&&("function"==typeof b.getDerivedStateFromError||null!==v&&"function"==typeof v.componentDidCatch&&(null===Zl||!Zl.has(v)))){i.flags|=65536,n&=-n,i.lanes|=n,Do(i,hs(i,l,n));break e}}i=i.return}while(null!==i)}wc(t)}catch(x){n=x,Ol===t&&null!==t&&(Ol=t=t.return);continue}break}}function hc(){var e=El.current;return El.current=is,null===e?is:e}function yc(){0!==Il&&3!==Il&&2!==Il||(Il=4),null===Tl||0==(268435455&Dl)&&0==(268435455&Ml)||lc(Tl,Al)}function gc(e,n){var t=_l;_l|=2;var r=hc();for(Tl===e&&Al===n||(Vl=null,mc(e,n));;)try{bc();break}catch(a){fc(e,a)}if(ko(),_l=t,El.current=r,null!==Ol)throw Error(o(261));return Tl=null,Al=0,Il}function bc(){for(;null!==Ol;)xc(Ol)}function vc(){for(;null!==Ol&&!Ge();)xc(Ol)}function xc(e){var n=$l(e.alternate,e,Rl);e.memoizedProps=e.pendingProps,null===n?wc(e):Ol=n,Cl.current=null}function wc(e){var n=e;do{var t=n.alternate;if(e=n.return,0==(32768&n.flags)){if(null!==(t=Ks(t,n,Rl)))return void(Ol=t)}else{if(null!==(t=Gs(t,n)))return t.flags&=32767,void(Ol=t);if(null===e)return Il=6,void(Ol=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(n=n.sibling))return void(Ol=n);Ol=n=e}while(null!==n);0===Il&&(Il=5)}function kc(e,n,t){var r=xn,a=Pl.transition;try{Pl.transition=null,xn=1,function(e,n,t,r){do{Sc()}while(null!==Gl);if(0!=(6&_l))throw Error(o(327));t=e.finishedWork;var a=e.finishedLanes;if(null===t)return null;if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=t.lanes|t.childLanes;if(function(e,n){var t=e.pendingLanes&~n;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=n,e.mutableReadLanes&=n,e.entangledLanes&=n,n=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<t;){var a=31-sn(t),o=1<<a;n[a]=0,r[a]=-1,e[a]=-1,t&=~o}}(e,i),e===Tl&&(Ol=Tl=null,Al=0),0==(2064&t.subtreeFlags)&&0==(2064&t.flags)||Kl||(Kl=!0,Tc(nn,(function(){return Sc(),null}))),i=0!=(15990&t.flags),0!=(15990&t.subtreeFlags)||i){i=Pl.transition,Pl.transition=null;var s=xn;xn=1;var l=_l;_l|=4,Cl.current=null,function(e,n){if(ea=Hn,mr(e=pr())){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{t.nodeType,i.nodeType}catch(w){t=null;break e}var s=0,l=-1,c=-1,d=0,u=0,p=e,m=null;n:for(;;){for(var f;p!==t||0!==a&&3!==p.nodeType||(l=s+a),p!==i||0!==r&&3!==p.nodeType||(c=s+r),3===p.nodeType&&(s+=p.nodeValue.length),null!==(f=p.firstChild);)m=p,p=f;for(;;){if(p===e)break n;if(m===t&&++d===a&&(l=s),m===i&&++u===r&&(c=s),null!==(f=p.nextSibling))break;m=(p=m).parentNode}p=f}t=-1===l||-1===c?null:{start:l,end:c}}else t=null}t=t||{start:0,end:0}}else t=null;for(na={focusedElem:e,selectionRange:t},Hn=!1,Xs=n;null!==Xs;)if(e=(n=Xs).child,0!=(1028&n.subtreeFlags)&&null!==e)e.return=n,Xs=e;else for(;null!==Xs;){n=Xs;try{var h=n.alternate;if(0!=(1024&n.flags))switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var y=h.memoizedProps,g=h.memoizedState,b=n.stateNode,v=b.getSnapshotBeforeUpdate(n.elementType===n.type?y:go(n.type,y),g);b.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var x=n.stateNode.containerInfo;1===x.nodeType?x.textContent="":9===x.nodeType&&x.documentElement&&x.removeChild(x.documentElement);break;default:throw Error(o(163))}}catch(w){jc(n,n.return,w)}if(null!==(e=n.sibling)){e.return=n.return,Xs=e;break}Xs=n.return}h=tl,tl=!1}(e,t),gl(t,e),fr(na),Hn=!!ea,na=ea=null,e.current=t,vl(t,e,a),Ye(),_l=l,xn=s,Pl.transition=i}else e.current=t;if(Kl&&(Kl=!1,Gl=e,Yl=a),i=e.pendingLanes,0===i&&(Zl=null),function(e){if(on&&"function"==typeof on.onCommitFiberRoot)try{on.onCommitFiberRoot(an,e,void 0,128==(128&e.current.flags))}catch(n){}}(t.stateNode),ac(e,Je()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)a=n[t],r(a.value,{componentStack:a.stack,digest:a.digest});if(Hl)throw Hl=!1,e=Wl,Wl=null,e;0!=(1&Yl)&&0!==e.tag&&Sc(),i=e.pendingLanes,0!=(1&i)?e===Ql?Jl++:(Jl=0,Ql=e):Jl=0,Ua()}(e,n,t,r)}finally{Pl.transition=a,xn=r}return null}function Sc(){if(null!==Gl){var e=wn(Yl),n=Pl.transition,t=xn;try{if(Pl.transition=null,xn=16>e?16:e,null===Gl)var r=!1;else{if(e=Gl,Gl=null,Yl=0,0!=(6&_l))throw Error(o(331));var a=_l;for(_l|=4,Xs=e.current;null!==Xs;){var i=Xs,s=i.child;if(0!=(16&Xs.flags)){var l=i.deletions;if(null!==l){for(var c=0;c<l.length;c++){var d=l[c];for(Xs=d;null!==Xs;){var u=Xs;switch(u.tag){case 0:case 11:case 15:rl(8,u,i)}var p=u.child;if(null!==p)p.return=u,Xs=p;else for(;null!==Xs;){var m=(u=Xs).sibling,f=u.return;if(il(u),u===d){Xs=null;break}if(null!==m){m.return=f,Xs=m;break}Xs=f}}}var h=i.alternate;if(null!==h){var y=h.child;if(null!==y){h.child=null;do{var g=y.sibling;y.sibling=null,y=g}while(null!==y)}}Xs=i}}if(0!=(2064&i.subtreeFlags)&&null!==s)s.return=i,Xs=s;else e:for(;null!==Xs;){if(0!=(2048&(i=Xs).flags))switch(i.tag){case 0:case 11:case 15:rl(9,i,i.return)}var b=i.sibling;if(null!==b){b.return=i.return,Xs=b;break e}Xs=i.return}}var v=e.current;for(Xs=v;null!==Xs;){var x=(s=Xs).child;if(0!=(2064&s.subtreeFlags)&&null!==x)x.return=s,Xs=x;else e:for(s=v;null!==Xs;){if(0!=(2048&(l=Xs).flags))try{switch(l.tag){case 0:case 11:case 15:al(9,l)}}catch(k){jc(l,l.return,k)}if(l===s){Xs=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Xs=w;break e}Xs=l.return}}if(_l=a,Ua(),on&&"function"==typeof on.onPostCommitFiberRoot)try{on.onPostCommitFiberRoot(an,e)}catch(k){}r=!0}return r}finally{xn=t,Pl.transition=n}}return!1}function $c(e,n,t){e=Io(e,n=fs(0,n=ds(t,n),1),1),n=nc(),null!==e&&(bn(e,1,n),ac(e,n))}function jc(e,n,t){if(3===e.tag)$c(e,e,t);else for(;null!==n;){if(3===n.tag){$c(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Zl||!Zl.has(r))){n=Io(n,e=hs(n,e=ds(t,e),1),1),e=nc(),null!==n&&(bn(n,1,e),ac(n,e));break}}n=n.return}}function Ec(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=nc(),e.pingedLanes|=e.suspendedLanes&t,Tl===e&&(Al&t)===t&&(4===Il||3===Il&&(130023424&Al)===Al&&500>Je()-Ul?mc(e,0):zl|=t),ac(e,n)}function Cc(e,n){0===n&&(0==(1&e.mode)?n=1:(n=un,0==(130023424&(un<<=1))&&(un=4194304)));var t=nc();null!==(e=To(e,n))&&(bn(e,n,t),ac(e,t))}function Pc(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),Cc(e,t)}function _c(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(t=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(n),Cc(e,t)}function Tc(e,n){return Ze(e,n)}function Oc(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ac(e,n,t,r){return new Oc(e,n,t,r)}function Rc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Nc(e,n){var t=e.alternate;return null===t?((t=Ac(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=14680064&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function Ic(e,n,t,r,a,i){var s=2;if(r=e,"function"==typeof e)Rc(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return Lc(t.children,a,i,n);case $:s=8,a|=8;break;case j:return(e=Ac(12,t,n,2|a)).elementType=j,e.lanes=i,e;case _:return(e=Ac(13,t,n,a)).elementType=_,e.lanes=i,e;case T:return(e=Ac(19,t,n,a)).elementType=T,e.lanes=i,e;case R:return Dc(t,a,i,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case E:s=10;break e;case C:s=9;break e;case P:s=11;break e;case O:s=14;break e;case A:s=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(n=Ac(s,t,n,a)).elementType=e,n.type=r,n.lanes=i,n}function Lc(e,n,t,r){return(e=Ac(7,e,r,n)).lanes=t,e}function Dc(e,n,t,r){return(e=Ac(22,e,r,n)).elementType=R,e.lanes=t,e.stateNode={isHidden:!1},e}function Mc(e,n,t){return(e=Ac(6,e,null,n)).lanes=t,e}function zc(e,n,t){return(n=Ac(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function qc(e,n,t,r,a){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gn(0),this.expirationTimes=gn(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gn(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Fc(e,n,t,r,a,o,i,s,l){return e=new qc(e,n,t,s,l),1===n?(n=1,!0===o&&(n|=8)):n=0,o=Ac(3,null,null,n),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ao(o),e}function Uc(e){if(!e)return Ca;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(Aa(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(o(171))}if(1===e.tag){var t=e.type;if(Aa(t))return Ia(e,t,n)}return n}function Bc(e,n,t,r,a,o,i,s,l){return(e=Fc(t,r,!0,e,0,o,0,s,l)).context=Uc(null),t=e.current,(o=No(r=nc(),a=tc(t))).callback=null!=n?n:null,Io(t,o,a),e.current.lanes=a,bn(e,a,r),ac(e,r),e}function Vc(e,n,t,r){var a=n.current,o=nc(),i=tc(a);return t=Uc(t),null===n.context?n.context=t:n.pendingContext=t,(n=No(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=Io(a,n,i))&&(rc(e,a,i,o),Lo(e,a,i)),i}function Hc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wc(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Zc(e,n){Wc(e,n),(e=e.alternate)&&Wc(e,n)}$l=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||_a.current)xs=!0;else{if(0==(e.lanes&t)&&0==(128&n.flags))return xs=!1,function(e,n,t){switch(n.tag){case 3:Ts(n),fo();break;case 5:ii(n);break;case 1:Aa(n.type)&&La(n);break;case 4:ai(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,a=n.memoizedProps.value;Ea(bo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=n.memoizedState))return null!==r.dehydrated?(Ea(li,1&li.current),n.flags|=128,null):0!=(t&n.child.childLanes)?Ms(e,n,t):(Ea(li,1&li.current),null!==(e=Hs(e,n,t))?e.sibling:null);Ea(li,1&li.current);break;case 19:if(r=0!=(t&n.childLanes),0!=(128&e.flags)){if(r)return Bs(e,n,t);n.flags|=128}if(null!==(a=n.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ea(li,li.current),r)break;return null;case 22:case 23:return n.lanes=0,js(e,n,t)}return Hs(e,n,t)}(e,n,t);xs=0!=(131072&e.flags)}else xs=!1,ao&&0!=(1048576&n.flags)&&Xa(n,Wa,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;Vs(e,n),e=n.pendingProps;var a=Oa(n,Pa.current);jo(n,t),a=$i(null,n,r,e,a,t);var i=ji();return n.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,Aa(r)?(i=!0,La(n)):i=!1,n.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Ao(n),a.updater=Uo,n.stateNode=a,a._reactInternals=n,Wo(n,r,e,t),n=_s(null,n,r,!0,i,t)):(n.tag=0,ao&&i&&eo(n),ws(null,n,a,t),n=n.child),n;case 16:r=n.elementType;e:{switch(Vs(e,n),e=n.pendingProps,r=(a=r._init)(r._payload),n.type=r,a=n.tag=function(e){if("function"==typeof e)return Rc(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===O)return 14}return 2}(r),e=go(r,e),a){case 0:n=Cs(null,n,r,e,t);break e;case 1:n=Ps(null,n,r,e,t);break e;case 11:n=ks(null,n,r,e,t);break e;case 14:n=Ss(null,n,r,go(r.type,e),t);break e}throw Error(o(306,r,""))}return n;case 0:return r=n.type,a=n.pendingProps,Cs(e,n,r,a=n.elementType===r?a:go(r,a),t);case 1:return r=n.type,a=n.pendingProps,Ps(e,n,r,a=n.elementType===r?a:go(r,a),t);case 3:e:{if(Ts(n),null===e)throw Error(o(387));r=n.pendingProps,a=(i=n.memoizedState).element,Ro(e,n),Mo(n,r,null,t);var s=n.memoizedState;if(r=s.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},n.updateQueue.baseState=i,n.memoizedState=i,256&n.flags){n=Os(e,n,r,t,a=ds(Error(o(423)),n));break e}if(r!==a){n=Os(e,n,r,t,a=ds(Error(o(424)),n));break e}for(ro=ca(n.stateNode.containerInfo.firstChild),to=n,ao=!0,oo=null,t=Qo(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(fo(),r===a){n=Hs(e,n,t);break e}ws(e,n,r,t)}n=n.child}return n;case 5:return ii(n),null===e&&co(n),r=n.type,a=n.pendingProps,i=null!==e?e.memoizedProps:null,s=a.children,ta(r,a)?s=null:null!==i&&ta(r,i)&&(n.flags|=32),Es(e,n),ws(e,n,s,t),n.child;case 6:return null===e&&co(n),null;case 13:return Ms(e,n,t);case 4:return ai(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=Jo(n,null,r,t):ws(e,n,r,t),n.child;case 11:return r=n.type,a=n.pendingProps,ks(e,n,r,a=n.elementType===r?a:go(r,a),t);case 7:return ws(e,n,n.pendingProps,t),n.child;case 8:case 12:return ws(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,a=n.pendingProps,i=n.memoizedProps,s=a.value,Ea(bo,r._currentValue),r._currentValue=s,null!==i)if(sr(i.value,s)){if(i.children===a.children&&!_a.current){n=Hs(e,n,t);break e}}else for(null!==(i=n.child)&&(i.return=n);null!==i;){var l=i.dependencies;if(null!==l){s=i.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=No(-1,t&-t)).tag=2;var d=i.updateQueue;if(null!==d){var u=(d=d.shared).pending;null===u?c.next=c:(c.next=u.next,u.next=c),d.pending=c}}i.lanes|=t,null!==(c=i.alternate)&&(c.lanes|=t),$o(i.return,t,n),l.lanes|=t;break}c=c.next}}else if(10===i.tag)s=i.type===n.type?null:i.child;else if(18===i.tag){if(null===(s=i.return))throw Error(o(341));s.lanes|=t,null!==(l=s.alternate)&&(l.lanes|=t),$o(s,t,n),s=i.sibling}else s=i.child;if(null!==s)s.return=i;else for(s=i;null!==s;){if(s===n){s=null;break}if(null!==(i=s.sibling)){i.return=s.return,s=i;break}s=s.return}i=s}ws(e,n,a.children,t),n=n.child}return n;case 9:return a=n.type,r=n.pendingProps.children,jo(n,t),r=r(a=Eo(a)),n.flags|=1,ws(e,n,r,t),n.child;case 14:return a=go(r=n.type,n.pendingProps),Ss(e,n,r,a=go(r.type,a),t);case 15:return $s(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,a=n.pendingProps,a=n.elementType===r?a:go(r,a),Vs(e,n),n.tag=1,Aa(r)?(e=!0,La(n)):e=!1,jo(n,t),Vo(n,r,a),Wo(n,r,a,t),_s(null,n,r,!0,e,t);case 19:return Bs(e,n,t);case 22:return js(e,n,t)}throw Error(o(156,n.tag))};var Kc="function"==typeof reportError?reportError:function(e){console.error(e)};function Gc(e){this._internalRoot=e}function Yc(e){this._internalRoot=e}function Jc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Qc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xc(){}function ed(e,n,t,r,a){var o=t._reactRootContainer;if(o){var i=o;if("function"==typeof a){var s=a;a=function(){var e=Hc(i);s.call(e)}}Vc(n,i,e,a)}else i=function(e,n,t,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Hc(i);o.call(e)}}var i=Bc(n,r,e,0,null,!1,0,"",Xc);return e._reactRootContainer=i,e[fa]=i.current,Ur(8===e.nodeType?e.parentNode:e),uc(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var s=r;r=function(){var e=Hc(l);s.call(e)}}var l=Fc(e,0,!1,null,0,!1,0,"",Xc);return e._reactRootContainer=l,e[fa]=l.current,Ur(8===e.nodeType?e.parentNode:e),uc((function(){Vc(n,l,t,r)})),l}(t,n,e,a,r);return Hc(i)}Yc.prototype.render=Gc.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(o(409));Vc(e,n,null,null)},Yc.prototype.unmount=Gc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;uc((function(){Vc(null,e,null,null)})),n[fa]=null}},Yc.prototype.unstable_scheduleHydration=function(e){if(e){var n=jn();e={blockedOn:null,target:e,priority:n};for(var t=0;t<Nn.length&&0!==n&&n<Nn[t].priority;t++);Nn.splice(t,0,e),0===t&&Mn(e)}},kn=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=pn(n.pendingLanes);0!==t&&(vn(n,1|t),ac(n,Je()),0==(6&_l)&&(Bl=Je()+500,Ua()))}break;case 13:uc((function(){var n=To(e,1);if(null!==n){var t=nc();rc(n,e,1,t)}})),Zc(e,1)}},Sn=function(e){if(13===e.tag){var n=To(e,134217728);if(null!==n)rc(n,e,134217728,nc());Zc(e,134217728)}},$n=function(e){if(13===e.tag){var n=tc(e),t=To(e,n);if(null!==t)rc(t,e,n,nc());Zc(e,n)}},jn=function(){return xn},En=function(e,n){var t=xn;try{return xn=e,n()}finally{xn=t}},ke=function(e,n,t){switch(n){case"input":if(Q(e,t),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var a=wa(r);if(!a)throw Error(o(90));Z(r),Q(r,a)}}}break;case"textarea":oe(e,t);break;case"select":null!=(n=t.value)&&te(e,!!t.multiple,n,!1)}},Pe=dc,_e=uc;var nd={usingClientEntryPoint:!1,Events:[va,xa,wa,Ee,Ce,dc]},td={findFiberByHostInstance:ba,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rd={bundleType:td.bundleType,version:td.version,rendererPackageName:td.rendererPackageName,rendererConfig:td.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:td.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ad=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ad.isDisabled&&ad.supportsFiber)try{an=ad.inject(rd),on=ad}catch(de){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nd,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jc(n))throw Error(o(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!Jc(e))throw Error(o(299));var t=!1,r="",a=Kc;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(a=n.onRecoverableError)),n=Fc(e,1,!1,null,0,t,0,r,a),e[fa]=n.current,Ur(8===e.nodeType?e.parentNode:e),new Gc(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=null===(e=He(n))?null:e.stateNode},n.flushSync=function(e){return uc(e)},n.hydrate=function(e,n,t){if(!Qc(n))throw Error(o(200));return ed(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!Jc(e))throw Error(o(405));var r=null!=t&&t.hydratedSources||null,a=!1,i="",s=Kc;if(null!=t&&(!0===t.unstable_strictMode&&(a=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onRecoverableError&&(s=t.onRecoverableError)),n=Bc(n,null,e,1,null!=t?t:null,a,0,i,s),e[fa]=n.current,Ur(e),r)for(e=0;e<r.length;e++)a=(a=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a);return new Yc(n)},n.render=function(e,n,t){if(!Qc(n))throw Error(o(200));return ed(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!Qc(e))throw Error(o(40));return!!e._reactRootContainer&&(uc((function(){ed(null,null,e,!1,(function(){e._reactRootContainer=null,e[fa]=null}))})),!0)},n.unstable_batchedUpdates=dc,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!Qc(t))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ed(e,n,t,!1,r)},n.version="18.2.0-next-9e3b772b8-20220608"},17029:(e,n,t)=>{"use strict";var r=t(28316);n.createRoot=r.createRoot,n.hydrateRoot=r.hydrateRoot},28316:(e,n,t)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(n){console.error(n)}}(),e.exports=t(52967)},78435:e=>{var n="undefined"!=typeof Element,t="function"==typeof Map,r="function"==typeof Set,a="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function o(e,i){if(e===i)return!0;if(e&&i&&"object"==typeof e&&"object"==typeof i){if(e.constructor!==i.constructor)return!1;var s,l,c,d;if(Array.isArray(e)){if((s=e.length)!=i.length)return!1;for(l=s;0!=l--;)if(!o(e[l],i[l]))return!1;return!0}if(t&&e instanceof Map&&i instanceof Map){if(e.size!==i.size)return!1;for(d=e.entries();!(l=d.next()).done;)if(!i.has(l.value[0]))return!1;for(d=e.entries();!(l=d.next()).done;)if(!o(l.value[1],i.get(l.value[0])))return!1;return!0}if(r&&e instanceof Set&&i instanceof Set){if(e.size!==i.size)return!1;for(d=e.entries();!(l=d.next()).done;)if(!i.has(l.value[0]))return!1;return!0}if(a&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(i)){if((s=e.length)!=i.length)return!1;for(l=s;0!=l--;)if(e[l]!==i[l])return!1;return!0}if(e.constructor===RegExp)return e.source===i.source&&e.flags===i.flags;if(e.valueOf!==Object.prototype.valueOf&&"function"==typeof e.valueOf&&"function"==typeof i.valueOf)return e.valueOf()===i.valueOf();if(e.toString!==Object.prototype.toString&&"function"==typeof e.toString&&"function"==typeof i.toString)return e.toString()===i.toString();if((s=(c=Object.keys(e)).length)!==Object.keys(i).length)return!1;for(l=s;0!=l--;)if(!Object.prototype.hasOwnProperty.call(i,c[l]))return!1;if(n&&e instanceof Element)return!1;for(l=s;0!=l--;)if(("_owner"!==c[l]&&"__v"!==c[l]&&"__o"!==c[l]||!e.$$typeof)&&!o(e[c[l]],i[c[l]]))return!1;return!0}return e!=e&&i!=i}e.exports=function(e,n){try{return o(e,n)}catch(t){if((t.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw t}}},72175:(e,n,t)=>{"use strict";t.d(n,{B6:()=>H,ql:()=>X});var r=t(2784),a=t(13980),o=t.n(a),i=t(78435),s=t.n(i),l=t(47677),c=t.n(l),d=t(88665),u=t.n(d);function p(){return p=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},p.apply(this,arguments)}function m(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,f(e,n)}function f(e,n){return f=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e},f(e,n)}function h(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n.indexOf(t=o[r])>=0||(a[t]=e[t]);return a}var y={BASE:"base",BODY:"body",HEAD:"head",HTML:"html",LINK:"link",META:"meta",NOSCRIPT:"noscript",SCRIPT:"script",STYLE:"style",TITLE:"title",FRAGMENT:"Symbol(react.fragment)"},g={rel:["amphtml","canonical","alternate"]},b={type:["application/ld+json"]},v={charset:"",name:["robots","description"],property:["og:type","og:title","og:url","og:image","og:image:alt","og:description","twitter:url","twitter:title","twitter:description","twitter:image","twitter:image:alt","twitter:card","twitter:site"]},x=Object.keys(y).map((function(e){return y[e]})),w={accesskey:"accessKey",charset:"charSet",class:"className",contenteditable:"contentEditable",contextmenu:"contextMenu","http-equiv":"httpEquiv",itemprop:"itemProp",tabindex:"tabIndex"},k=Object.keys(w).reduce((function(e,n){return e[w[n]]=n,e}),{}),S=function(e,n){for(var t=e.length-1;t>=0;t-=1){var r=e[t];if(Object.prototype.hasOwnProperty.call(r,n))return r[n]}return null},$=function(e){var n=S(e,y.TITLE),t=S(e,"titleTemplate");if(Array.isArray(n)&&(n=n.join("")),t&&n)return t.replace(/%s/g,(function(){return n}));var r=S(e,"defaultTitle");return n||r||void 0},j=function(e){return S(e,"onChangeClientState")||function(){}},E=function(e,n){return n.filter((function(n){return void 0!==n[e]})).map((function(n){return n[e]})).reduce((function(e,n){return p({},e,n)}),{})},C=function(e,n){return n.filter((function(e){return void 0!==e[y.BASE]})).map((function(e){return e[y.BASE]})).reverse().reduce((function(n,t){if(!n.length)for(var r=Object.keys(t),a=0;a<r.length;a+=1){var o=r[a].toLowerCase();if(-1!==e.indexOf(o)&&t[o])return n.concat(t)}return n}),[])},P=function(e,n,t){var r={};return t.filter((function(n){return!!Array.isArray(n[e])||(void 0!==n[e]&&console&&"function"==typeof console.warn&&console.warn("Helmet: "+e+' should be of type "Array". Instead found type "'+typeof n[e]+'"'),!1)})).map((function(n){return n[e]})).reverse().reduce((function(e,t){var a={};t.filter((function(e){for(var t,o=Object.keys(e),i=0;i<o.length;i+=1){var s=o[i],l=s.toLowerCase();-1===n.indexOf(l)||"rel"===t&&"canonical"===e[t].toLowerCase()||"rel"===l&&"stylesheet"===e[l].toLowerCase()||(t=l),-1===n.indexOf(s)||"innerHTML"!==s&&"cssText"!==s&&"itemprop"!==s||(t=s)}if(!t||!e[t])return!1;var c=e[t].toLowerCase();return r[t]||(r[t]={}),a[t]||(a[t]={}),!r[t][c]&&(a[t][c]=!0,!0)})).reverse().forEach((function(n){return e.push(n)}));for(var o=Object.keys(a),i=0;i<o.length;i+=1){var s=o[i],l=p({},r[s],a[s]);r[s]=l}return e}),[]).reverse()},_=function(e,n){if(Array.isArray(e)&&e.length)for(var t=0;t<e.length;t+=1)if(e[t][n])return!0;return!1},T=function(e){return Array.isArray(e)?e.join(""):e},O=function(e,n){return Array.isArray(e)?e.reduce((function(e,t){return function(e,n){for(var t=Object.keys(e),r=0;r<t.length;r+=1)if(n[t[r]]&&n[t[r]].includes(e[t[r]]))return!0;return!1}(t,n)?e.priority.push(t):e.default.push(t),e}),{priority:[],default:[]}):{default:e}},A=function(e,n){var t;return p({},e,((t={})[n]=void 0,t))},R=[y.NOSCRIPT,y.SCRIPT,y.STYLE],N=function(e,n){return void 0===n&&(n=!0),!1===n?String(e):String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")},I=function(e){return Object.keys(e).reduce((function(n,t){var r=void 0!==e[t]?t+'="'+e[t]+'"':""+t;return n?n+" "+r:r}),"")},L=function(e,n){return void 0===n&&(n={}),Object.keys(e).reduce((function(n,t){return n[w[t]||t]=e[t],n}),n)},D=function(e,n){return n.map((function(n,t){var a,o=((a={key:t})["data-rh"]=!0,a);return Object.keys(n).forEach((function(e){var t=w[e]||e;"innerHTML"===t||"cssText"===t?o.dangerouslySetInnerHTML={__html:n.innerHTML||n.cssText}:o[t]=n[e]})),r.createElement(e,o)}))},M=function(e,n,t){switch(e){case y.TITLE:return{toComponent:function(){return t=n.titleAttributes,(a={key:e=n.title})["data-rh"]=!0,o=L(t,a),[r.createElement(y.TITLE,o,e)];var e,t,a,o},toString:function(){return function(e,n,t,r){var a=I(t),o=T(n);return a?"<"+e+' data-rh="true" '+a+">"+N(o,r)+"</"+e+">":"<"+e+' data-rh="true">'+N(o,r)+"</"+e+">"}(e,n.title,n.titleAttributes,t)}};case"bodyAttributes":case"htmlAttributes":return{toComponent:function(){return L(n)},toString:function(){return I(n)}};default:return{toComponent:function(){return D(e,n)},toString:function(){return function(e,n,t){return n.reduce((function(n,r){var a=Object.keys(r).filter((function(e){return!("innerHTML"===e||"cssText"===e)})).reduce((function(e,n){var a=void 0===r[n]?n:n+'="'+N(r[n],t)+'"';return e?e+" "+a:a}),""),o=r.innerHTML||r.cssText||"",i=-1===R.indexOf(e);return n+"<"+e+' data-rh="true" '+a+(i?"/>":">"+o+"</"+e+">")}),"")}(e,n,t)}}}},z=function(e){var n=e.baseTag,t=e.bodyAttributes,r=e.encode,a=e.htmlAttributes,o=e.noscriptTags,i=e.styleTags,s=e.title,l=void 0===s?"":s,c=e.titleAttributes,d=e.linkTags,u=e.metaTags,p=e.scriptTags,m={toComponent:function(){},toString:function(){return""}};if(e.prioritizeSeoTags){var f=function(e){var n=e.linkTags,t=e.scriptTags,r=e.encode,a=O(e.metaTags,v),o=O(n,g),i=O(t,b);return{priorityMethods:{toComponent:function(){return[].concat(D(y.META,a.priority),D(y.LINK,o.priority),D(y.SCRIPT,i.priority))},toString:function(){return M(y.META,a.priority,r)+" "+M(y.LINK,o.priority,r)+" "+M(y.SCRIPT,i.priority,r)}},metaTags:a.default,linkTags:o.default,scriptTags:i.default}}(e);m=f.priorityMethods,d=f.linkTags,u=f.metaTags,p=f.scriptTags}return{priority:m,base:M(y.BASE,n,r),bodyAttributes:M("bodyAttributes",t,r),htmlAttributes:M("htmlAttributes",a,r),link:M(y.LINK,d,r),meta:M(y.META,u,r),noscript:M(y.NOSCRIPT,o,r),script:M(y.SCRIPT,p,r),style:M(y.STYLE,i,r),title:M(y.TITLE,{title:l,titleAttributes:c},r)}},q=[],F=function(e,n){var t=this;void 0===n&&(n="undefined"!=typeof document),this.instances=[],this.value={setHelmet:function(e){t.context.helmet=e},helmetInstances:{get:function(){return t.canUseDOM?q:t.instances},add:function(e){(t.canUseDOM?q:t.instances).push(e)},remove:function(e){var n=(t.canUseDOM?q:t.instances).indexOf(e);(t.canUseDOM?q:t.instances).splice(n,1)}}},this.context=e,this.canUseDOM=n,n||(e.helmet=z({baseTag:[],bodyAttributes:{},encodeSpecialCharacters:!0,htmlAttributes:{},linkTags:[],metaTags:[],noscriptTags:[],scriptTags:[],styleTags:[],title:"",titleAttributes:{}}))},U=r.createContext({}),B=o().shape({setHelmet:o().func,helmetInstances:o().shape({get:o().func,add:o().func,remove:o().func})}),V="undefined"!=typeof document,H=function(e){function n(t){var r;return(r=e.call(this,t)||this).helmetData=new F(r.props.context,n.canUseDOM),r}return m(n,e),n.prototype.render=function(){return r.createElement(U.Provider,{value:this.helmetData.value},this.props.children)},n}(r.Component);H.canUseDOM=V,H.propTypes={context:o().shape({helmet:o().shape()}),children:o().node.isRequired},H.defaultProps={context:{}},H.displayName="HelmetProvider";var W=function(e,n){var t,r=document.head||document.querySelector(y.HEAD),a=r.querySelectorAll(e+"[data-rh]"),o=[].slice.call(a),i=[];return n&&n.length&&n.forEach((function(n){var r=document.createElement(e);for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&("innerHTML"===a?r.innerHTML=n.innerHTML:"cssText"===a?r.styleSheet?r.styleSheet.cssText=n.cssText:r.appendChild(document.createTextNode(n.cssText)):r.setAttribute(a,void 0===n[a]?"":n[a]));r.setAttribute("data-rh","true"),o.some((function(e,n){return t=n,r.isEqualNode(e)}))?o.splice(t,1):i.push(r)})),o.forEach((function(e){return e.parentNode.removeChild(e)})),i.forEach((function(e){return r.appendChild(e)})),{oldTags:o,newTags:i}},Z=function(e,n){var t=document.getElementsByTagName(e)[0];if(t){for(var r=t.getAttribute("data-rh"),a=r?r.split(","):[],o=[].concat(a),i=Object.keys(n),s=0;s<i.length;s+=1){var l=i[s],c=n[l]||"";t.getAttribute(l)!==c&&t.setAttribute(l,c),-1===a.indexOf(l)&&a.push(l);var d=o.indexOf(l);-1!==d&&o.splice(d,1)}for(var u=o.length-1;u>=0;u-=1)t.removeAttribute(o[u]);a.length===o.length?t.removeAttribute("data-rh"):t.getAttribute("data-rh")!==i.join(",")&&t.setAttribute("data-rh",i.join(","))}},K=function(e,n){var t=e.baseTag,r=e.htmlAttributes,a=e.linkTags,o=e.metaTags,i=e.noscriptTags,s=e.onChangeClientState,l=e.scriptTags,c=e.styleTags,d=e.title,u=e.titleAttributes;Z(y.BODY,e.bodyAttributes),Z(y.HTML,r),function(e,n){void 0!==e&&document.title!==e&&(document.title=T(e)),Z(y.TITLE,n)}(d,u);var p={baseTag:W(y.BASE,t),linkTags:W(y.LINK,a),metaTags:W(y.META,o),noscriptTags:W(y.NOSCRIPT,i),scriptTags:W(y.SCRIPT,l),styleTags:W(y.STYLE,c)},m={},f={};Object.keys(p).forEach((function(e){var n=p[e],t=n.newTags,r=n.oldTags;t.length&&(m[e]=t),r.length&&(f[e]=p[e].oldTags)})),n&&n(),s(e,m,f)},G=null,Y=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return(n=e.call.apply(e,[this].concat(r))||this).rendered=!1,n}m(n,e);var t=n.prototype;return t.shouldComponentUpdate=function(e){return!u()(e,this.props)},t.componentDidUpdate=function(){this.emitChange()},t.componentWillUnmount=function(){this.props.context.helmetInstances.remove(this),this.emitChange()},t.emitChange=function(){var e,n,t=this.props.context,r=t.setHelmet,a=null,o=(e=t.helmetInstances.get().map((function(e){var n=p({},e.props);return delete n.context,n})),{baseTag:C(["href"],e),bodyAttributes:E("bodyAttributes",e),defer:S(e,"defer"),encode:S(e,"encodeSpecialCharacters"),htmlAttributes:E("htmlAttributes",e),linkTags:P(y.LINK,["rel","href"],e),metaTags:P(y.META,["name","charset","http-equiv","property","itemprop"],e),noscriptTags:P(y.NOSCRIPT,["innerHTML"],e),onChangeClientState:j(e),scriptTags:P(y.SCRIPT,["src","innerHTML"],e),styleTags:P(y.STYLE,["cssText"],e),title:$(e),titleAttributes:E("titleAttributes",e),prioritizeSeoTags:_(e,"prioritizeSeoTags")});H.canUseDOM?(n=o,G&&cancelAnimationFrame(G),n.defer?G=requestAnimationFrame((function(){K(n,(function(){G=null}))})):(K(n),G=null)):z&&(a=z(o)),r(a)},t.init=function(){this.rendered||(this.rendered=!0,this.props.context.helmetInstances.add(this),this.emitChange())},t.render=function(){return this.init(),null},n}(r.Component);Y.propTypes={context:B.isRequired},Y.displayName="HelmetDispatcher";var J=["children"],Q=["children"],X=function(e){function n(){return e.apply(this,arguments)||this}m(n,e);var t=n.prototype;return t.shouldComponentUpdate=function(e){return!s()(A(this.props,"helmetData"),A(e,"helmetData"))},t.mapNestedChildrenToProps=function(e,n){if(!n)return null;switch(e.type){case y.SCRIPT:case y.NOSCRIPT:return{innerHTML:n};case y.STYLE:return{cssText:n};default:throw new Error("<"+e.type+" /> elements are self-closing and can not contain children. Refer to our API for more information.")}},t.flattenArrayTypeChildren=function(e){var n,t=e.child,r=e.arrayTypeChildren;return p({},r,((n={})[t.type]=[].concat(r[t.type]||[],[p({},e.newChildProps,this.mapNestedChildrenToProps(t,e.nestedChildren))]),n))},t.mapObjectTypeChildren=function(e){var n,t,r=e.child,a=e.newProps,o=e.newChildProps,i=e.nestedChildren;switch(r.type){case y.TITLE:return p({},a,((n={})[r.type]=i,n.titleAttributes=p({},o),n));case y.BODY:return p({},a,{bodyAttributes:p({},o)});case y.HTML:return p({},a,{htmlAttributes:p({},o)});default:return p({},a,((t={})[r.type]=p({},o),t))}},t.mapArrayTypeChildrenToProps=function(e,n){var t=p({},n);return Object.keys(e).forEach((function(n){var r;t=p({},t,((r={})[n]=e[n],r))})),t},t.warnOnInvalidChildren=function(e,n){return c()(x.some((function(n){return e.type===n})),"function"==typeof e.type?"You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.":"Only elements types "+x.join(", ")+" are allowed. Helmet does not support rendering <"+e.type+"> elements. Refer to our API for more information."),c()(!n||"string"==typeof n||Array.isArray(n)&&!n.some((function(e){return"string"!=typeof e})),"Helmet expects a string as a child of <"+e.type+">. Did you forget to wrap your children in braces? ( <"+e.type+">{``}</"+e.type+"> ) Refer to our API for more information."),!0},t.mapChildrenToProps=function(e,n){var t=this,a={};return r.Children.forEach(e,(function(e){if(e&&e.props){var r=e.props,o=r.children,i=h(r,J),s=Object.keys(i).reduce((function(e,n){return e[k[n]||n]=i[n],e}),{}),l=e.type;switch("symbol"==typeof l?l=l.toString():t.warnOnInvalidChildren(e,o),l){case y.FRAGMENT:n=t.mapChildrenToProps(o,n);break;case y.LINK:case y.META:case y.NOSCRIPT:case y.SCRIPT:case y.STYLE:a=t.flattenArrayTypeChildren({child:e,arrayTypeChildren:a,newChildProps:s,nestedChildren:o});break;default:n=t.mapObjectTypeChildren({child:e,newProps:n,newChildProps:s,nestedChildren:o})}}})),this.mapArrayTypeChildrenToProps(a,n)},t.render=function(){var e=this.props,n=e.children,t=h(e,Q),a=p({},t),o=t.helmetData;return n&&(a=this.mapChildrenToProps(n,a)),!o||o instanceof F||(o=new F(o.context,o.instances)),o?r.createElement(Y,p({},a,{context:o.value,helmetData:void 0})):r.createElement(U.Consumer,null,(function(e){return r.createElement(Y,p({},a,{context:e}))}))},n}(r.Component);X.propTypes={base:o().object,bodyAttributes:o().object,children:o().oneOfType([o().arrayOf(o().node),o().node]),defaultTitle:o().string,defer:o().bool,encodeSpecialCharacters:o().bool,htmlAttributes:o().object,link:o().arrayOf(o().object),meta:o().arrayOf(o().object),noscript:o().arrayOf(o().object),onChangeClientState:o().func,script:o().arrayOf(o().object),style:o().arrayOf(o().object),title:o().string,titleAttributes:o().object,titleTemplate:o().string,prioritizeSeoTags:o().bool,helmetData:o().object},X.defaultProps={defer:!0,encodeSpecialCharacters:!0,prioritizeSeoTags:!1},X.displayName="Helmet"},66866:(e,n)=>{"use strict";var t="function"==typeof Symbol&&Symbol.for,r=t?Symbol.for("react.element"):60103,a=t?Symbol.for("react.portal"):60106,o=t?Symbol.for("react.fragment"):60107,i=t?Symbol.for("react.strict_mode"):60108,s=t?Symbol.for("react.profiler"):60114,l=t?Symbol.for("react.provider"):60109,c=t?Symbol.for("react.context"):60110,d=t?Symbol.for("react.async_mode"):60111,u=t?Symbol.for("react.concurrent_mode"):60111,p=t?Symbol.for("react.forward_ref"):60112,m=t?Symbol.for("react.suspense"):60113,f=t?Symbol.for("react.suspense_list"):60120,h=t?Symbol.for("react.memo"):60115,y=t?Symbol.for("react.lazy"):60116,g=t?Symbol.for("react.block"):60121,b=t?Symbol.for("react.fundamental"):60117,v=t?Symbol.for("react.responder"):60118,x=t?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var n=e.$$typeof;switch(n){case r:switch(e=e.type){case d:case u:case o:case s:case i:case m:return e;default:switch(e=e&&e.$$typeof){case c:case p:case y:case h:case l:return e;default:return n}}case a:return n}}}function k(e){return w(e)===u}n.AsyncMode=d,n.ConcurrentMode=u,n.ContextConsumer=c,n.ContextProvider=l,n.Element=r,n.ForwardRef=p,n.Fragment=o,n.Lazy=y,n.Memo=h,n.Portal=a,n.Profiler=s,n.StrictMode=i,n.Suspense=m,n.isAsyncMode=function(e){return k(e)||w(e)===d},n.isConcurrentMode=k,n.isContextConsumer=function(e){return w(e)===c},n.isContextProvider=function(e){return w(e)===l},n.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},n.isForwardRef=function(e){return w(e)===p},n.isFragment=function(e){return w(e)===o},n.isLazy=function(e){return w(e)===y},n.isMemo=function(e){return w(e)===h},n.isPortal=function(e){return w(e)===a},n.isProfiler=function(e){return w(e)===s},n.isStrictMode=function(e){return w(e)===i},n.isSuspense=function(e){return w(e)===m},n.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===u||e===s||e===i||e===m||e===f||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===h||e.$$typeof===l||e.$$typeof===c||e.$$typeof===p||e.$$typeof===b||e.$$typeof===v||e.$$typeof===x||e.$$typeof===g)},n.typeOf=w},48570:(e,n,t)=>{"use strict";e.exports=t(66866)},89028:(e,n,t)=>{"use strict";function r(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}function a(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}var s=t(2784),l=[],c=[];var d=s.createContext(null);function u(e){var n=e(),t={loading:!0,loaded:null,error:null};return t.promise=n.then((function(e){return t.loading=!1,t.loaded=e,e})).catch((function(e){throw t.loading=!1,t.error=e,e})),t}function p(e){var n={loading:!1,loaded:{},error:null},t=[];try{Object.keys(e).forEach((function(r){var a=u(e[r]);a.loading?n.loading=!0:(n.loaded[r]=a.loaded,n.error=a.error),t.push(a.promise),a.promise.then((function(e){n.loaded[r]=e})).catch((function(e){n.error=e}))}))}catch(r){n.error=r}return n.promise=Promise.all(t).then((function(e){return n.loading=!1,e})).catch((function(e){throw n.loading=!1,e})),n}function m(e,n){return s.createElement((t=e)&&t.__esModule?t.default:t,n);var t}function f(e,n){var u,p;if(!n.loading)throw new Error("react-loadable requires a `loading` component");var f=i({loader:null,loading:null,delay:200,timeout:null,render:m,webpack:null,modules:null},n),h=null;function y(){return h||(h=e(f.loader)),h.promise}return l.push(y),"function"==typeof f.webpack&&c.push((function(){if((0,f.webpack)().every((function(e){return void 0!==e&&void 0!==t.m[e]})))return y()})),p=u=function(n){function t(t){var r;return o(a(a(r=n.call(this,t)||this)),"retry",(function(){r.setState({error:null,loading:!0,timedOut:!1}),h=e(f.loader),r._loadModule()})),y(),r.state={error:h.error,pastDelay:!1,timedOut:!1,loading:h.loading,loaded:h.loaded},r}r(t,n),t.preload=function(){return y()};var i=t.prototype;return i.UNSAFE_componentWillMount=function(){this._loadModule()},i.componentDidMount=function(){this._mounted=!0},i._loadModule=function(){var e=this;if(this.context&&Array.isArray(f.modules)&&f.modules.forEach((function(n){e.context.report(n)})),h.loading){var n=function(n){e._mounted&&e.setState(n)};"number"==typeof f.delay&&(0===f.delay?this.setState({pastDelay:!0}):this._delay=setTimeout((function(){n({pastDelay:!0})}),f.delay)),"number"==typeof f.timeout&&(this._timeout=setTimeout((function(){n({timedOut:!0})}),f.timeout));var t=function(){n({error:h.error,loaded:h.loaded,loading:h.loading}),e._clearTimeouts()};h.promise.then((function(){return t(),null})).catch((function(e){return t(),null}))}},i.componentWillUnmount=function(){this._mounted=!1,this._clearTimeouts()},i._clearTimeouts=function(){clearTimeout(this._delay),clearTimeout(this._timeout)},i.render=function(){return this.state.loading||this.state.error?s.createElement(f.loading,{isLoading:this.state.loading,pastDelay:this.state.pastDelay,timedOut:this.state.timedOut,error:this.state.error,retry:this.retry}):this.state.loaded?f.render(this.state.loaded,this.props):null},t}(s.Component),o(u,"contextType",d),p}function h(e){return f(u,e)}h.Map=function(e){if("function"!=typeof e.render)throw new Error("LoadableMap requires a `render(loaded, props)` function");return f(p,e)};var y=function(e){function n(){return e.apply(this,arguments)||this}return r(n,e),n.prototype.render=function(){return s.createElement(d.Provider,{value:{report:this.props.report}},s.Children.only(this.props.children))},n}(s.Component);function g(e){for(var n=[];e.length;){var t=e.pop();n.push(t())}return Promise.all(n).then((function(){if(e.length)return g(e)}))}h.Capture=y,h.preloadAll=function(){return new Promise((function(e,n){g(l).then(e,n)}))},h.preloadReady=function(){return new Promise((function(e,n){g(c).then(e,e)}))},e.exports=h},9702:(e,n,t)=>{"use strict";t.d(n,{H:()=>s,f:()=>i});var r=t(7267),a=t(7896),o=t(2784);function i(e,n,t){return void 0===t&&(t=[]),e.some((function(e){var a=e.path?(0,r.LX)(n,e):t.length?t[t.length-1].match:r.F0.computeRootMatch(n);return a&&(t.push({route:e,match:a}),e.routes&&i(e.routes,n,t)),a})),t}function s(e,n,t){return void 0===n&&(n={}),void 0===t&&(t={}),e?o.createElement(r.rs,t,e.map((function(e,t){return o.createElement(r.AW,{key:e.key||t,path:e.path,exact:e.exact,strict:e.strict,render:function(t){return e.render?e.render((0,a.Z)({},t,{},n,{route:e})):o.createElement(e.component,(0,a.Z)({},t,n,{route:e}))}})}))):null}},47933:(e,n,t)=>{"use strict";t.d(n,{OL:()=>x,UT:()=>u,VK:()=>d,rU:()=>g});var r=t(7267),a=t(32222),o=t(2784),i=t(14410),s=t(7896),l=t(31461),c=t(10362),d=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return(n=e.call.apply(e,[this].concat(r))||this).history=(0,i.lX)(n.props),n}return(0,a.Z)(n,e),n.prototype.render=function(){return o.createElement(r.F0,{history:this.history,children:this.props.children})},n}(o.Component);var u=function(e){function n(){for(var n,t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return(n=e.call.apply(e,[this].concat(r))||this).history=(0,i.q_)(n.props),n}return(0,a.Z)(n,e),n.prototype.render=function(){return o.createElement(r.F0,{history:this.history,children:this.props.children})},n}(o.Component);var p=function(e,n){return"function"==typeof e?e(n):e},m=function(e,n){return"string"==typeof e?(0,i.ob)(e,null,null,n):e},f=function(e){return e},h=o.forwardRef;void 0===h&&(h=f);var y=h((function(e,n){var t=e.innerRef,r=e.navigate,a=e.onClick,i=(0,l.Z)(e,["innerRef","navigate","onClick"]),c=i.target,d=(0,s.Z)({},i,{onClick:function(e){try{a&&a(e)}catch(n){throw e.preventDefault(),n}e.defaultPrevented||0!==e.button||c&&"_self"!==c||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return d.ref=f!==h&&n||t,o.createElement("a",d)}));var g=h((function(e,n){var t=e.component,a=void 0===t?y:t,d=e.replace,u=e.to,g=e.innerRef,b=(0,l.Z)(e,["component","replace","to","innerRef"]);return o.createElement(r.s6.Consumer,null,(function(e){e||(0,c.Z)(!1);var t=e.history,r=m(p(u,e.location),e.location),l=r?t.createHref(r):"",y=(0,s.Z)({},b,{href:l,navigate:function(){var n=p(u,e.location),r=(0,i.Ep)(e.location)===(0,i.Ep)(m(n));(d||r?t.replace:t.push)(n)}});return f!==h?y.ref=n||g:y.innerRef=g,o.createElement(a,y)}))})),b=function(e){return e},v=o.forwardRef;void 0===v&&(v=b);var x=v((function(e,n){var t=e["aria-current"],a=void 0===t?"page":t,i=e.activeClassName,d=void 0===i?"active":i,u=e.activeStyle,f=e.className,h=e.exact,y=e.isActive,x=e.location,w=e.sensitive,k=e.strict,S=e.style,$=e.to,j=e.innerRef,E=(0,l.Z)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return o.createElement(r.s6.Consumer,null,(function(e){e||(0,c.Z)(!1);var t=x||e.location,i=m(p($,t),t),l=i.pathname,C=l&&l.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),P=C?(0,r.LX)(t.pathname,{path:C,exact:h,sensitive:w,strict:k}):null,_=!!(y?y(P,t):P),T="function"==typeof f?f(_):f,O="function"==typeof S?S(_):S;_&&(T=function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return n.filter((function(e){return e})).join(" ")}(T,d),O=(0,s.Z)({},O,u));var A=(0,s.Z)({"aria-current":_&&a||null,className:T,style:O,to:i},E);return b!==v?A.ref=n||j:A.innerRef=j,o.createElement(g,A)}))}))},7267:(e,n,t)=>{"use strict";t.d(n,{AW:()=>$,F0:()=>v,LX:()=>S,TH:()=>R,k6:()=>A,rs:()=>T,s6:()=>b});var r=t(32222),a=t(2784),o=t(13980),i=t.n(o),s=t(14410),l=t(10362),c=t(7896),d=t(79056),u=t.n(d),p=(t(48570),t(31461)),m=(t(73463),1073741823),f="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t.g?t.g:{};var h=a.createContext||function(e,n){var t,o,s="__create-react-context-"+function(){var e="__global_unique_id__";return f[e]=(f[e]||0)+1}()+"__",l=function(e){function t(){for(var n,t,r,a=arguments.length,o=new Array(a),i=0;i<a;i++)o[i]=arguments[i];return(n=e.call.apply(e,[this].concat(o))||this).emitter=(t=n.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter((function(n){return n!==e}))},get:function(){return t},set:function(e,n){t=e,r.forEach((function(e){return e(t,n)}))}}),n}(0,r.Z)(t,e);var a=t.prototype;return a.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},a.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,a=e.value;((o=r)===(i=a)?0!==o||1/o==1/i:o!=o&&i!=i)?t=0:(t="function"==typeof n?n(r,a):m,0!==(t|=0)&&this.emitter.set(e.value,t))}var o,i},a.render=function(){return this.props.children},t}(a.Component);l.childContextTypes=((t={})[s]=i().object.isRequired,t);var c=function(n){function t(){for(var e,t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return(e=n.call.apply(n,[this].concat(r))||this).observedBits=void 0,e.state={value:e.getValue()},e.onUpdate=function(n,t){0!=((0|e.observedBits)&t)&&e.setState({value:e.getValue()})},e}(0,r.Z)(t,n);var a=t.prototype;return a.componentWillReceiveProps=function(e){var n=e.observedBits;this.observedBits=null==n?m:n},a.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?m:e},a.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},a.getValue=function(){return this.context[s]?this.context[s].get():e},a.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},t}(a.Component);return c.contextTypes=((o={})[s]=i().object,o),{Provider:l,Consumer:c}},y=function(e){var n=h();return n.displayName=e,n},g=y("Router-History"),b=y("Router"),v=function(e){function n(n){var t;return(t=e.call(this,n)||this).state={location:n.history.location},t._isMounted=!1,t._pendingLocation=null,n.staticContext||(t.unlisten=n.history.listen((function(e){t._pendingLocation=e}))),t}(0,r.Z)(n,e),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var t=n.prototype;return t.componentDidMount=function(){var e=this;this._isMounted=!0,this.unlisten&&this.unlisten(),this.props.staticContext||(this.unlisten=this.props.history.listen((function(n){e._isMounted&&e.setState({location:n})}))),this._pendingLocation&&this.setState({location:this._pendingLocation})},t.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},t.render=function(){return a.createElement(b.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},a.createElement(g.Provider,{children:this.props.children||null,value:this.props.history}))},n}(a.Component);a.Component;a.Component;var x={},w=1e4,k=0;function S(e,n){void 0===n&&(n={}),("string"==typeof n||Array.isArray(n))&&(n={path:n});var t=n,r=t.path,a=t.exact,o=void 0!==a&&a,i=t.strict,s=void 0!==i&&i,l=t.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(n,t){if(!t&&""!==t)return null;if(n)return n;var r=function(e,n){var t=""+n.end+n.strict+n.sensitive,r=x[t]||(x[t]={});if(r[e])return r[e];var a=[],o={regexp:u()(e,a,n),keys:a};return k<w&&(r[e]=o,k++),o}(t,{end:o,strict:s,sensitive:c}),a=r.regexp,i=r.keys,l=a.exec(e);if(!l)return null;var d=l[0],p=l.slice(1),m=e===d;return o&&!m?null:{path:t,url:"/"===t&&""===d?"/":d,isExact:m,params:i.reduce((function(e,n,t){return e[n.name]=p[t],e}),{})}}),null)}var $=function(e){function n(){return e.apply(this,arguments)||this}return(0,r.Z)(n,e),n.prototype.render=function(){var e=this;return a.createElement(b.Consumer,null,(function(n){n||(0,l.Z)(!1);var t=e.props.location||n.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?S(t.pathname,e.props):n.match,o=(0,c.Z)({},n,{location:t,match:r}),i=e.props,s=i.children,d=i.component,u=i.render;return Array.isArray(s)&&function(e){return 0===a.Children.count(e)}(s)&&(s=null),a.createElement(b.Provider,{value:o},o.match?s?"function"==typeof s?s(o):s:d?a.createElement(d,o):u?u(o):null:"function"==typeof s?s(o):null)}))},n}(a.Component);function j(e){return"/"===e.charAt(0)?e:"/"+e}function E(e,n){if(!e)return n;var t=j(e);return 0!==n.pathname.indexOf(t)?n:(0,c.Z)({},n,{pathname:n.pathname.substr(t.length)})}function C(e){return"string"==typeof e?e:(0,s.Ep)(e)}function P(e){return function(){(0,l.Z)(!1)}}function _(){}a.Component;var T=function(e){function n(){return e.apply(this,arguments)||this}return(0,r.Z)(n,e),n.prototype.render=function(){var e=this;return a.createElement(b.Consumer,null,(function(n){n||(0,l.Z)(!1);var t,r,o=e.props.location||n.location;return a.Children.forEach(e.props.children,(function(e){if(null==r&&a.isValidElement(e)){t=e;var i=e.props.path||e.props.from;r=i?S(o.pathname,(0,c.Z)({},e.props,{path:i})):n.match}})),r?a.cloneElement(t,{location:o,computedMatch:r}):null}))},n}(a.Component);var O=a.useContext;function A(){return O(g)}function R(){return O(b).location}},79056:(e,n,t)=>{var r=t(77906);e.exports=m,e.exports.parse=o,e.exports.compile=function(e,n){return s(o(e,n),n)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=p;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,n){for(var t,r=[],o=0,i=0,s="",d=n&&n.delimiter||"/";null!=(t=a.exec(e));){var u=t[0],p=t[1],m=t.index;if(s+=e.slice(i,m),i=m+u.length,p)s+=p[1];else{var f=e[i],h=t[2],y=t[3],g=t[4],b=t[5],v=t[6],x=t[7];s&&(r.push(s),s="");var w=null!=h&&null!=f&&f!==h,k="+"===v||"*"===v,S="?"===v||"*"===v,$=t[2]||d,j=g||b;r.push({name:y||o++,prefix:h||"",delimiter:$,optional:S,repeat:k,partial:w,asterisk:!!x,pattern:j?c(j):x?".*":"[^"+l($)+"]+?"})}}return i<e.length&&(s+=e.substr(i)),s&&r.push(s),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,n){for(var t=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(t[a]=new RegExp("^(?:"+e[a].pattern+")$",u(n)));return function(n,a){for(var o="",s=n||{},l=(a||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var d=e[c];if("string"!=typeof d){var u,p=s[d.name];if(null==p){if(d.optional){d.partial&&(o+=d.prefix);continue}throw new TypeError('Expected "'+d.name+'" to be defined')}if(r(p)){if(!d.repeat)throw new TypeError('Expected "'+d.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(d.optional)continue;throw new TypeError('Expected "'+d.name+'" to not be empty')}for(var m=0;m<p.length;m++){if(u=l(p[m]),!t[c].test(u))throw new TypeError('Expected all "'+d.name+'" to match "'+d.pattern+'", but received `'+JSON.stringify(u)+"`");o+=(0===m?d.prefix:d.delimiter)+u}}else{if(u=d.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(p),!t[c].test(u))throw new TypeError('Expected "'+d.name+'" to match "'+d.pattern+'", but received "'+u+'"');o+=d.prefix+u}}else o+=d}return o}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function d(e,n){return e.keys=n,e}function u(e){return e&&e.sensitive?"":"i"}function p(e,n,t){r(n)||(t=n||t,n=[]);for(var a=(t=t||{}).strict,o=!1!==t.end,i="",s=0;s<e.length;s++){var c=e[s];if("string"==typeof c)i+=l(c);else{var p=l(c.prefix),m="(?:"+c.pattern+")";n.push(c),c.repeat&&(m+="(?:"+p+m+")*"),i+=m=c.optional?c.partial?p+"("+m+")?":"(?:"+p+"("+m+"))?":p+"("+m+")"}}var f=l(t.delimiter||"/"),h=i.slice(-f.length)===f;return a||(i=(h?i.slice(0,-f.length):i)+"(?:"+f+"(?=$))?"),i+=o?"$":a&&h?"":"(?="+f+"|$)",d(new RegExp("^"+i,u(t)),n)}function m(e,n,t){return r(n)||(t=n||t,n=[]),t=t||{},e instanceof RegExp?function(e,n){var t=e.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)n.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return d(e,n)}(e,n):r(e)?function(e,n,t){for(var r=[],a=0;a<e.length;a++)r.push(m(e[a],n,t).source);return d(new RegExp("(?:"+r.join("|")+")",u(t)),n)}(e,n,t):function(e,n,t){return p(o(e,t),n,t)}(e,n,t)}},11837:(e,n,t)=>{"use strict";var r=t(2784),a=Symbol.for("react.element"),o=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,n,t){var r,o={},c=null,d=null;for(r in void 0!==t&&(c=""+t),void 0!==n.key&&(c=""+n.key),void 0!==n.ref&&(d=n.ref),n)i.call(n,r)&&!l.hasOwnProperty(r)&&(o[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===o[r]&&(o[r]=n[r]);return{$$typeof:a,type:e,key:c,ref:d,props:o,_owner:s.current}}n.Fragment=o,n.jsx=c,n.jsxs=c},83426:(e,n)=>{"use strict";var t=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),u=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),m=Symbol.iterator;var f={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,y={};function g(e,n,t){this.props=e,this.context=n,this.refs=y,this.updater=t||f}function b(){}function v(e,n,t){this.props=e,this.context=n,this.refs=y,this.updater=t||f}g.prototype.isReactComponent={},g.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=g.prototype;var x=v.prototype=new b;x.constructor=v,h(x,g.prototype),x.isPureReactComponent=!0;var w=Array.isArray,k=Object.prototype.hasOwnProperty,S={current:null},$={key:!0,ref:!0,__self:!0,__source:!0};function j(e,n,r){var a,o={},i=null,s=null;if(null!=n)for(a in void 0!==n.ref&&(s=n.ref),void 0!==n.key&&(i=""+n.key),n)k.call(n,a)&&!$.hasOwnProperty(a)&&(o[a]=n[a]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var c=Array(l),d=0;d<l;d++)c[d]=arguments[d+2];o.children=c}if(e&&e.defaultProps)for(a in l=e.defaultProps)void 0===o[a]&&(o[a]=l[a]);return{$$typeof:t,type:e,key:i,ref:s,props:o,_owner:S.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var C=/\/+/g;function P(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function _(e,n,a,o,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case t:case r:l=!0}}if(l)return i=i(l=e),e=""===o?"."+P(l,0):o,w(i)?(a="",null!=e&&(a=e.replace(C,"$&/")+"/"),_(i,n,a,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,n){return{$$typeof:t,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),n.push(i)),1;if(l=0,o=""===o?".":o+":",w(e))for(var c=0;c<e.length;c++){var d=o+P(s=e[c],c);l+=_(s,n,a,d,i)}else if(d=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=m&&e[m]||e["@@iterator"])?e:null}(e),"function"==typeof d)for(e=d.call(e),c=0;!(s=e.next()).done;)l+=_(s=s.value,n,a,d=o+P(s,c++),i);else if("object"===s)throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.");return l}function T(e,n,t){if(null==e)return e;var r=[],a=0;return _(e,r,"","",(function(e){return n.call(t,e,a++)})),r}function O(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var A={current:null},R={transition:null},N={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:R,ReactCurrentOwner:S};n.Children={map:T,forEach:function(e,n,t){T(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return T(e,(function(){n++})),n},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=g,n.Fragment=a,n.Profiler=i,n.PureComponent=v,n.StrictMode=o,n.Suspense=d,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,n.cloneElement=function(e,n,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,i=e.ref,s=e._owner;if(null!=n){if(void 0!==n.ref&&(i=n.ref,s=S.current),void 0!==n.key&&(o=""+n.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in n)k.call(n,c)&&!$.hasOwnProperty(c)&&(a[c]=void 0===n[c]&&void 0!==l?l[c]:n[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){l=Array(c);for(var d=0;d<c;d++)l[d]=arguments[d+2];a.children=l}return{$$typeof:t,type:e.type,key:o,ref:i,props:a,_owner:s}},n.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},n.createElement=j,n.createFactory=function(e){var n=j.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:c,render:e}},n.isValidElement=E,n.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:O}},n.memo=function(e,n){return{$$typeof:u,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=R.transition;R.transition={};try{e()}finally{R.transition=n}},n.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},n.useCallback=function(e,n){return A.current.useCallback(e,n)},n.useContext=function(e){return A.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return A.current.useDeferredValue(e)},n.useEffect=function(e,n){return A.current.useEffect(e,n)},n.useId=function(){return A.current.useId()},n.useImperativeHandle=function(e,n,t){return A.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return A.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return A.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return A.current.useMemo(e,n)},n.useReducer=function(e,n,t){return A.current.useReducer(e,n,t)},n.useRef=function(e){return A.current.useRef(e)},n.useState=function(e){return A.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return A.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return A.current.useTransition()},n.version="18.2.0"},2784:(e,n,t)=>{"use strict";e.exports=t(83426)},52322:(e,n,t)=>{"use strict";e.exports=t(11837)},46475:(e,n)=>{"use strict";function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,a=e[r];if(!(0<o(a,n)))break e;e[r]=n,e[t]=a,t=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var s=2*(r+1)-1,l=e[s],c=s+1,d=e[c];if(0>o(l,t))c<a&&0>o(d,l)?(e[r]=d,e[c]=t,r=c):(e[r]=l,e[s]=t,r=s);else{if(!(c<a&&0>o(d,t)))break e;e[r]=d,e[c]=t,r=c}}}return n}function o(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;n.unstable_now=function(){return i.now()}}else{var s=Date,l=s.now();n.unstable_now=function(){return s.now()-l}}var c=[],d=[],u=1,p=null,m=3,f=!1,h=!1,y=!1,g="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,v="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var n=r(d);null!==n;){if(null===n.callback)a(d);else{if(!(n.startTime<=e))break;a(d),n.sortIndex=n.expirationTime,t(c,n)}n=r(d)}}function w(e){if(y=!1,x(e),!h)if(null!==r(c))h=!0,R(k);else{var n=r(d);null!==n&&N(w,n.startTime-e)}}function k(e,t){h=!1,y&&(y=!1,b(E),E=-1),f=!0;var o=m;try{for(x(t),p=r(c);null!==p&&(!(p.expirationTime>t)||e&&!_());){var i=p.callback;if("function"==typeof i){p.callback=null,m=p.priorityLevel;var s=i(p.expirationTime<=t);t=n.unstable_now(),"function"==typeof s?p.callback=s:p===r(c)&&a(c),x(t)}else a(c);p=r(c)}if(null!==p)var l=!0;else{var u=r(d);null!==u&&N(w,u.startTime-t),l=!1}return l}finally{p=null,m=o,f=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,$=!1,j=null,E=-1,C=5,P=-1;function _(){return!(n.unstable_now()-P<C)}function T(){if(null!==j){var e=n.unstable_now();P=e;var t=!0;try{t=j(!0,e)}finally{t?S():($=!1,j=null)}}else $=!1}if("function"==typeof v)S=function(){v(T)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,A=O.port2;O.port1.onmessage=T,S=function(){A.postMessage(null)}}else S=function(){g(T,0)};function R(e){j=e,$||($=!0,S())}function N(e,t){E=g((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){h||f||(h=!0,R(k))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return m},n.unstable_getFirstCallbackNode=function(){return r(c)},n.unstable_next=function(e){switch(m){case 1:case 2:case 3:var n=3;break;default:n=m}var t=m;m=n;try{return e()}finally{m=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=m;m=e;try{return n()}finally{m=t}},n.unstable_scheduleCallback=function(e,a,o){var i=n.unstable_now();switch("object"==typeof o&&null!==o?o="number"==typeof(o=o.delay)&&0<o?i+o:i:o=i,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:u++,callback:a,priorityLevel:e,startTime:o,expirationTime:s=o+s,sortIndex:-1},o>i?(e.sortIndex=o,t(d,e),null===r(c)&&e===r(d)&&(y?(b(E),E=-1):y=!0,N(w,o-i))):(e.sortIndex=s,t(c,e),h||f||(h=!0,R(k))),e},n.unstable_shouldYield=_,n.unstable_wrapCallback=function(e){var n=m;return function(){var t=m;m=n;try{return e.apply(this,arguments)}finally{m=t}}}},14616:(e,n,t)=>{"use strict";e.exports=t(46475)},88665:e=>{e.exports=function(e,n,t,r){var a=t?t.call(r,e,n):void 0;if(void 0!==a)return!!a;if(e===n)return!0;if("object"!=typeof e||!e||"object"!=typeof n||!n)return!1;var o=Object.keys(e),i=Object.keys(n);if(o.length!==i.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(n),l=0;l<o.length;l++){var c=o[l];if(!s(c))return!1;var d=e[c],u=n[c];if(!1===(a=t?t.call(r,d,u,c):void 0)||void 0===a&&d!==u)return!1}return!0}},7896:(e,n,t)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},r.apply(this,arguments)}t.d(n,{Z:()=>r})},32222:(e,n,t)=>{"use strict";function r(e,n){return r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},r(e,n)}function a(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,r(e,n)}t.d(n,{Z:()=>a})},31461:(e,n,t)=>{"use strict";function r(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}t.d(n,{Z:()=>r})},40489:(e,n,t)=>{"use strict";function r(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(n=0;n<o;n++)e[n]&&(t=r(e[n]))&&(a&&(a+=" "),a+=t)}else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.d(n,{Z:()=>a});const a=function(){for(var e,n,t=0,a="",o=arguments.length;t<o;t++)(e=arguments[t])&&(n=r(e))&&(a&&(a+=" "),a+=n);return a}},16935:(e,n,t)=>{"use strict";t.d(n,{p1:()=>C,y$:()=>ee});var r,a,o,i,s,l,c,d=t(2784),u=t(40489),p=Object.create,m=Object.defineProperty,f=Object.defineProperties,h=Object.getOwnPropertyDescriptor,y=Object.getOwnPropertyDescriptors,g=Object.getOwnPropertyNames,b=Object.getOwnPropertySymbols,v=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable,k=(e,n,t)=>n in e?m(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,S=(e,n)=>{for(var t in n||(n={}))x.call(n,t)&&k(e,t,n[t]);if(b)for(var t of b(n))w.call(n,t)&&k(e,t,n[t]);return e},$=(e,n)=>f(e,y(n)),j=(e,n)=>{var t={};for(var r in e)x.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&b)for(var r of b(e))n.indexOf(r)<0&&w.call(e,r)&&(t[r]=e[r]);return t},E=(r={"../../node_modules/.pnpm/prismjs@1.29.0_patch_hash=vrxx3pzkik6jpmgpayxfjunetu/node_modules/prismjs/prism.js"(e,n){var t=function(){var e=/(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i,n=0,t={},r={util:{encode:function e(n){return n instanceof a?new a(n.type,e(n.content),n.alias):Array.isArray(n)?n.map(e):n.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++n}),e.__id},clone:function e(n,t){var a,o;switch(t=t||{},r.util.type(n)){case"Object":if(o=r.util.objId(n),t[o])return t[o];for(var i in a={},t[o]=a,n)n.hasOwnProperty(i)&&(a[i]=e(n[i],t));return a;case"Array":return o=r.util.objId(n),t[o]?t[o]:(a=[],t[o]=a,n.forEach((function(n,r){a[r]=e(n,t)})),a);default:return n}},getLanguage:function(n){for(;n;){var t=e.exec(n.className);if(t)return t[1].toLowerCase();n=n.parentElement}return"none"},setLanguage:function(n,t){n.className=n.className.replace(RegExp(e,"gi"),""),n.classList.add("language-"+t)},isActive:function(e,n,t){for(var r="no-"+n;e;){var a=e.classList;if(a.contains(n))return!0;if(a.contains(r))return!1;e=e.parentElement}return!!t}},languages:{plain:t,plaintext:t,text:t,txt:t,extend:function(e,n){var t=r.util.clone(r.languages[e]);for(var a in n)t[a]=n[a];return t},insertBefore:function(e,n,t,a){var o=(a=a||r.languages)[e],i={};for(var s in o)if(o.hasOwnProperty(s)){if(s==n)for(var l in t)t.hasOwnProperty(l)&&(i[l]=t[l]);t.hasOwnProperty(s)||(i[s]=o[s])}var c=a[e];return a[e]=i,r.languages.DFS(r.languages,(function(n,t){t===c&&n!=e&&(this[n]=i)})),i},DFS:function e(n,t,a,o){o=o||{};var i=r.util.objId;for(var s in n)if(n.hasOwnProperty(s)){t.call(n,s,n[s],a||s);var l=n[s],c=r.util.type(l);"Object"!==c||o[i(l)]?"Array"!==c||o[i(l)]||(o[i(l)]=!0,e(l,t,s,o)):(o[i(l)]=!0,e(l,t,null,o))}}},plugins:{},highlight:function(e,n,t){var o={code:e,grammar:n,language:t};if(r.hooks.run("before-tokenize",o),!o.grammar)throw new Error('The language "'+o.language+'" has no grammar.');return o.tokens=r.tokenize(o.code,o.grammar),r.hooks.run("after-tokenize",o),a.stringify(r.util.encode(o.tokens),o.language)},tokenize:function(e,n){var t=n.rest;if(t){for(var r in t)n[r]=t[r];delete n.rest}var a=new s;return l(a,a.head,e),i(e,a,n,a.head,0),function(e){for(var n=[],t=e.head.next;t!==e.tail;)n.push(t.value),t=t.next;return n}(a)},hooks:{all:{},add:function(e,n){var t=r.hooks.all;t[e]=t[e]||[],t[e].push(n)},run:function(e,n){var t=r.hooks.all[e];if(t&&t.length)for(var a,o=0;a=t[o++];)a(n)}},Token:a};function a(e,n,t,r){this.type=e,this.content=n,this.alias=t,this.length=0|(r||"").length}function o(e,n,t,r){e.lastIndex=n;var a=e.exec(t);if(a&&r&&a[1]){var o=a[1].length;a.index+=o,a[0]=a[0].slice(o)}return a}function i(e,n,t,s,d,u){for(var p in t)if(t.hasOwnProperty(p)&&t[p]){var m=t[p];m=Array.isArray(m)?m:[m];for(var f=0;f<m.length;++f){if(u&&u.cause==p+","+f)return;var h=m[f],y=h.inside,g=!!h.lookbehind,b=!!h.greedy,v=h.alias;if(b&&!h.pattern.global){var x=h.pattern.toString().match(/[imsuy]*$/)[0];h.pattern=RegExp(h.pattern.source,x+"g")}for(var w=h.pattern||h,k=s.next,S=d;k!==n.tail&&!(u&&S>=u.reach);S+=k.value.length,k=k.next){var $=k.value;if(n.length>e.length)return;if(!($ instanceof a)){var j,E=1;if(b){if(!(j=o(w,S,e,g))||j.index>=e.length)break;var C=j.index,P=j.index+j[0].length,_=S;for(_+=k.value.length;C>=_;)_+=(k=k.next).value.length;if(S=_-=k.value.length,k.value instanceof a)continue;for(var T=k;T!==n.tail&&(_<P||"string"==typeof T.value);T=T.next)E++,_+=T.value.length;E--,$=e.slice(S,_),j.index-=S}else if(!(j=o(w,0,$,g)))continue;C=j.index;var O=j[0],A=$.slice(0,C),R=$.slice(C+O.length),N=S+$.length;u&&N>u.reach&&(u.reach=N);var I=k.prev;if(A&&(I=l(n,I,A),S+=A.length),c(n,I,E),k=l(n,I,new a(p,y?r.tokenize(O,y):O,v,O)),R&&l(n,k,R),E>1){var L={cause:p+","+f,reach:N};i(e,n,t,k.prev,S,L),u&&L.reach>u.reach&&(u.reach=L.reach)}}}}}}function s(){var e={value:null,prev:null,next:null},n={value:null,prev:e,next:null};e.next=n,this.head=e,this.tail=n,this.length=0}function l(e,n,t){var r=n.next,a={value:t,prev:n,next:r};return n.next=a,r.prev=a,e.length++,a}function c(e,n,t){for(var r=n.next,a=0;a<t&&r!==e.tail;a++)r=r.next;n.next=r,r.prev=n,e.length-=a}return a.stringify=function e(n,t){if("string"==typeof n)return n;if(Array.isArray(n)){var a="";return n.forEach((function(n){a+=e(n,t)})),a}var o={type:n.type,content:e(n.content,t),tag:"span",classes:["token",n.type],attributes:{},language:t},i=n.alias;i&&(Array.isArray(i)?Array.prototype.push.apply(o.classes,i):o.classes.push(i)),r.hooks.run("wrap",o);var s="";for(var l in o.attributes)s+=" "+l+'="'+(o.attributes[l]||"").replace(/"/g,"&quot;")+'"';return"<"+o.tag+' class="'+o.classes.join(" ")+'"'+s+">"+o.content+"</"+o.tag+">"},r}();n.exports=t,t.default=t}},function(){return a||(0,r[g(r)[0]])((a={exports:{}}).exports,a),a.exports}),C=((e,n,t)=>(t=null!=e?p(v(e)):{},((e,n,t,r)=>{if(n&&"object"==typeof n||"function"==typeof n)for(let a of g(n))x.call(e,a)||a===t||m(e,a,{get:()=>n[a],enumerable:!(r=h(n,a))||r.enumerable});return e})(!n&&e&&e.__esModule?t:m(t,"default",{value:e,enumerable:!0}),e)))(E());C.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},{pattern:/^(\s*)["']|["']$/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},C.languages.markup.tag.inside["attr-value"].inside.entity=C.languages.markup.entity,C.languages.markup.doctype.inside["internal-subset"].inside=C.languages.markup,C.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(C.languages.markup.tag,"addInlined",{value:function(e,n){var t;(n=((t=((t={})["language-"+n]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:C.languages[n]},t.cdata=/^<!\[CDATA\[|\]\]>$/i,{"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:t}}))["language-"+n]={pattern:/[\s\S]+/,inside:C.languages[n]},{}))[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return e})),"i"),lookbehind:!0,greedy:!0,inside:t},C.languages.insertBefore("markup","cdata",n)}}),Object.defineProperty(C.languages.markup.tag,"addAttribute",{value:function(e,n){C.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+e+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[n,"language-"+n],inside:C.languages[n]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),C.languages.html=C.languages.markup,C.languages.mathml=C.languages.markup,C.languages.svg=C.languages.markup,C.languages.xml=C.languages.extend("markup",{}),C.languages.ssml=C.languages.xml,C.languages.atom=C.languages.xml,C.languages.rss=C.languages.xml,o=C,i={pattern:/\\[\\(){}[\]^$+*?|.]/,alias:"escape"},l="(?:[^\\\\-]|"+(s=/\\(?:x[\da-fA-F]{2}|u[\da-fA-F]{4}|u\{[\da-fA-F]+\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/).source+")",l=RegExp(l+"-"+l),c={pattern:/(<|')[^<>']+(?=[>']$)/,lookbehind:!0,alias:"variable"},o.languages.regex={"char-class":{pattern:/((?:^|[^\\])(?:\\\\)*)\[(?:[^\\\]]|\\[\s\S])*\]/,lookbehind:!0,inside:{"char-class-negation":{pattern:/(^\[)\^/,lookbehind:!0,alias:"operator"},"char-class-punctuation":{pattern:/^\[|\]$/,alias:"punctuation"},range:{pattern:l,inside:{escape:s,"range-punctuation":{pattern:/-/,alias:"operator"}}},"special-escape":i,"char-set":{pattern:/\\[wsd]|\\p\{[^{}]+\}/i,alias:"class-name"},escape:s}},"special-escape":i,"char-set":{pattern:/\.|\\[wsd]|\\p\{[^{}]+\}/i,alias:"class-name"},backreference:[{pattern:/\\(?![123][0-7]{2})[1-9]/,alias:"keyword"},{pattern:/\\k<[^<>']+>/,alias:"keyword",inside:{"group-name":c}}],anchor:{pattern:/[$^]|\\[ABbGZz]/,alias:"function"},escape:s,group:[{pattern:/\((?:\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,alias:"punctuation",inside:{"group-name":c}},{pattern:/\)/,alias:"punctuation"}],quantifier:{pattern:/(?:[+*?]|\{\d+(?:,\d*)?\})[?+]?/,alias:"number"},alternation:{pattern:/\|/,alias:"keyword"}},C.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,boolean:/\b(?:false|true)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/},C.languages.javascript=C.languages.extend("clike",{"class-name":[C.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:{pattern:RegExp(/(^|[^\w$])/.source+"(?:"+/NaN|Infinity/.source+"|"+/0[bB][01]+(?:_[01]+)*n?/.source+"|"+/0[oO][0-7]+(?:_[0-7]+)*n?/.source+"|"+/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source+"|"+/\d+(?:_\d+)*n/.source+"|"+/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source+")"+/(?![\w$])/.source),lookbehind:!0},operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),C.languages.javascript["class-name"][0].pattern=/(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/,C.languages.insertBefore("javascript","keyword",{regex:{pattern:RegExp(/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source+/\//.source+"(?:"+/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source+"|"+/(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source+")"+/(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:C.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:C.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:C.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:C.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:C.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),C.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:C.languages.javascript}},string:/[\s\S]+/}},"string-property":{pattern:/((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind:!0,greedy:!0,alias:"property"}}),C.languages.insertBefore("javascript","operator",{"literal-property":{pattern:/((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind:!0,alias:"property"}}),C.languages.markup&&(C.languages.markup.tag.addInlined("script","javascript"),C.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),C.languages.js=C.languages.javascript,C.languages.actionscript=C.languages.extend("javascript",{keyword:/\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\b/,operator:/\+\+|--|(?:[+\-*\/%^]|&&?|\|\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/}),C.languages.actionscript["class-name"].alias="function",delete C.languages.actionscript.parameter,delete C.languages.actionscript["literal-property"],C.languages.markup&&C.languages.insertBefore("actionscript","string",{xml:{pattern:/(^|[^.])<\/?\w+(?:\s+[^\s>\/=]+=("|')(?:\\[\s\S]|(?!\2)[^\\])*\2)*\s*\/?>/,lookbehind:!0,inside:C.languages.markup}}),function(e){var n=/#(?!\{).+/,t={pattern:/#\{[^}]+\}/,alias:"variable"};e.languages.coffeescript=e.languages.extend("javascript",{comment:n,string:[{pattern:/'(?:\\[\s\S]|[^\\'])*'/,greedy:!0},{pattern:/"(?:\\[\s\S]|[^\\"])*"/,greedy:!0,inside:{interpolation:t}}],keyword:/\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\b/,"class-member":{pattern:/@(?!\d)\w+/,alias:"variable"}}),e.languages.insertBefore("coffeescript","comment",{"multiline-comment":{pattern:/###[\s\S]+?###/,alias:"comment"},"block-regex":{pattern:/\/{3}[\s\S]*?\/{3}/,alias:"regex",inside:{comment:n,interpolation:t}}}),e.languages.insertBefore("coffeescript","string",{"inline-javascript":{pattern:/`(?:\\[\s\S]|[^\\`])*`/,inside:{delimiter:{pattern:/^`|`$/,alias:"punctuation"},script:{pattern:/[\s\S]+/,alias:"language-javascript",inside:e.languages.javascript}}},"multiline-string":[{pattern:/'''[\s\S]*?'''/,greedy:!0,alias:"string"},{pattern:/"""[\s\S]*?"""/,greedy:!0,alias:"string",inside:{interpolation:t}}]}),e.languages.insertBefore("coffeescript","keyword",{property:/(?!\d)\w+(?=\s*:(?!:))/}),delete e.languages.coffeescript["template-string"],e.languages.coffee=e.languages.coffeescript}(C),function(e){var n=e.languages.javadoclike={parameter:{pattern:/(^[\t ]*(?:\/{3}|\*|\/\*\*)\s*@(?:arg|arguments|param)\s+)\w+/m,lookbehind:!0},keyword:{pattern:/(^[\t ]*(?:\/{3}|\*|\/\*\*)\s*|\{)@[a-z][a-zA-Z-]+\b/m,lookbehind:!0},punctuation:/[{}]/};Object.defineProperty(n,"addSupport",{value:function(n,t){(n="string"==typeof n?[n]:n).forEach((function(n){var r=function(e){e.inside||(e.inside={}),e.inside.rest=t},a="doc-comment";if(o=e.languages[n]){var o,i=o[a];if((i=i||(o=e.languages.insertBefore(n,"comment",{"doc-comment":{pattern:/(^|[^\\])\/\*\*[^/][\s\S]*?(?:\*\/|$)/,lookbehind:!0,alias:"comment"}}))[a])instanceof RegExp&&(i=o[a]={pattern:i}),Array.isArray(i))for(var s=0,l=i.length;s<l;s++)i[s]instanceof RegExp&&(i[s]={pattern:i[s]}),r(i[s]);else r(i)}}))}}),n.addSupport(["java","javascript","php"],n)}(C),function(e){var n=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;(n=(e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:RegExp("@[\\w-](?:"+/[^;{\s"']|\s+(?!\s)/.source+"|"+n.source+")*?"+/(?:;|(?=\s*\{))/.source),inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+n.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+n.source+"$"),alias:"url"}}},selector:{pattern:RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|"+n.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:n,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css,e.languages.markup))&&(n.tag.addInlined("style","css"),n.tag.addAttribute("style","css"))}(C),function(e){var n=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,t=(n=(e.languages.css.selector={pattern:e.languages.css.selector.pattern,lookbehind:!0,inside:n={"pseudo-element":/:(?:after|before|first-letter|first-line|selection)|::[-\w]+/,"pseudo-class":/:[-\w]+/,class:/\.[-\w]+/,id:/#[-\w]+/,attribute:{pattern:RegExp("\\[(?:[^[\\]\"']|"+n.source+")*\\]"),greedy:!0,inside:{punctuation:/^\[|\]$/,"case-sensitivity":{pattern:/(\s)[si]$/i,lookbehind:!0,alias:"keyword"},namespace:{pattern:/^(\s*)(?:(?!\s)[-*\w\xA0-\uFFFF])*\|(?!=)/,lookbehind:!0,inside:{punctuation:/\|$/}},"attr-name":{pattern:/^(\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+/,lookbehind:!0},"attr-value":[n,{pattern:/(=\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+(?=\s*$)/,lookbehind:!0}],operator:/[|~*^$]?=/}},"n-th":[{pattern:/(\(\s*)[+-]?\d*[\dn](?:\s*[+-]\s*\d+)?(?=\s*\))/,lookbehind:!0,inside:{number:/[\dn]+/,operator:/[+-]/}},{pattern:/(\(\s*)(?:even|odd)(?=\s*\))/i,lookbehind:!0}],combinator:/>|\+|~|\|\|/,punctuation:/[(),]/}},e.languages.css.atrule.inside["selector-function-argument"].inside=n,e.languages.insertBefore("css","property",{variable:{pattern:/(^|[^-\w\xA0-\uFFFF])--(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*/i,lookbehind:!0}}),{pattern:/(\b\d+)(?:%|[a-z]+(?![\w-]))/,lookbehind:!0}),{pattern:/(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,lookbehind:!0});e.languages.insertBefore("css","function",{operator:{pattern:/(\s)[+\-*\/](?=\s)/,lookbehind:!0},hexcode:{pattern:/\B#[\da-f]{3,8}\b/i,alias:"color"},color:[{pattern:/(^|[^\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|RebeccaPurple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\w-])/i,lookbehind:!0},{pattern:/\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,inside:{unit:n,number:t,function:/[\w-]+(?=\()/,punctuation:/[(),]/}}],entity:/\\[\da-f]{1,8}/i,unit:n,number:t})}(C),function(e){var n=/[*&][^\s[\]{},]+/,t=/!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/,r="(?:"+t.source+"(?:[ \t]+"+n.source+")?|"+n.source+"(?:[ \t]+"+t.source+")?)",a=/(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g,(function(){return/[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source})),o=/"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;function i(e,n){n=(n||"").replace(/m/g,"")+"m";var t=/([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g,(function(){return r})).replace(/<<value>>/g,(function(){return e}));return RegExp(t,n)}e.languages.yaml={scalar:{pattern:RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g,(function(){return r}))),lookbehind:!0,alias:"string"},comment:/#.*/,key:{pattern:RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g,(function(){return r})).replace(/<<key>>/g,(function(){return"(?:"+a+"|"+o+")"}))),lookbehind:!0,greedy:!0,alias:"atrule"},directive:{pattern:/(^[ \t]*)%.+/m,lookbehind:!0,alias:"important"},datetime:{pattern:i(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),lookbehind:!0,alias:"number"},boolean:{pattern:i(/false|true/.source,"i"),lookbehind:!0,alias:"important"},null:{pattern:i(/null|~/.source,"i"),lookbehind:!0,alias:"important"},string:{pattern:i(o),lookbehind:!0,greedy:!0},number:{pattern:i(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source,"i"),lookbehind:!0},tag:t,important:n,punctuation:/---|[:[\]{}\-,|>?]|\.\.\./},e.languages.yml=e.languages.yaml}(C),function(e){var n=/(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;function t(e){return e=e.replace(/<inner>/g,(function(){return n})),RegExp(/((?:^|[^\\])(?:\\{2})*)/.source+"(?:"+e+")")}var r=/(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source,a=/\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g,(function(){return r})),o=/\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source,i=(e.languages.markdown=e.languages.extend("markup",{}),e.languages.insertBefore("markdown","prolog",{"front-matter-block":{pattern:/(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,lookbehind:!0,greedy:!0,inside:{punctuation:/^---|---$/,"front-matter":{pattern:/\S+(?:\s+\S+)*/,alias:["yaml","language-yaml"],inside:e.languages.yaml}}},blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},table:{pattern:RegExp("^"+a+o+"(?:"+a+")*","m"),inside:{"table-data-rows":{pattern:RegExp("^("+a+o+")(?:"+a+")*$"),lookbehind:!0,inside:{"table-data":{pattern:RegExp(r),inside:e.languages.markdown},punctuation:/\|/}},"table-line":{pattern:RegExp("^("+a+")"+o+"$"),lookbehind:!0,inside:{punctuation:/\||:?-{3,}:?/}},"table-header-row":{pattern:RegExp("^"+a+"$"),inside:{"table-header":{pattern:RegExp(r),alias:"important",inside:e.languages.markdown},punctuation:/\|/}}}},code:[{pattern:/((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,lookbehind:!0,alias:"keyword"},{pattern:/^```[\s\S]*?^```$/m,greedy:!0,inside:{"code-block":{pattern:/^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,lookbehind:!0},"code-language":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:t(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\s\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\*\*|__/}},italic:{pattern:t(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\s\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:t(/(~~?)(?:(?!~)<inner>)+\2/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\s\S]+(?=\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},"code-snippet":{pattern:/(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,lookbehind:!0,greedy:!0,alias:["code","keyword"]},url:{pattern:t(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),lookbehind:!0,greedy:!0,inside:{operator:/^!/,content:{pattern:/(^\[)[^\]]+(?=\])/,lookbehind:!0,inside:{}},variable:{pattern:/(^\][ \t]?\[)[^\]]+(?=\]$)/,lookbehind:!0},url:{pattern:/(^\]\()[^\s)]+/,lookbehind:!0},string:{pattern:/(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,lookbehind:!0}}}}),["url","bold","italic","strike"].forEach((function(n){["url","bold","italic","strike","code-snippet"].forEach((function(t){n!==t&&(e.languages.markdown[n].inside.content.inside[t]=e.languages.markdown[t])}))})),e.hooks.add("after-tokenize",(function(e){"markdown"!==e.language&&"md"!==e.language||function e(n){if(n&&"string"!=typeof n)for(var t=0,r=n.length;t<r;t++){var a,o=n[t];"code"!==o.type?e(o.content):(a=o.content[1],o=o.content[3],a&&o&&"code-language"===a.type&&"code-block"===o.type&&"string"==typeof a.content&&(a=a.content.replace(/\b#/g,"sharp").replace(/\b\+\+/g,"pp"),a="language-"+(a=(/[a-z][\w-]*/i.exec(a)||[""])[0].toLowerCase()),o.alias?"string"==typeof o.alias?o.alias=[o.alias,a]:o.alias.push(a):o.alias=[a]))}}(e.tokens)})),e.hooks.add("wrap",(function(n){if("code-block"===n.type){for(var t="",r=0,a=n.classes.length;r<a;r++){var o=n.classes[r];if(o=/language-(.+)/.exec(o)){t=o[1];break}}var c,d=e.languages[t];d?n.content=e.highlight(n.content.replace(i,"").replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi,(function(e,n){var t;return"#"===(n=n.toLowerCase())[0]?(t="x"===n[1]?parseInt(n.slice(2),16):Number(n.slice(1)),l(t)):s[n]||e})),d,t):t&&"none"!==t&&e.plugins.autoloader&&(c="md-"+(new Date).valueOf()+"-"+Math.floor(1e16*Math.random()),n.attributes.id=c,e.plugins.autoloader.loadLanguages(t,(function(){var n=document.getElementById(c);n&&(n.innerHTML=e.highlight(n.textContent,e.languages[t],t))})))}})),RegExp(e.languages.markup.tag.pattern.source,"gi")),s={amp:"&",lt:"<",gt:">",quot:'"'},l=String.fromCodePoint||String.fromCharCode;e.languages.md=e.languages.markdown}(C),C.languages.graphql={comment:/#.*/,description:{pattern:/(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,greedy:!0,alias:"string",inside:{"language-markdown":{pattern:/(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,lookbehind:!0,inside:C.languages.markdown}}},string:{pattern:/"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,greedy:!0},number:/(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,boolean:/\b(?:false|true)\b/,variable:/\$[a-z_]\w*/i,directive:{pattern:/@[a-z_]\w*/i,alias:"function"},"attr-name":{pattern:/\b[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,greedy:!0},"atom-input":{pattern:/\b[A-Z]\w*Input\b/,alias:"class-name"},scalar:/\b(?:Boolean|Float|ID|Int|String)\b/,constant:/\b[A-Z][A-Z_\d]*\b/,"class-name":{pattern:/(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,lookbehind:!0},fragment:{pattern:/(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},"definition-mutation":{pattern:/(\bmutation\s+)[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},"definition-query":{pattern:/(\bquery\s+)[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},keyword:/\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,operator:/[!=|&]|\.{3}/,"property-query":/\w+(?=\s*\()/,object:/\w+(?=\s*\{)/,punctuation:/[!(){}\[\]:=,]/,property:/\w+/},C.hooks.add("after-tokenize",(function(e){if("graphql"===e.language)for(var n=e.tokens.filter((function(e){return"string"!=typeof e&&"comment"!==e.type&&"scalar"!==e.type})),t=0;t<n.length;){var r=n[t++];if("keyword"===r.type&&"mutation"===r.content){var a=[];if(u(["definition-mutation","punctuation"])&&"("===d(1).content){t+=2;var o=p(/^\($/,/^\)$/);if(-1===o)continue;for(;t<o;t++){var i=d(0);"variable"===i.type&&(m(i,"variable-input"),a.push(i.content))}t=o+1}if(u(["punctuation","property-query"])&&"{"===d(0).content&&(t++,m(d(0),"property-mutation"),0<a.length)){var s=p(/^\{$/,/^\}$/);if(-1!==s)for(var l=t;l<s;l++){var c=n[l];"variable"===c.type&&0<=a.indexOf(c.content)&&m(c,"variable-input")}}}}function d(e){return n[t+e]}function u(e,n){n=n||0;for(var t=0;t<e.length;t++){var r=d(t+n);if(!r||r.type!==e[t])return}return 1}function p(e,r){for(var a=1,o=t;o<n.length;o++){var i=n[o],s=i.content;if("punctuation"===i.type&&"string"==typeof s)if(e.test(s))a++;else if(r.test(s)&&0==--a)return o}return-1}function m(e,n){var t=e.alias;t?Array.isArray(t)||(e.alias=t=[t]):e.alias=t=[],t.push(n)}})),C.languages.sql={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,lookbehind:!0},variable:[{pattern:/@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,greedy:!0},/@[\w.$]+/],string:{pattern:/(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,greedy:!0,lookbehind:!0},identifier:{pattern:/(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,greedy:!0,lookbehind:!0,inside:{punctuation:/^`|`$/}},function:/\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,keyword:/\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,boolean:/\b(?:FALSE|NULL|TRUE)\b/i,number:/\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,operator:/[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,punctuation:/[;[\]()`,.]/},function(e){var n=e.languages.javascript["template-string"],t=n.pattern.source,r=n.inside.interpolation,a=r.inside["interpolation-punctuation"],o=r.pattern.source;function i(n,r){if(e.languages[n])return{pattern:RegExp("((?:"+r+")\\s*)"+t),lookbehind:!0,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},"embedded-code":{pattern:/[\s\S]+/,alias:n}}}}function s(n,t,r){return n={code:n,grammar:t,language:r},e.hooks.run("before-tokenize",n),n.tokens=e.tokenize(n.code,n.grammar),e.hooks.run("after-tokenize",n),n.tokens}function l(n,t,i){var l=e.tokenize(n,{interpolation:{pattern:RegExp(o),lookbehind:!0}}),c=0,d={},u=(l=s(l.map((function(e){if("string"==typeof e)return e;var t,r;for(e=e.content;-1!==n.indexOf((r=c++,t="___"+i.toUpperCase()+"_"+r+"___")););return d[t]=e,t})).join(""),t,i),Object.keys(d));return c=0,function n(t){for(var o=0;o<t.length;o++){if(c>=u.length)return;var i,l,p,m,f,h,y,g=t[o];"string"==typeof g||"string"==typeof g.content?(i=u[c],-1!==(y=(h="string"==typeof g?g:g.content).indexOf(i))&&(++c,l=h.substring(0,y),f=d[i],p=void 0,(m={})["interpolation-punctuation"]=a,3===(m=e.tokenize(f,m)).length&&((p=[1,1]).push.apply(p,s(m[1],e.languages.javascript,"javascript")),m.splice.apply(m,p)),p=new e.Token("interpolation",m,r.alias,f),m=h.substring(y+i.length),f=[],l&&f.push(l),f.push(p),m&&(n(h=[m]),f.push.apply(f,h)),"string"==typeof g?(t.splice.apply(t,[o,1].concat(f)),o+=f.length-1):g.content=f)):(y=g.content,Array.isArray(y)?n(y):n([y]))}}(l),new e.Token(i,l,"language-"+i,n)}e.languages.javascript["template-string"]=[i("css",/\b(?:styled(?:\([^)]*\))?(?:\s*\.\s*\w+(?:\([^)]*\))*)*|css(?:\s*\.\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),i("html",/\bhtml|\.\s*(?:inner|outer)HTML\s*\+?=/.source),i("svg",/\bsvg/.source),i("markdown",/\b(?:markdown|md)/.source),i("graphql",/\b(?:gql|graphql(?:\s*\.\s*experimental)?)/.source),i("sql",/\bsql/.source),n].filter(Boolean);var c={javascript:!0,js:!0,typescript:!0,ts:!0,jsx:!0,tsx:!0};function d(e){return"string"==typeof e?e:Array.isArray(e)?e.map(d).join(""):d(e.content)}e.hooks.add("after-tokenize",(function(n){n.language in c&&function n(t){for(var r=0,a=t.length;r<a;r++){var o,i,s,c=t[r];"string"!=typeof c&&(o=c.content,Array.isArray(o)?"template-string"===c.type?(c=o[1],3===o.length&&"string"!=typeof c&&"embedded-code"===c.type&&(i=d(c),c=c.alias,c=Array.isArray(c)?c[0]:c,s=e.languages[c])&&(o[1]=l(i,s,c))):n(o):"string"!=typeof o&&n([o]))}}(n.tokens)}))}(C),function(e){e.languages.typescript=e.languages.extend("javascript",{"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},builtin:/\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/}),e.languages.typescript.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/,/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,/\btype\b(?=\s*(?:[\{*]|$))/),delete e.languages.typescript.parameter,delete e.languages.typescript["literal-property"];var n=e.languages.extend("typescript",{});delete n["class-name"],e.languages.typescript["class-name"].inside=n,e.languages.insertBefore("typescript","function",{decorator:{pattern:/@[$\w\xA0-\uFFFF]+/,inside:{at:{pattern:/^@/,alias:"operator"},function:/^[\s\S]+/}},"generic-function":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,greedy:!0,inside:{function:/^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:n}}}}),e.languages.ts=e.languages.typescript}(C),function(e){var n=e.languages.javascript,t=/\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})+\}/.source,r="(@(?:arg|argument|param|property)\\s+(?:"+t+"\\s+)?)";e.languages.jsdoc=e.languages.extend("javadoclike",{parameter:{pattern:RegExp(r+/(?:(?!\s)[$\w\xA0-\uFFFF.])+(?=\s|$)/.source),lookbehind:!0,inside:{punctuation:/\./}}}),e.languages.insertBefore("jsdoc","keyword",{"optional-parameter":{pattern:RegExp(r+/\[(?:(?!\s)[$\w\xA0-\uFFFF.])+(?:=[^[\]]+)?\](?=\s|$)/.source),lookbehind:!0,inside:{parameter:{pattern:/(^\[)[$\w\xA0-\uFFFF\.]+/,lookbehind:!0,inside:{punctuation:/\./}},code:{pattern:/(=)[\s\S]*(?=\]$)/,lookbehind:!0,inside:n,alias:"language-javascript"},punctuation:/[=[\]]/}},"class-name":[{pattern:RegExp(/(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\s+(?:<TYPE>\s+)?)[A-Z]\w*(?:\.[A-Z]\w*)*/.source.replace(/<TYPE>/g,(function(){return t}))),lookbehind:!0,inside:{punctuation:/\./}},{pattern:RegExp("(@[a-z]+\\s+)"+t),lookbehind:!0,inside:{string:n.string,number:n.number,boolean:n.boolean,keyword:e.languages.typescript.keyword,operator:/=>|\.\.\.|[&|?:*]/,punctuation:/[.,;=<>{}()[\]]/}}],example:{pattern:/(@example\s+(?!\s))(?:[^@\s]|\s+(?!\s))+?(?=\s*(?:\*\s*)?(?:@\w|\*\/))/,lookbehind:!0,inside:{code:{pattern:/^([\t ]*(?:\*\s*)?)\S.*$/m,lookbehind:!0,inside:n,alias:"language-javascript"}}}}),e.languages.javadoclike.addSupport("javascript",e.languages.jsdoc)}(C),function(e){e.languages.flow=e.languages.extend("javascript",{}),e.languages.insertBefore("flow","keyword",{type:[{pattern:/\b(?:[Bb]oolean|Function|[Nn]umber|[Ss]tring|[Ss]ymbol|any|mixed|null|void)\b/,alias:"class-name"}]}),e.languages.flow["function-variable"].pattern=/(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=\s*(?:function\b|(?:\([^()]*\)(?:\s*:\s*\w+)?|(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/i,delete e.languages.flow.parameter,e.languages.insertBefore("flow","operator",{"flow-punctuation":{pattern:/\{\||\|\}/,alias:"punctuation"}}),Array.isArray(e.languages.flow.keyword)||(e.languages.flow.keyword=[e.languages.flow.keyword]),e.languages.flow.keyword.unshift({pattern:/(^|[^$]\b)(?:Class|declare|opaque|type)\b(?!\$)/,lookbehind:!0},{pattern:/(^|[^$]\B)\$(?:Diff|Enum|Exact|Keys|ObjMap|PropertyType|Record|Shape|Subtype|Supertype|await)\b(?!\$)/,lookbehind:!0})}(C),C.languages.n4js=C.languages.extend("javascript",{keyword:/\b(?:Array|any|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\b/}),C.languages.insertBefore("n4js","constant",{annotation:{pattern:/@+\w+/,alias:"operator"}}),C.languages.n4jsd=C.languages.n4js,function(e){function n(e,n){return RegExp(e.replace(/<ID>/g,(function(){return/(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/.source})),n)}e.languages.insertBefore("javascript","function-variable",{"method-variable":{pattern:RegExp("(\\.\\s*)"+e.languages.javascript["function-variable"].pattern.source),lookbehind:!0,alias:["function-variable","method","function","property-access"]}}),e.languages.insertBefore("javascript","function",{method:{pattern:RegExp("(\\.\\s*)"+e.languages.javascript.function.source),lookbehind:!0,alias:["function","property-access"]}}),e.languages.insertBefore("javascript","constant",{"known-class-name":[{pattern:/\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\b/,alias:"class-name"},{pattern:/\b(?:[A-Z]\w*)Error\b/,alias:"class-name"}]}),e.languages.insertBefore("javascript","keyword",{imports:{pattern:n(/(\bimport\b\s*)(?:<ID>(?:\s*,\s*(?:\*\s*as\s+<ID>|\{[^{}]*\}))?|\*\s*as\s+<ID>|\{[^{}]*\})(?=\s*\bfrom\b)/.source),lookbehind:!0,inside:e.languages.javascript},exports:{pattern:n(/(\bexport\b\s*)(?:\*(?:\s*as\s+<ID>)?(?=\s*\bfrom\b)|\{[^{}]*\})/.source),lookbehind:!0,inside:e.languages.javascript}}),e.languages.javascript.keyword.unshift({pattern:/\b(?:as|default|export|from|import)\b/,alias:"module"},{pattern:/\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\b/,alias:"control-flow"},{pattern:/\bnull\b/,alias:["null","nil"]},{pattern:/\bundefined\b/,alias:"nil"}),e.languages.insertBefore("javascript","operator",{spread:{pattern:/\.{3}/,alias:"operator"},arrow:{pattern:/=>/,alias:"operator"}}),e.languages.insertBefore("javascript","punctuation",{"property-access":{pattern:n(/(\.\s*)#?<ID>/.source),lookbehind:!0},"maybe-class-name":{pattern:/(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,lookbehind:!0},dom:{pattern:/\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\b/,alias:"variable"},console:{pattern:/\bconsole(?=\s*\.)/,alias:"class-name"}});for(var t=["function","function-variable","method","method-variable","property-access"],r=0;r<t.length;r++){var a=t[r],o=e.languages.javascript[a];a=(o="RegExp"===e.util.type(o)?e.languages.javascript[a]={pattern:o}:o).inside||{};(o.inside=a)["maybe-class-name"]=/^[A-Z][\s\S]*/}}(C),function(e){var n=e.util.clone(e.languages.javascript),t=/(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source,r=/(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source,a=/(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;function o(e,n){return e=e.replace(/<S>/g,(function(){return t})).replace(/<BRACES>/g,(function(){return r})).replace(/<SPREAD>/g,(function(){return a})),RegExp(e,n)}function i(n){for(var t=[],r=0;r<n.length;r++){var a=n[r],o=!1;"string"!=typeof a&&("tag"===a.type&&a.content[0]&&"tag"===a.content[0].type?"</"===a.content[0].content[0].content?0<t.length&&t[t.length-1].tagName===s(a.content[0].content[1])&&t.pop():"/>"!==a.content[a.content.length-1].content&&t.push({tagName:s(a.content[0].content[1]),openedBraces:0}):0<t.length&&"punctuation"===a.type&&"{"===a.content?t[t.length-1].openedBraces++:0<t.length&&0<t[t.length-1].openedBraces&&"punctuation"===a.type&&"}"===a.content?t[t.length-1].openedBraces--:o=!0),(o||"string"==typeof a)&&0<t.length&&0===t[t.length-1].openedBraces&&(o=s(a),r<n.length-1&&("string"==typeof n[r+1]||"plain-text"===n[r+1].type)&&(o+=s(n[r+1]),n.splice(r+1,1)),0<r&&("string"==typeof n[r-1]||"plain-text"===n[r-1].type)&&(o=s(n[r-1])+o,n.splice(r-1,1),r--),n[r]=new e.Token("plain-text",o,null,o)),a.content&&"string"!=typeof a.content&&i(a.content)}}a=o(a).source,e.languages.jsx=e.languages.extend("markup",n),e.languages.jsx.tag.pattern=o(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source),e.languages.jsx.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/,e.languages.jsx.tag.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/,e.languages.jsx.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,e.languages.jsx.tag.inside.comment=n.comment,e.languages.insertBefore("inside","attr-name",{spread:{pattern:o(/<SPREAD>/.source),inside:e.languages.jsx}},e.languages.jsx.tag),e.languages.insertBefore("inside","special-attr",{script:{pattern:o(/=<BRACES>/.source),alias:"language-javascript",inside:{"script-punctuation":{pattern:/^=(?=\{)/,alias:"punctuation"},rest:e.languages.jsx}}},e.languages.jsx.tag);var s=function(e){return e?"string"==typeof e?e:"string"==typeof e.content?e.content:e.content.map(s).join(""):""};e.hooks.add("after-tokenize",(function(e){"jsx"!==e.language&&"tsx"!==e.language||i(e.tokens)}))}(C),function(e){var n=e.util.clone(e.languages.typescript);(n=(e.languages.tsx=e.languages.extend("jsx",n),delete e.languages.tsx.parameter,delete e.languages.tsx["literal-property"],e.languages.tsx.tag)).pattern=RegExp(/(^|[^\w$]|(?=<\/))/.source+"(?:"+n.pattern.source+")",n.pattern.flags),n.lookbehind=!0}(C),C.languages.swift={comment:{pattern:/(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,lookbehind:!0,greedy:!0},"string-literal":[{pattern:RegExp(/(^|[^"#])/.source+"(?:"+/"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/.source+"|"+/"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/.source+")"+/(?!["#])/.source),lookbehind:!0,greedy:!0,inside:{interpolation:{pattern:/(\\\()(?:[^()]|\([^()]*\))*(?=\))/,lookbehind:!0,inside:null},"interpolation-punctuation":{pattern:/^\)|\\\($/,alias:"punctuation"},punctuation:/\\(?=[\r\n])/,string:/[\s\S]+/}},{pattern:RegExp(/(^|[^"#])(#+)/.source+"(?:"+/"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/.source+"|"+/"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source+")\\2"),lookbehind:!0,greedy:!0,inside:{interpolation:{pattern:/(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,lookbehind:!0,inside:null},"interpolation-punctuation":{pattern:/^\)|\\#+\($/,alias:"punctuation"},string:/[\s\S]+/}}],directive:{pattern:RegExp(/#/.source+"(?:"+/(?:elseif|if)\b/.source+"(?:[ \t]*"+/(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/.source+")+|"+/(?:else|endif)\b/.source+")"),alias:"property",inside:{"directive-name":/^#\w+/,boolean:/\b(?:false|true)\b/,number:/\b\d+(?:\.\d+)*\b/,operator:/!|&&|\|\||[<>]=?/,punctuation:/[(),]/}},literal:{pattern:/#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,alias:"constant"},"other-directive":{pattern:/#\w+\b/,alias:"property"},attribute:{pattern:/@\w+/,alias:"atrule"},"function-definition":{pattern:/(\bfunc\s+)\w+/,lookbehind:!0,alias:"function"},label:{pattern:/\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,lookbehind:!0,alias:"important"},keyword:/\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,boolean:/\b(?:false|true)\b/,nil:{pattern:/\bnil\b/,alias:"constant"},"short-argument":/\$\d+\b/,omit:{pattern:/\b_\b/,alias:"keyword"},number:/\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,"class-name":/\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,function:/\b[a-z_]\w*(?=\s*\()/i,constant:/\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,operator:/[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,punctuation:/[{}[\]();,.:\\]/},C.languages.swift["string-literal"].forEach((function(e){e.inside.interpolation.inside=C.languages.swift})),function(e){e.languages.kotlin=e.languages.extend("clike",{keyword:{pattern:/(^|[^.])\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\b/,lookbehind:!0},function:[{pattern:/(?:`[^\r\n`]+`|\b\w+)(?=\s*\()/,greedy:!0},{pattern:/(\.)(?:`[^\r\n`]+`|\w+)(?=\s*\{)/,lookbehind:!0,greedy:!0}],number:/\b(?:0[xX][\da-fA-F]+(?:_[\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?[fFL]?)\b/,operator:/\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\/*%<>]=?|[?:]:?|\.\.|&&|\|\||\b(?:and|inv|or|shl|shr|ushr|xor)\b/}),delete e.languages.kotlin["class-name"];var n={"interpolation-punctuation":{pattern:/^\$\{?|\}$/,alias:"punctuation"},expression:{pattern:/[\s\S]+/,inside:e.languages.kotlin}};e.languages.insertBefore("kotlin","string",{"string-literal":[{pattern:/"""(?:[^$]|\$(?:(?!\{)|\{[^{}]*\}))*?"""/,alias:"multiline",inside:{interpolation:{pattern:/\$(?:[a-z_]\w*|\{[^{}]*\})/i,inside:n},string:/[\s\S]+/}},{pattern:/"(?:[^"\\\r\n$]|\\.|\$(?:(?!\{)|\{[^{}]*\}))*"/,alias:"singleline",inside:{interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$(?:[a-z_]\w*|\{[^{}]*\})/i,lookbehind:!0,inside:n},string:/[\s\S]+/}}],char:{pattern:/'(?:[^'\\\r\n]|\\(?:.|u[a-fA-F0-9]{0,4}))'/,greedy:!0}}),delete e.languages.kotlin.string,e.languages.insertBefore("kotlin","keyword",{annotation:{pattern:/\B@(?:\w+:)?(?:[A-Z]\w*|\[[^\]]+\])/,alias:"builtin"}}),e.languages.insertBefore("kotlin","function",{label:{pattern:/\b\w+@|@\w+\b/,alias:"symbol"}}),e.languages.kt=e.languages.kotlin,e.languages.kts=e.languages.kotlin}(C),C.languages.c=C.languages.extend("clike",{comment:{pattern:/\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,greedy:!0},"class-name":{pattern:/(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,lookbehind:!0},keyword:/\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,function:/\b[a-z_]\w*(?=\s*\()/i,number:/(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,operator:/>>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/}),C.languages.insertBefore("c","string",{char:{pattern:/'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,greedy:!0}}),C.languages.insertBefore("c","string",{macro:{pattern:/(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,lookbehind:!0,greedy:!0,alias:"property",inside:{string:[{pattern:/^(#\s*include\s*)<[^>]+>/,lookbehind:!0},C.languages.c.string],char:C.languages.c.char,comment:C.languages.c.comment,"macro-name":[{pattern:/(^#\s*define\s+)\w+\b(?!\()/i,lookbehind:!0},{pattern:/(^#\s*define\s+)\w+\b(?=\()/i,lookbehind:!0,alias:"function"}],directive:{pattern:/^(#\s*)[a-z]+/,lookbehind:!0,alias:"keyword"},"directive-hash":/^#/,punctuation:/##|\\(?=[\r\n])/,expression:{pattern:/\S[\s\S]*/,inside:C.languages.c}}}}),C.languages.insertBefore("c","function",{constant:/\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/}),delete C.languages.c.boolean,C.languages.objectivec=C.languages.extend("c",{string:{pattern:/@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,greedy:!0},keyword:/\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,operator:/-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/}),delete C.languages.objectivec["class-name"],C.languages.objc=C.languages.objectivec,C.languages.reason=C.languages.extend("clike",{string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,greedy:!0},"class-name":/\b[A-Z]\w*/,keyword:/\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\b/,operator:/\.{3}|:[:=]|\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:asr|land|lor|lsl|lsr|lxor|mod)\b/}),C.languages.insertBefore("reason","class-name",{char:{pattern:/'(?:\\x[\da-f]{2}|\\o[0-3][0-7][0-7]|\\\d{3}|\\.|[^'\\\r\n])'/,greedy:!0},constructor:/\b[A-Z]\w*\b(?!\s*\.)/,label:{pattern:/\b[a-z]\w*(?=::)/,alias:"symbol"}}),delete C.languages.reason.function,function(e){for(var n=/\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|<self>)*\*\//.source,t=0;t<2;t++)n=n.replace(/<self>/g,(function(){return n}));n=n.replace(/<self>/g,(function(){return/[^\s\S]/.source})),e.languages.rust={comment:[{pattern:RegExp(/(^|[^\\])/.source+n),lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/b?"(?:\\[\s\S]|[^\\"])*"|b?r(#*)"(?:[^"]|"(?!\1))*"\1/,greedy:!0},char:{pattern:/b?'(?:\\(?:x[0-7][\da-fA-F]|u\{(?:[\da-fA-F]_*){1,6}\}|.)|[^\\\r\n\t'])'/,greedy:!0},attribute:{pattern:/#!?\[(?:[^\[\]"]|"(?:\\[\s\S]|[^\\"])*")*\]/,greedy:!0,alias:"attr-name",inside:{string:null}},"closure-params":{pattern:/([=(,:]\s*|\bmove\s*)\|[^|]*\||\|[^|]*\|(?=\s*(?:\{|->))/,lookbehind:!0,greedy:!0,inside:{"closure-punctuation":{pattern:/^\||\|$/,alias:"punctuation"},rest:null}},"lifetime-annotation":{pattern:/'\w+/,alias:"symbol"},"fragment-specifier":{pattern:/(\$\w+:)[a-z]+/,lookbehind:!0,alias:"punctuation"},variable:/\$\w+/,"function-definition":{pattern:/(\bfn\s+)\w+/,lookbehind:!0,alias:"function"},"type-definition":{pattern:/(\b(?:enum|struct|trait|type|union)\s+)\w+/,lookbehind:!0,alias:"class-name"},"module-declaration":[{pattern:/(\b(?:crate|mod)\s+)[a-z][a-z_\d]*/,lookbehind:!0,alias:"namespace"},{pattern:/(\b(?:crate|self|super)\s*)::\s*[a-z][a-z_\d]*\b(?:\s*::(?:\s*[a-z][a-z_\d]*\s*::)*)?/,lookbehind:!0,alias:"namespace",inside:{punctuation:/::/}}],keyword:[/\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/,/\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\b/],function:/\b[a-z_]\w*(?=\s*(?:::\s*<|\())/,macro:{pattern:/\b\w+!/,alias:"property"},constant:/\b[A-Z_][A-Z_\d]+\b/,"class-name":/\b[A-Z]\w*\b/,namespace:{pattern:/(?:\b[a-z][a-z_\d]*\s*::\s*)*\b[a-z][a-z_\d]*\s*::(?!\s*<)/,inside:{punctuation:/::/}},number:/\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\b/,boolean:/\b(?:false|true)\b/,punctuation:/->|\.\.=|\.{1,3}|::|[{}[\];(),:]/,operator:/[-+*\/%!^]=?|=[=>]?|&[&=]?|\|[|=]?|<<?=?|>>?=?|[@?]/},e.languages.rust["closure-params"].inside.rest=e.languages.rust,e.languages.rust.attribute.inside.string=e.languages.rust.string}(C),C.languages.go=C.languages.extend("clike",{string:{pattern:/(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,lookbehind:!0,greedy:!0},keyword:/\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,boolean:/\b(?:_|false|iota|nil|true)\b/,number:[/\b0(?:b[01_]+|o[0-7_]+)i?\b/i,/\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,/(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i],operator:/[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,builtin:/\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/}),C.languages.insertBefore("go","string",{char:{pattern:/'(?:\\.|[^'\\\r\n]){0,10}'/,greedy:!0}}),delete C.languages.go["class-name"],function(e){var n=/\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/,t=/\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g,(function(){return n.source}));e.languages.cpp=e.languages.extend("c",{"class-name":[{pattern:RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g,(function(){return n.source}))),lookbehind:!0},/\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,/\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,/\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/],keyword:n,number:{pattern:/(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,greedy:!0},operator:/>>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,boolean:/\b(?:false|true)\b/}),e.languages.insertBefore("cpp","string",{module:{pattern:RegExp(/(\b(?:import|module)\s+)/.source+"(?:"+/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source+"|"+/<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g,(function(){return t}))+")"),lookbehind:!0,greedy:!0,inside:{string:/^[<"][\s\S]+/,operator:/:/,punctuation:/\./}},"raw-string":{pattern:/R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,alias:"string",greedy:!0}}),e.languages.insertBefore("cpp","keyword",{"generic-function":{pattern:/\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,inside:{function:/^\w+/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:e.languages.cpp}}}}),e.languages.insertBefore("cpp","operator",{"double-colon":{pattern:/::/,alias:"punctuation"}}),e.languages.insertBefore("cpp","class-name",{"base-clause":{pattern:/(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,lookbehind:!0,greedy:!0,inside:e.languages.extend("cpp",{})}}),e.languages.insertBefore("inside","double-colon",{"class-name":/\b[a-z_]\w*\b(?!\s*::)/i},e.languages.cpp["base-clause"])}(C),C.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0,greedy:!0},"string-interpolation":{pattern:/(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,lookbehind:!0,inside:{"format-spec":{pattern:/(:)[^:(){}]+(?=\}$)/,lookbehind:!0},"conversion-option":{pattern:/![sra](?=[:}]$)/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}},"triple-quoted-string":{pattern:/(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,greedy:!0,alias:"string"},string:{pattern:/(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},decorator:{pattern:/(^[\t ]*)@\w+(?:\.\w+)*/m,lookbehind:!0,alias:["annotation","punctuation"],inside:{punctuation:/\./}},keyword:/\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:False|None|True)\b/,number:/\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,operator:/[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\];(),.:]/},C.languages.python["string-interpolation"].inside.interpolation.inside.rest=C.languages.python,C.languages.py=C.languages.python;((e,n)=>{for(var t in n)m(e,t,{get:n[t],enumerable:!0})})({},{dracula:()=>P,duotoneDark:()=>_,duotoneLight:()=>T,github:()=>O,jettwaveDark:()=>V,jettwaveLight:()=>H,nightOwl:()=>A,nightOwlLight:()=>R,oceanicNext:()=>L,okaidia:()=>D,oneDark:()=>W,oneLight:()=>Z,palenight:()=>M,shadesOfPurple:()=>z,synthwave84:()=>q,ultramin:()=>F,vsDark:()=>U,vsLight:()=>B});var P={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]},_={plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]},T={plain:{backgroundColor:"#faf8f5",color:"#728fcb"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#b6ad9a"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#063289"}},{types:["property","function"],style:{color:"#b29762"}},{types:["tag-id","selector","atrule-id"],style:{color:"#2d2006"}},{types:["attr-name"],style:{color:"#896724"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","atrule"],style:{color:"#728fcb"}},{types:["placeholder","variable"],style:{color:"#93abdc"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#896724"}}]},O={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]},A={plain:{color:"#d6deeb",backgroundColor:"#011627"},styles:[{types:["changed"],style:{color:"rgb(162, 191, 252)",fontStyle:"italic"}},{types:["deleted"],style:{color:"rgba(239, 83, 80, 0.56)",fontStyle:"italic"}},{types:["inserted","attr-name"],style:{color:"rgb(173, 219, 103)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(99, 119, 119)",fontStyle:"italic"}},{types:["string","url"],style:{color:"rgb(173, 219, 103)"}},{types:["variable"],style:{color:"rgb(214, 222, 235)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation"],style:{color:"rgb(199, 146, 234)"}},{types:["selector","doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["class-name"],style:{color:"rgb(255, 203, 139)"}},{types:["tag","operator","keyword"],style:{color:"rgb(127, 219, 202)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["property"],style:{color:"rgb(128, 203, 196)"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}}]},R={plain:{color:"#403f53",backgroundColor:"#FBFBFB"},styles:[{types:["changed"],style:{color:"rgb(162, 191, 252)",fontStyle:"italic"}},{types:["deleted"],style:{color:"rgba(239, 83, 80, 0.56)",fontStyle:"italic"}},{types:["inserted","attr-name"],style:{color:"rgb(72, 118, 214)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(152, 159, 177)",fontStyle:"italic"}},{types:["string","builtin","char","constant","url"],style:{color:"rgb(72, 118, 214)"}},{types:["variable"],style:{color:"rgb(201, 103, 101)"}},{types:["number"],style:{color:"rgb(170, 9, 130)"}},{types:["punctuation"],style:{color:"rgb(153, 76, 195)"}},{types:["function","selector","doctype"],style:{color:"rgb(153, 76, 195)",fontStyle:"italic"}},{types:["class-name"],style:{color:"rgb(17, 17, 17)"}},{types:["tag"],style:{color:"rgb(153, 76, 195)"}},{types:["operator","property","keyword","namespace"],style:{color:"rgb(12, 150, 155)"}},{types:["boolean"],style:{color:"rgb(188, 84, 84)"}}]},N="#c5a5c5",I="#8dc891",L={plain:{backgroundColor:"#282c34",color:"#ffffff"},styles:[{types:["attr-name"],style:{color:N}},{types:["attr-value"],style:{color:I}},{types:["comment","block-comment","prolog","doctype","cdata","shebang"],style:{color:"#999999"}},{types:["property","number","function-name","constant","symbol","deleted"],style:{color:"#5a9bcf"}},{types:["boolean"],style:{color:"#ff8b50"}},{types:["tag"],style:{color:"#fc929e"}},{types:["string"],style:{color:I}},{types:["punctuation"],style:{color:I}},{types:["selector","char","builtin","inserted"],style:{color:"#D8DEE9"}},{types:["function"],style:{color:"#79b6f2"}},{types:["operator","entity","url","variable"],style:{color:"#d7deea"}},{types:["keyword"],style:{color:N}},{types:["atrule","class-name"],style:{color:"#FAC863"}},{types:["important"],style:{fontWeight:"400"}},{types:["bold"],style:{fontWeight:"bold"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}}]},D={plain:{color:"#f8f8f2",backgroundColor:"#272822"},styles:[{types:["changed"],style:{color:"rgb(162, 191, 252)",fontStyle:"italic"}},{types:["deleted"],style:{color:"#f92672",fontStyle:"italic"}},{types:["inserted"],style:{color:"rgb(173, 219, 103)",fontStyle:"italic"}},{types:["comment"],style:{color:"#8292a2",fontStyle:"italic"}},{types:["string","url"],style:{color:"#a6e22e"}},{types:["variable"],style:{color:"#f8f8f2"}},{types:["number"],style:{color:"#ae81ff"}},{types:["builtin","char","constant","function","class-name"],style:{color:"#e6db74"}},{types:["punctuation"],style:{color:"#f8f8f2"}},{types:["selector","doctype"],style:{color:"#a6e22e",fontStyle:"italic"}},{types:["tag","operator","keyword"],style:{color:"#66d9ef"}},{types:["boolean"],style:{color:"#ae81ff"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)",opacity:.7}},{types:["tag","property"],style:{color:"#f92672"}},{types:["attr-name"],style:{color:"#a6e22e !important"}},{types:["doctype"],style:{color:"#8292a2"}},{types:["rule"],style:{color:"#e6db74"}}]},M={plain:{color:"#bfc7d5",backgroundColor:"#292d3e"},styles:[{types:["comment"],style:{color:"rgb(105, 112, 152)",fontStyle:"italic"}},{types:["string","inserted"],style:{color:"rgb(195, 232, 141)"}},{types:["number"],style:{color:"rgb(247, 140, 108)"}},{types:["builtin","char","constant","function"],style:{color:"rgb(130, 170, 255)"}},{types:["punctuation","selector"],style:{color:"rgb(199, 146, 234)"}},{types:["variable"],style:{color:"rgb(191, 199, 213)"}},{types:["class-name","attr-name"],style:{color:"rgb(255, 203, 107)"}},{types:["tag","deleted"],style:{color:"rgb(255, 85, 114)"}},{types:["operator"],style:{color:"rgb(137, 221, 255)"}},{types:["boolean"],style:{color:"rgb(255, 88, 116)"}},{types:["keyword"],style:{fontStyle:"italic"}},{types:["doctype"],style:{color:"rgb(199, 146, 234)",fontStyle:"italic"}},{types:["namespace"],style:{color:"rgb(178, 204, 214)"}},{types:["url"],style:{color:"rgb(221, 221, 221)"}}]},z={plain:{color:"#9EFEFF",backgroundColor:"#2D2A55"},styles:[{types:["changed"],style:{color:"rgb(255, 238, 128)"}},{types:["deleted"],style:{color:"rgba(239, 83, 80, 0.56)"}},{types:["inserted"],style:{color:"rgb(173, 219, 103)"}},{types:["comment"],style:{color:"rgb(179, 98, 255)",fontStyle:"italic"}},{types:["punctuation"],style:{color:"rgb(255, 255, 255)"}},{types:["constant"],style:{color:"rgb(255, 98, 140)"}},{types:["string","url"],style:{color:"rgb(165, 255, 144)"}},{types:["variable"],style:{color:"rgb(255, 238, 128)"}},{types:["number","boolean"],style:{color:"rgb(255, 98, 140)"}},{types:["attr-name"],style:{color:"rgb(255, 180, 84)"}},{types:["keyword","operator","property","namespace","tag","selector","doctype"],style:{color:"rgb(255, 157, 0)"}},{types:["builtin","char","constant","function","class-name"],style:{color:"rgb(250, 208, 0)"}}]},q={plain:{backgroundColor:"linear-gradient(to bottom, #2a2139 75%, #34294f)",backgroundImage:"#34294f",color:"#f92aad",textShadow:"0 0 2px #100c0f, 0 0 5px #dc078e33, 0 0 10px #fff3"},styles:[{types:["comment","block-comment","prolog","doctype","cdata"],style:{color:"#495495",fontStyle:"italic"}},{types:["punctuation"],style:{color:"#ccc"}},{types:["tag","attr-name","namespace","number","unit","hexcode","deleted"],style:{color:"#e2777a"}},{types:["property","selector"],style:{color:"#72f1b8",textShadow:"0 0 2px #100c0f, 0 0 10px #257c5575, 0 0 35px #21272475"}},{types:["function-name"],style:{color:"#6196cc"}},{types:["boolean","selector-id","function"],style:{color:"#fdfdfd",textShadow:"0 0 2px #001716, 0 0 3px #03edf975, 0 0 5px #03edf975, 0 0 8px #03edf975"}},{types:["class-name","maybe-class-name","builtin"],style:{color:"#fff5f6",textShadow:"0 0 2px #000, 0 0 10px #fc1f2c75, 0 0 5px #fc1f2c75, 0 0 25px #fc1f2c75"}},{types:["constant","symbol"],style:{color:"#f92aad",textShadow:"0 0 2px #100c0f, 0 0 5px #dc078e33, 0 0 10px #fff3"}},{types:["important","atrule","keyword","selector-class"],style:{color:"#f4eee4",textShadow:"0 0 2px #393a33, 0 0 8px #f39f0575, 0 0 2px #f39f0575"}},{types:["string","char","attr-value","regex","variable"],style:{color:"#f87c32"}},{types:["parameter"],style:{fontStyle:"italic"}},{types:["entity","url"],style:{color:"#67cdcc"}},{types:["operator"],style:{color:"ffffffee"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["entity"],style:{cursor:"help"}},{types:["inserted"],style:{color:"green"}}]},F={plain:{color:"#282a2e",backgroundColor:"#ffffff"},styles:[{types:["comment"],style:{color:"rgb(197, 200, 198)"}},{types:["string","number","builtin","variable"],style:{color:"rgb(150, 152, 150)"}},{types:["class-name","function","tag","attr-name"],style:{color:"rgb(40, 42, 46)"}}]},U={plain:{color:"#9CDCFE",backgroundColor:"#1E1E1E"},styles:[{types:["prolog"],style:{color:"rgb(0, 0, 128)"}},{types:["comment"],style:{color:"rgb(106, 153, 85)"}},{types:["builtin","changed","keyword","interpolation-punctuation"],style:{color:"rgb(86, 156, 214)"}},{types:["number","inserted"],style:{color:"rgb(181, 206, 168)"}},{types:["constant"],style:{color:"rgb(100, 102, 149)"}},{types:["attr-name","variable"],style:{color:"rgb(156, 220, 254)"}},{types:["deleted","string","attr-value","template-punctuation"],style:{color:"rgb(206, 145, 120)"}},{types:["selector"],style:{color:"rgb(215, 186, 125)"}},{types:["tag"],style:{color:"rgb(78, 201, 176)"}},{types:["tag"],languages:["markup"],style:{color:"rgb(86, 156, 214)"}},{types:["punctuation","operator"],style:{color:"rgb(212, 212, 212)"}},{types:["punctuation"],languages:["markup"],style:{color:"#808080"}},{types:["function"],style:{color:"rgb(220, 220, 170)"}},{types:["class-name"],style:{color:"rgb(78, 201, 176)"}},{types:["char"],style:{color:"rgb(209, 105, 105)"}}]},B={plain:{color:"#000000",backgroundColor:"#ffffff"},styles:[{types:["comment"],style:{color:"rgb(0, 128, 0)"}},{types:["builtin"],style:{color:"rgb(0, 112, 193)"}},{types:["number","variable","inserted"],style:{color:"rgb(9, 134, 88)"}},{types:["operator"],style:{color:"rgb(0, 0, 0)"}},{types:["constant","char"],style:{color:"rgb(129, 31, 63)"}},{types:["tag"],style:{color:"rgb(128, 0, 0)"}},{types:["attr-name"],style:{color:"rgb(255, 0, 0)"}},{types:["deleted","string"],style:{color:"rgb(163, 21, 21)"}},{types:["changed","punctuation"],style:{color:"rgb(4, 81, 165)"}},{types:["function","keyword"],style:{color:"rgb(0, 0, 255)"}},{types:["class-name"],style:{color:"rgb(38, 127, 153)"}}]},V={plain:{color:"#f8fafc",backgroundColor:"#011627"},styles:[{types:["prolog"],style:{color:"#000080"}},{types:["comment"],style:{color:"#6A9955"}},{types:["builtin","changed","keyword","interpolation-punctuation"],style:{color:"#569CD6"}},{types:["number","inserted"],style:{color:"#B5CEA8"}},{types:["constant"],style:{color:"#f8fafc"}},{types:["attr-name","variable"],style:{color:"#9CDCFE"}},{types:["deleted","string","attr-value","template-punctuation"],style:{color:"#cbd5e1"}},{types:["selector"],style:{color:"#D7BA7D"}},{types:["tag"],style:{color:"#0ea5e9"}},{types:["tag"],languages:["markup"],style:{color:"#0ea5e9"}},{types:["punctuation","operator"],style:{color:"#D4D4D4"}},{types:["punctuation"],languages:["markup"],style:{color:"#808080"}},{types:["function"],style:{color:"#7dd3fc"}},{types:["class-name"],style:{color:"#0ea5e9"}},{types:["char"],style:{color:"#D16969"}}]},H={plain:{color:"#0f172a",backgroundColor:"#f1f5f9"},styles:[{types:["prolog"],style:{color:"#000080"}},{types:["comment"],style:{color:"#6A9955"}},{types:["builtin","changed","keyword","interpolation-punctuation"],style:{color:"#0c4a6e"}},{types:["number","inserted"],style:{color:"#B5CEA8"}},{types:["constant"],style:{color:"#0f172a"}},{types:["attr-name","variable"],style:{color:"#0c4a6e"}},{types:["deleted","string","attr-value","template-punctuation"],style:{color:"#64748b"}},{types:["selector"],style:{color:"#D7BA7D"}},{types:["tag"],style:{color:"#0ea5e9"}},{types:["tag"],languages:["markup"],style:{color:"#0ea5e9"}},{types:["punctuation","operator"],style:{color:"#475569"}},{types:["punctuation"],languages:["markup"],style:{color:"#808080"}},{types:["function"],style:{color:"#0e7490"}},{types:["class-name"],style:{color:"#0ea5e9"}},{types:["char"],style:{color:"#D16969"}}]},W={plain:{backgroundColor:"hsl(220, 13%, 18%)",color:"hsl(220, 14%, 71%)",textShadow:"0 1px rgba(0, 0, 0, 0.3)"},styles:[{types:["comment","prolog","cdata"],style:{color:"hsl(220, 10%, 40%)"}},{types:["doctype","punctuation","entity"],style:{color:"hsl(220, 14%, 71%)"}},{types:["attr-name","class-name","maybe-class-name","boolean","constant","number","atrule"],style:{color:"hsl(29, 54%, 61%)"}},{types:["keyword"],style:{color:"hsl(286, 60%, 67%)"}},{types:["property","tag","symbol","deleted","important"],style:{color:"hsl(355, 65%, 65%)"}},{types:["selector","string","char","builtin","inserted","regex","attr-value"],style:{color:"hsl(95, 38%, 62%)"}},{types:["variable","operator","function"],style:{color:"hsl(207, 82%, 66%)"}},{types:["url"],style:{color:"hsl(187, 47%, 55%)"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"hsl(220, 14%, 71%)"}}]},Z={plain:{backgroundColor:"hsl(230, 1%, 98%)",color:"hsl(230, 8%, 24%)"},styles:[{types:["comment","prolog","cdata"],style:{color:"hsl(230, 4%, 64%)"}},{types:["doctype","punctuation","entity"],style:{color:"hsl(230, 8%, 24%)"}},{types:["attr-name","class-name","boolean","constant","number","atrule"],style:{color:"hsl(35, 99%, 36%)"}},{types:["keyword"],style:{color:"hsl(301, 63%, 40%)"}},{types:["property","tag","symbol","deleted","important"],style:{color:"hsl(5, 74%, 59%)"}},{types:["selector","string","char","builtin","inserted","regex","attr-value","punctuation"],style:{color:"hsl(119, 34%, 47%)"}},{types:["variable","operator","function"],style:{color:"hsl(221, 87%, 60%)"}},{types:["url"],style:{color:"hsl(198, 99%, 37%)"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"hsl(230, 8%, 24%)"}}]},K=(e,n)=>{const{plain:t}=e,r=e.styles.reduce(((e,t)=>{const{languages:r,style:a}=t;return r&&!r.includes(n)||t.types.forEach((n=>{const t=S(S({},e[n]),a);e[n]=t})),e}),{});return r.root=t,r.plain=$(S({},t),{backgroundColor:void 0}),r},G=/\r\n|\r|\n/,Y=e=>{0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},J=(e,n)=>{const t=e.length;return t>0&&e[t-1]===n?e:e.concat(n)},Q=e=>{const n=[[]],t=[e],r=[0],a=[e.length];let o=0,i=0,s=[];const l=[s];for(;i>-1;){for(;(o=r[i]++)<a[i];){let e,c=n[i];const d=t[i][o];if("string"==typeof d?(c=i>0?c:["plain"],e=d):(c=J(c,d.type),d.alias&&(c=J(c,d.alias)),e=d.content),"string"!=typeof e){i++,n.push(c),t.push(e),r.push(0),a.push(e.length);continue}const u=e.split(G),p=u.length;s.push({types:c,content:u[0]});for(let n=1;n<p;n++)Y(s),l.push(s=[]),s.push({types:c,content:u[n]})}i--,n.pop(),t.pop(),r.pop(),a.pop()}return Y(s),l},X=({children:e,language:n,code:t,theme:r,prism:a})=>{const o=n.toLowerCase(),i=((e,n)=>{const[t,r]=(0,d.useState)(K(n,e)),a=(0,d.useRef)(),o=(0,d.useRef)();return(0,d.useEffect)((()=>{n===a.current&&e===o.current||(a.current=n,o.current=e,r(K(n,e)))}),[e,n]),t})(o,r),s=(e=>(0,d.useCallback)((n=>{var t=n,{className:r,style:a,line:o}=t,i=j(t,["className","style","line"]);const s=$(S({},i),{className:(0,u.Z)("token-line",r)});return"object"==typeof e&&"plain"in e&&(s.style=e.plain),"object"==typeof a&&(s.style=S(S({},s.style||{}),a)),s}),[e]))(i),l=(e=>{const n=(0,d.useCallback)((({types:n,empty:t})=>{if(null!=e)return 1===n.length&&"plain"===n[0]?null!=t?{display:"inline-block"}:void 0:1===n.length&&null!=t?e[n[0]]:Object.assign(null!=t?{display:"inline-block"}:{},...n.map((n=>e[n])))}),[e]);return(0,d.useCallback)((e=>{var t=e,{token:r,className:a,style:o}=t,i=j(t,["token","className","style"]);const s=$(S({},i),{className:(0,u.Z)("token",...r.types,a),children:r.content,style:n(r)});return null!=o&&(s.style=S(S({},s.style||{}),o)),s}),[n])})(i),c=(({prism:e,code:n,grammar:t,language:r})=>{const a=(0,d.useRef)(e);return(0,d.useMemo)((()=>{if(null==t)return Q([n]);const e={code:n,grammar:t,language:r,tokens:[]};return a.current.hooks.run("before-tokenize",e),e.tokens=a.current.tokenize(n,t),a.current.hooks.run("after-tokenize",e),Q(e.tokens)}),[n,t,r])})({prism:a,language:o,code:t,grammar:a.languages[o]});return e({tokens:c,className:`prism-code language-${o}`,style:null!=i?i.root:{},getLineProps:s,getTokenProps:l})},ee=e=>(0,d.createElement)(X,$(S({},e),{prism:e.prism||C,theme:e.theme||U,code:e.code,language:e.language}))},10362:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});var r=!0,a="Invariant failed";function o(e,n){if(!e){if(r)throw new Error(a);var t="function"==typeof n?n():n,o=t?"".concat(a,": ").concat(t):a;throw new Error(o)}}},36809:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r={title:"ethdebug format",tagline:"Debugging data format for smart contracts",favicon:"img/favicon.ico",url:"https://ethdebug.github.io",baseUrl:"/format/",organizationName:"ethdebug",projectName:"format",onBrokenLinks:"throw",onBrokenMarkdownLinks:"warn",i18n:{defaultLocale:"en",locales:["en"],path:"i18n",localeConfigs:{}},themes:[["docusaurus-json-schema-plugin",{}],"@saucelabs/theme-github-codeblock"],plugins:[null,["./plugins/project-code-plugin.ts",{packages:{"@ethdebug/format":{tsConfigFilePath:"/home/runner/work/format/format/packages/format/tsconfig.json"},"@ethdebug/pointers":{tsConfigFilePath:"/home/runner/work/format/format/packages/pointers/tsconfig.json"}}}],["@docusaurus/plugin-content-docs",{id:"spec",path:"spec",routeBasePath:"spec",sidebarPath:"./sidebars.ts",editUrl:"https://github.com/ethdebug/format/tree/main/packages/web"}]],presets:[["classic",{docs:{sidebarPath:"./sidebars.ts",editUrl:"https://github.com/ethdebug/format/tree/main/packages/web"},theme:{customCss:"./src/css/custom.css"}}]],themeConfig:{navbar:{title:"ethdebug format",logo:{alt:"ethdebug logo",src:"img/logo.svg"},items:[{type:"docSidebar",sidebarId:"docsSidebar",position:"left",label:"Documentation"},{to:"/spec/overview",label:"Specification",position:"left",activeBaseRegex:"/spec/"},{to:"/status",label:"\u26a0\ufe0f INCOMPLETE DRAFT \u26a0\ufe0f",className:"draft-warning",position:"right"},{href:"https://github.com/ethdebug/format",label:"GitHub",position:"right"}],hideOnScroll:!1},footer:{style:"dark",links:[{title:"Docs",items:[{label:"Project overview",to:"/docs/overview"},{label:"Known challenges",to:"/docs/known-challenges"}]},{title:"Spec",items:[{label:"Specification overview",to:"/spec/overview"}]},{title:"Community",items:[{label:"Matrix.chat",href:"https://matrix.to/#/#ethdebug:matrix.org"},{label:"Twitter",href:"https://twitter.com/ethdebug"},{label:"GitHub",href:"https://github.com/ethdebug/format"}]}],copyright:"Copyright \xa9 2025 by ethdebug contributors. Built with Docusaurus."},prism:{theme:{plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]},darkTheme:{plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]},additionalLanguages:["json"],magicComments:[{className:"theme-code-block-highlighted-line",line:"highlight-next-line",block:{start:"highlight-start",end:"highlight-end"}}]},colorMode:{defaultMode:"light",disableSwitch:!1,respectPrefersColorScheme:!1},docs:{versionPersistence:"localStorage",sidebar:{hideable:!1,autoCollapseCategories:!1}},metadata:[],tableOfContents:{minHeadingLevel:2,maxHeadingLevel:3}},baseUrlIssueBanner:!0,future:{experimental_storage:{type:"localStorage",namespace:!1},experimental_router:"browser"},onBrokenAnchors:"warn",onDuplicateRoutes:"warn",staticDirectories:["static"],customFields:{},scripts:[],headTags:[],stylesheets:[],clientModules:[],titleDelimiter:"|",noIndex:!1,markdown:{format:"mdx",mermaid:!1,mdx1Compat:{comments:!0,admonitions:!0,headingIds:!0},anchors:{maintainCase:!1}}}},57529:e=>{"use strict";e.exports={}},16887:e=>{"use strict";e.exports=JSON.parse('{"/format/home/-8f8":{"__comp":"c3e4b2a1","__context":{"plugin":"a7456010"},"config":"5e9f5e1a"},"/format/status-d6d":{"__comp":"1f391b9e","__context":{"plugin":"a7456010"},"content":"e856c143"},"/format/docs-be4":{"__comp":"5e95c892","__context":{"plugin":"aba21aa0"}},"/format/docs-267":{"__comp":"a7bd4aaa","__props":"d3f864f6"},"/format/docs-68e":{"__comp":"a94703ab"},"/format/docs/category/prototype-sketches-809":{"__comp":"14eb3368","__props":"2fe7c366"},"/format/docs/goals-0bb":{"__comp":"17896441","content":"06d87cbd"},"/format/docs/implementation-guides/-66d":{"__comp":"17896441","content":"ddfabb78"},"/format/docs/implementation-guides/pointers/-5f2":{"__comp":"17896441","content":"dcaebccf"},"/format/docs/implementation-guides/pointers/dereference-logic/-cb8":{"__comp":"17896441","content":"19c068a5"},"/format/docs/implementation-guides/pointers/dereference-logic/generating-regions-8e9":{"__comp":"17896441","content":"d37c0134"},"/format/docs/implementation-guides/pointers/dereference-logic/making-regions-concrete-1e7":{"__comp":"17896441","content":"8aa384a9"},"/format/docs/implementation-guides/pointers/evaluating-expressions-ed9":{"__comp":"17896441","content":"ce1d6aaa"},"/format/docs/implementation-guides/pointers/reading-from-regions-109":{"__comp":"17896441","content":"a6fccf34"},"/format/docs/implementation-guides/pointers/testing/-5cd":{"__comp":"17896441","content":"e793cb8b"},"/format/docs/implementation-guides/pointers/testing/blockchain-simulation-950":{"__comp":"17896441","content":"3c31ec3b"},"/format/docs/implementation-guides/pointers/testing/compilation-07c":{"__comp":"17896441","content":"b70fd545"},"/format/docs/implementation-guides/pointers/testing/deployment-9b5":{"__comp":"17896441","content":"00be781a"},"/format/docs/implementation-guides/pointers/testing/example-pointers-4cc":{"__comp":"17896441","content":"805f8f48"},"/format/docs/implementation-guides/pointers/testing/jest-1f4":{"__comp":"17896441","content":"24164d9f"},"/format/docs/implementation-guides/pointers/testing/machine-observation-a54":{"__comp":"17896441","content":"f577767d"},"/format/docs/implementation-guides/pointers/testing/test-cases/-834":{"__comp":"17896441","content":"658aa8be"},"/format/docs/implementation-guides/pointers/testing/test-cases/string-storage-2e2":{"__comp":"17896441","content":"96cb052f"},"/format/docs/implementation-guides/pointers/testing/test-cases/struct-storage-5d7":{"__comp":"17896441","content":"4f48a76f"},"/format/docs/implementation-guides/pointers/testing/test-cases/uint256-array-memory-fc6":{"__comp":"17896441","content":"27fc136d"},"/format/docs/implementation-guides/pointers/types/-e07":{"__comp":"17896441","content":"cb7b1c3b"},"/format/docs/implementation-guides/pointers/types/cursors-6a3":{"__comp":"17896441","content":"6dcd11e3"},"/format/docs/implementation-guides/pointers/types/data-and-machines-34a":{"__comp":"17896441","content":"dc0c7504"},"/format/docs/implementation-guides/pointers/types/pointer-types-fee":{"__comp":"17896441","content":"3bef66bf"},"/format/docs/known-challenges-5aa":{"__comp":"17896441","content":"9e15fc25"},"/format/docs/overview-ff5":{"__comp":"17896441","content":"18891827"},"/format/docs/sketches/layout-926":{"__comp":"17896441","content":"2d5baa33"},"/format/docs/sketches/prototype-9b3":{"__comp":"17896441","content":"0098a75a"},"/format/spec-916":{"__comp":"5e95c892","__context":{"plugin":"dfd51a51"}},"/format/spec-1f1":{"__comp":"a7bd4aaa","__props":"65b9696e"},"/format/spec-33d":{"__comp":"a94703ab"},"/format/spec/category/complex-types-8c2":{"__comp":"14eb3368","__props":"2d54960a"},"/format/spec/category/elementary-types-ed4":{"__comp":"14eb3368","__props":"6656ad10"},"/format/spec/data/hex-e36":{"__comp":"17896441","content":"ca0d25b7"},"/format/spec/data/overview-95a":{"__comp":"17896441","content":"a9779a33"},"/format/spec/data/unsigned-125":{"__comp":"17896441","content":"ede070c3"},"/format/spec/data/value-888":{"__comp":"17896441","content":"5a3947ce"},"/format/spec/info/-2e5":{"__comp":"17896441","content":"7ea30011"},"/format/spec/info/overview-ead":{"__comp":"17896441","content":"ceb0eefa"},"/format/spec/info/resources-48a":{"__comp":"17896441","content":"bea7a14c"},"/format/spec/materials/compilation-d27":{"__comp":"17896441","content":"c26eb700"},"/format/spec/materials/id-672":{"__comp":"17896441","content":"73e8c510"},"/format/spec/materials/overview-1ec":{"__comp":"17896441","content":"ad7f7207"},"/format/spec/materials/source-73e":{"__comp":"17896441","content":"5c90228f"},"/format/spec/materials/source-range-1d1":{"__comp":"17896441","content":"c73c1d3a"},"/format/spec/overview-d74":{"__comp":"17896441","content":"d6a63adc"},"/format/spec/pointer/-ac2":{"__comp":"17896441","content":"0c6b334b"},"/format/spec/pointer/collection/-204":{"__comp":"17896441","content":"324b62c5"},"/format/spec/pointer/collection/conditional-f89":{"__comp":"17896441","content":"9c6e1aee"},"/format/spec/pointer/collection/group-60f":{"__comp":"17896441","content":"e8328cbe"},"/format/spec/pointer/collection/list-e12":{"__comp":"17896441","content":"6397ae1b"},"/format/spec/pointer/collection/scope-6af":{"__comp":"17896441","content":"6bb5505e"},"/format/spec/pointer/concepts-4f7":{"__comp":"17896441","content":"06923f2b"},"/format/spec/pointer/expression-38a":{"__comp":"17896441","content":"ee3e0fff"},"/format/spec/pointer/overview-20e":{"__comp":"17896441","content":"60b8d43b"},"/format/spec/pointer/region/-a75":{"__comp":"17896441","content":"57805cd5"},"/format/spec/pointer/region/base-2ed":{"__comp":"17896441","content":"41f6ea55"},"/format/spec/pointer/region/location/calldata-352":{"__comp":"17896441","content":"34a1fa87"},"/format/spec/pointer/region/location/code-bde":{"__comp":"17896441","content":"5fb36c82"},"/format/spec/pointer/region/location/memory-d08":{"__comp":"17896441","content":"b702b8d4"},"/format/spec/pointer/region/location/returndata-424":{"__comp":"17896441","content":"ccf56d1d"},"/format/spec/pointer/region/location/stack-08f":{"__comp":"17896441","content":"4ffa8edd"},"/format/spec/pointer/region/location/storage-a40":{"__comp":"17896441","content":"06f6442f"},"/format/spec/pointer/region/location/transient-3e8":{"__comp":"17896441","content":"7168108a"},"/format/spec/pointer/region/scheme/segment-acf":{"__comp":"17896441","content":"47f40ad3"},"/format/spec/pointer/region/scheme/slice-481":{"__comp":"17896441","content":"55366030"},"/format/spec/pointer/template-fec":{"__comp":"17896441","content":"9999236a"},"/format/spec/program/-0a6":{"__comp":"17896441","content":"468cb0dd"},"/format/spec/program/concepts-fb8":{"__comp":"17896441","content":"9c15981d"},"/format/spec/program/context/-223":{"__comp":"17896441","content":"a36bb8b3"},"/format/spec/program/context/code-782":{"__comp":"17896441","content":"b8b25df5"},"/format/spec/program/context/frame-497":{"__comp":"17896441","content":"bcf1c89a"},"/format/spec/program/context/gather-972":{"__comp":"17896441","content":"9785fb56"},"/format/spec/program/context/pick-368":{"__comp":"17896441","content":"d95ad7b1"},"/format/spec/program/context/remark-c00":{"__comp":"17896441","content":"0d8e4b06"},"/format/spec/program/context/variables-47f":{"__comp":"17896441","content":"3d06257c"},"/format/spec/program/example-61b":{"__comp":"17896441","content":"19100351"},"/format/spec/program/instruction-a58":{"__comp":"17896441","content":"ac92a050"},"/format/spec/program/overview-876":{"__comp":"17896441","content":"ee64d9a0"},"/format/spec/type/-ff8":{"__comp":"17896441","content":"6e8ff3aa"},"/format/spec/type/base-663":{"__comp":"17896441","content":"1917520d"},"/format/spec/type/complex/alias-4d3":{"__comp":"17896441","content":"26adb6ed"},"/format/spec/type/complex/array-3bd":{"__comp":"17896441","content":"39033cdf"},"/format/spec/type/complex/function-51d":{"__comp":"17896441","content":"288a3aad"},"/format/spec/type/complex/mapping-23e":{"__comp":"17896441","content":"b27771bd"},"/format/spec/type/complex/struct-75b":{"__comp":"17896441","content":"9ac2b418"},"/format/spec/type/complex/tuple-c0b":{"__comp":"17896441","content":"1154c93e"},"/format/spec/type/concepts-e7a":{"__comp":"17896441","content":"8e037750"},"/format/spec/type/elementary/address-5cc":{"__comp":"17896441","content":"26210d4e"},"/format/spec/type/elementary/bool-fc0":{"__comp":"17896441","content":"f210e6d3"},"/format/spec/type/elementary/bytes-2b6":{"__comp":"17896441","content":"0d3f9d17"},"/format/spec/type/elementary/contract-571":{"__comp":"17896441","content":"be5c8d03"},"/format/spec/type/elementary/enum-cdd":{"__comp":"17896441","content":"aeecf7cf"},"/format/spec/type/elementary/fixed-3d7":{"__comp":"17896441","content":"87bcd65e"},"/format/spec/type/elementary/int-09e":{"__comp":"17896441","content":"74f0bff4"},"/format/spec/type/elementary/string-c22":{"__comp":"17896441","content":"50fa7aa7"},"/format/spec/type/elementary/ufixed-c61":{"__comp":"17896441","content":"f2745fbe"},"/format/spec/type/elementary/uint-6ea":{"__comp":"17896441","content":"c47862a6"},"/format/spec/type/overview-101":{"__comp":"17896441","content":"5fa83de1"},"/format/-610":{"__comp":"1df93b7f","__context":{"plugin":"a7456010"},"config":"5e9f5e1a"}}')}},e=>{e.O(0,[532],(()=>{return n=2062,e(e.s=n);var n}));e.O()}]);