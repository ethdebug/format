"use strict";(self.webpackChunk_ethdebug_format_web=self.webpackChunk_ethdebug_format_web||[]).push([[3904],{71613:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var r=i(52322),t=i(45392);const o={sidebar_position:5},s="The dereference function",c={id:"implementation-guides/pointers/dereference-logic/dereference-logic",title:"The dereference function",description:"These next few pages cover how the components described thus far are combined",source:"@site/docs/implementation-guides/pointers/dereference-logic/dereference-logic.mdx",sourceDirName:"implementation-guides/pointers/dereference-logic",slug:"/implementation-guides/pointers/dereference-logic/",permalink:"/format/docs/implementation-guides/pointers/dereference-logic/",draft:!1,unlisted:!1,editUrl:"https://github.com/ethdebug/format/tree/main/packages/web/docs/implementation-guides/pointers/dereference-logic/dereference-logic.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Evaluating pointer expressions",permalink:"/format/docs/implementation-guides/pointers/evaluating-expressions"},next:{title:"Summary",permalink:"/format/docs/implementation-guides/pointers/dereference-logic/summary"}},d={},a=[];function l(e){const n={a:"a",code:"code",h1:"h1",li:"li",p:"p",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"the-dereference-function",children:"The dereference function"}),"\n",(0,r.jsxs)(n.p,{children:["These next few pages cover how the components described thus far are combined\nto create the final ",(0,r.jsx)(n.code,{children:"dereference(pointer: Pointer)"})," function."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/docs/implementation-guides/pointers/dereference-logic/summary",children:"Summary"}),"\npage broadly describes the control flow structure behind this function\nimplementation."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/implementation-guides/pointers/dereference-logic/generating-regions",children:"Generating regions on the fly"}),"\ndescribes the process of recursively processing a pointer and reducing it to\na concrete list of fully-evaluated ",(0,r.jsx)(n.code,{children:"Cursor.Region"})," objects."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/implementation-guides/pointers/dereference-logic/making-regions-concrete",children:"Making regions concrete"}),"\ndescribes the process for converting a single ",(0,r.jsx)(n.code,{children:"Pointer.Region"})," object into\nits fully-evaluated ",(0,r.jsx)(n.code,{children:"Cursor.Region"})," equivalent at runtime."]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);