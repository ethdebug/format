(self.webpackChunk_ethdebug_format_web=self.webpackChunk_ethdebug_format_web||[]).push([[4963],{23349:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var i=t(52322),s=t(45392),o=t(51114);const r={sidebar_position:2},a="Pointer types",p={id:"implementation-guides/pointers/types/pointer-types",title:"Pointer types",description:"Types and type guards for all kinds of pointers",source:"@site/docs/implementation-guides/pointers/types/pointer-types.mdx",sourceDirName:"implementation-guides/pointers/types",slug:"/implementation-guides/pointers/types/pointer-types",permalink:"/format/docs/implementation-guides/pointers/types/pointer-types",draft:!1,unlisted:!1,editUrl:"https://github.com/ethdebug/format/tree/main/packages/web/docs/implementation-guides/pointers/types/pointer-types.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Essential type definitions",permalink:"/format/docs/implementation-guides/pointers/types/"},next:{title:"Data and machines",permalink:"/format/docs/implementation-guides/pointers/types/data-and-machines"}},c={},l=[{value:"Types and type guards for all kinds of pointers",id:"types-and-type-guards-for-all-kinds-of-pointers",level:2},{value:"Pointer.Expression",id:"pointerexpression",level:2},{value:"Code listing",id:"code-listing",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"pointer-types",children:"Pointer types"}),"\n",(0,i.jsx)(n.h2,{id:"types-and-type-guards-for-all-kinds-of-pointers",children:"Types and type guards for all kinds of pointers"}),"\n",(0,i.jsxs)(n.p,{children:["This package provides the root ",(0,i.jsx)(n.code,{children:"Pointer"})," type and accompanying ",(0,i.jsx)(n.code,{children:"Pointer"}),"\nnamespace, which contains TypeScript type definitions and type guards for\nworking with ",(0,i.jsx)(n.strong,{children:"ethdebug/format/pointer"})," objects."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Pointer"})," namespace is organized itself into namespaces in a nested manner,\nroughly to correspond to the JSON-Schema organization itself."]}),"\n",(0,i.jsx)(n.p,{children:"Types and type guards are available for all pointer schemas, i.e., for every\ndifferent kind of region and collection."}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"#code-listing",children:"full source listing"})," follows below, but see example usage to\nget a sense for how these types are organized:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="Usage example"',children:'import { Pointer, isPointer } from "@ethdebug/pointers";\n\nconst region: Pointer.Region = { location: "stack", slot: 0 };\nconst group: Pointer.Collection.Group = { group: [region] };\n\nisPointer(region); // true\nPointer.isRegion(region); // true\nPointer.isRegion(group); // false\nPointer.isCollection(group); // true\nPointer.Collection.isGroup(group); // true\n'})}),"\n",(0,i.jsx)(n.h2,{id:"pointerexpression",children:"Pointer.Expression"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Pointer"})," namespace also contains the ",(0,i.jsx)(n.code,{children:"Pointer.Expression"})," type and\naccompanying ",(0,i.jsx)(n.code,{children:"Pointer.Expression"})," namespace. This namespace is similarly\nnested, also roughly to correspond to the root JSON-Schema."]}),"\n",(0,i.jsx)(n.p,{children:"See these quick examples to get a sense for this part of the type hierarchy:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",metastring:'title="Usage example"',children:'import { Pointer } from "@ethdebug/pointers";\n\nconst expression: Pointer.Expression = {\n  $sum: [0, 1]\n}\n\nPointer.Expression.isKeccak256(expression); // false\nPointer.Expression.isArithmetic(expression); // true\nPointer.Expression.Arithmetic.isSum(expression); // true\n'})}),"\n",(0,i.jsx)(n.h2,{id:"code-listing",children:"Code listing"}),"\n",(0,i.jsx)(o.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/pointer.ts"})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},48313:e=>{function n(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}n.keys=()=>[],n.resolve=n,n.id=48313,e.exports=n},51114:(e,n,t)=>{"use strict";t.d(n,{Z:()=>p});var i=t(84560),s=t.n(i),o=t(20477),r=t(42408);var a=t(52322);function p(e){let{packageName:n,sourcePath:t,extract:i,...p}=e;const c=function(e){const{packages:n}=(0,r.eZ)("project-code-plugin");if(!(e in n))throw new Error(`Unknown package name ${e}`);const{sourceFiles:t}=n[e],i=new o.IKL({useInMemoryFileSystem:!0});for(const{filePath:s,text:o}of t)i.createSourceFile(s,o,{overwrite:!0});return i}(n),l=c.getSourceFileOrThrow(t);if(!i)return(0,a.jsx)(s(),{title:t,language:"typescript",showLineNumbers:!0,children:l.getFullText()});const d=i(l,c);return(0,a.jsx)(s(),{language:"typescript",...p,children:d.getFullText().trim()})}},56699:()=>{},68379:()=>{},68382:()=>{},78867:()=>{},21212:()=>{},89854:()=>{},25800:()=>{},93037:()=>{},26996:()=>{}}]);