"use strict";(self.webpackChunk_ethdebug_format_web=self.webpackChunk_ethdebug_format_web||[]).push([[1178],{82221:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=t(52322),n=t(45392);const i={sidebar_position:1},r="Overview",c={id:"data/overview",title:"Overview",description:"ethdebug/format/data is a namespace for schemas that define canonical",source:"@site/spec/data/overview.mdx",sourceDirName:"data",slug:"/data/overview",permalink:"/format/pr-preview/pr-153/spec/data/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/ethdebug/format/tree/main/packages/web/spec/data/overview.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Pointer templates",permalink:"/format/pr-preview/pr-153/spec/pointer/template"},next:{title:"Hexadecimal strings",permalink:"/format/pr-preview/pr-153/spec/data/hex"}},o={},d=[{value:"Reading these schemas",id:"reading-these-schemas",level:2}];function h(e){const s={a:"a",admonition:"admonition",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h1,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(s.admonition,{title:"Summary",type:"tip",children:[(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"ethdebug/format/data"})," is a namespace for schemas that define canonical\nrepresentations of specific data types, such as hexadecimal strings and\nunsigned integers."]}),(0,a.jsxs)(s.p,{children:["Schemas in this namespace exist so that the rest of ",(0,a.jsx)(s.strong,{children:"ethdebug/format"})," has\na consistent way of representing these types."]})]}),"\n",(0,a.jsx)(s.h2,{id:"reading-these-schemas",children:"Reading these schemas"}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.strong,{children:"ethdebug/format/data"})," namespace is not a schema itself, but rather\na collection of closely-related schemas."]}),"\n",(0,a.jsxs)(s.p,{children:["These schemas (like all schemas in this format) are specified as\n",(0,a.jsx)(s.a,{href:"https://json-schema.org",children:"JSON Schema"}),", draft 2020-12."]}),"\n",(0,a.jsx)(s.p,{children:"Please refer to the following resources in this section, or see the navigation\nbar for complete contents."}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"/spec/data/value",children:"Non-negative numeric values"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"/spec/data/hex",children:"Hexadecimal strings"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"/spec/data/unsigned",children:"Unsigned integer"})}),"\n"]})]})}function l(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);