(self.webpackChunk_ethdebug_format_web=self.webpackChunk_ethdebug_format_web||[]).push([[6338],{37374:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=t(52322),r=t(45392),i=t(61376);const o={sidebar_position:2},c="Generating regions on the fly",a={id:"implementation-guides/pointers/dereference-logic/generating-regions",title:"Generating regions on the fly",description:"The dereference() function internally creates an",source:"@site/docs/implementation-guides/pointers/dereference-logic/generating-regions.mdx",sourceDirName:"implementation-guides/pointers/dereference-logic",slug:"/implementation-guides/pointers/dereference-logic/generating-regions",permalink:"/format/pr-preview/pr-149/docs/implementation-guides/pointers/dereference-logic/generating-regions",draft:!1,unlisted:!1,editUrl:"https://github.com/ethdebug/format/tree/main/packages/web/docs/implementation-guides/pointers/dereference-logic/generating-regions.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"The dereference function",permalink:"/format/pr-preview/pr-149/docs/implementation-guides/pointers/dereference-logic/"},next:{title:"Making regions concrete",permalink:"/format/pr-preview/pr-149/docs/implementation-guides/pointers/dereference-logic/making-regions-concrete"}},l={},d=[{value:"Processing a pointer",id:"processing-a-pointer",level:2},{value:"Processing a region",id:"processing-a-region",level:2},{value:"Processing collections",id:"processing-collections",level:2},{value:"Groups",id:"groups",level:3},{value:"Lists",id:"lists",level:3},{value:"Conditionals",id:"conditionals",level:3},{value:"Scopes",id:"scopes",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"generating-regions-on-the-fly",children:"Generating regions on the fly"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"dereference()"})," function internally creates an\n",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator",children:"AsyncIterator"}),"\nto produce an asynchronous list of regions."]}),"\n",(0,s.jsx)(n.p,{children:'The process to produce this list uses a stack of processing requests (which\nit calls "memos"), consuming one memo at a time from the top of the stack\nand handling it based on what kind of memo it is.'}),"\n",(0,s.jsxs)(n.p,{children:["This is defined by the ",(0,s.jsx)(n.code,{children:"generateRegions()"})," function (defined in conjunction\nwith ",(0,s.jsx)(n.code,{children:"GenerateRegionsOptions"}),"):"]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsxs)("summary",{children:[(0,s.jsx)(n.code,{children:"generateRegions()"})," and ",(0,s.jsx)(n.code,{children:"GenerateRegionsOptions"})]}),(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/generate.ts",extract:e=>e.getInterface("GenerateRegionsOptions")}),(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/generate.ts",extract:e=>e.getFunction("generateRegions")})]}),"\n",(0,s.jsxs)(n.p,{children:["Notice how this function initializes two mutable records collections: one for\nall the current named regions, and one for all the current variables. As\nthis function's ",(0,s.jsx)(n.code,{children:"while()"})," loop operates on the stack, memos for saving new\nnamed regions or updating variable values may appear and then get handled\nappropriately."]}),"\n",(0,s.jsxs)(n.p,{children:["For reference, see the ",(0,s.jsx)(n.code,{children:"memo.ts"})," module for type definitions for each of the\nthree types of memo and their corresponding helper constructor functions."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsxs)("summary",{children:["See the ",(0,s.jsx)(n.code,{children:"memo.ts"})," module"]}),(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/memo.ts"})]}),"\n",(0,s.jsxs)(n.p,{children:["The real bulk of what ",(0,s.jsx)(n.code,{children:"generateRegions()"})," does, however, is hidden inside the\ncall ",(0,s.jsx)(n.code,{children:"yield* processPointer()"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"processing-a-pointer",children:"Processing a pointer"}),"\n",(0,s.jsxs)(n.p,{children:["To handle a ",(0,s.jsx)(n.code,{children:"DereferencePointer"})," memo from the stack inside\n",(0,s.jsx)(n.code,{children:"generateRegions()"}),", it defers to the ",(0,s.jsx)(n.code,{children:"processPointer()"})," generator function."]}),"\n",(0,s.jsx)(n.p,{children:"The signature of this function and associated types are as follows:"}),"\n",(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/process.ts",extract:(e,n)=>{const t=e.getFunction("processPointer"),s=n.createSourceFile("dereference-process.ts","",{overwrite:!0});for(const o of e.getImportDeclarations())s.addImportDeclaration(o.getStructure());const r=e.getTypeAliases();for(const o of r)s.addTypeAlias(o.getStructure());const i=t.getLeadingCommentRanges().map((n=>e.getFullText().substring(n.getPos(),n.getEnd()))).join("\n");s.addFunction({name:t.getName(),parameters:t.getParameters().map(((e,n,t)=>({name:e.getName(),type:e.getType().getText(e),hasQuestionToken:e.hasQuestionToken()||e.hasInitializer(),leadingTrivia:"\n",trailingTrivia:n<t.length-1?void 0:"\n"}))),returnType:"Process",hasDeclareKeyword:!0,isAsync:!0,leadingTrivia:`${i}\n`});return s.getFunction("processPointer")}}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ProcessOptions"})," interface captures the runtime data at a particular\npoint in the region generation process:"]}),"\n",(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/process.ts",extract:e=>e.getInterface("ProcessOptions")}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Process"})," type alias provides a short type alias for functions like\n",(0,s.jsx)(n.code,{children:"processPointer"})," to use:"]}),"\n",(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/process.ts",extract:e=>e.getTypeAlias("Process")}),"\n",(0,s.jsxs)(n.p,{children:["Effectively, by returning a ",(0,s.jsx)(n.code,{children:"Process"}),", the ",(0,s.jsx)(n.code,{children:"processPointer()"})," has two\ndifferent mechanisms of data return:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["By being a JavaScript ",(0,s.jsx)(n.code,{children:"AsyncGenerator"}),", it produces ",(0,s.jsx)(n.code,{children:"Cursor.Region"})," objects\none at a time, emitted as a side effect of execution (via JavaScript ",(0,s.jsx)(n.code,{children:"yield"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Upon completion of exection, the return value is a list of memos to be\nadded to the stack."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"})," that the expected behavior for this implementation is that the\nreturned list of memos should be pushed onto the stack in reverse order,\nso that earlier memos in the list will be processed before later ones."]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsxs)("summary",{children:["See the full definition of ",(0,s.jsx)(n.code,{children:"processPointer()"})]}),(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/process.ts",extract:e=>e.getFunction("processPointer")})]}),"\n",(0,s.jsx)(n.h2,{id:"processing-a-region",children:"Processing a region"}),"\n",(0,s.jsx)(n.p,{children:"The simplest kind of pointer is just a single region. (Remember that pointers\nare either regions or collections of other pointers.)"}),"\n",(0,s.jsxs)(n.p,{children:["There is complexity hidden by function calls here, but nonetheless first\nconsider the implementation of the ",(0,s.jsx)(n.code,{children:"processRegion()"})," function as a base case:"]}),"\n",(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/process.ts",extract:e=>e.getFunction("processRegion")}),"\n",(0,s.jsxs)(n.p,{children:["Effectively, this function converts a ",(0,s.jsx)(n.code,{children:"Pointer.Region"})," into a\nfully-evaluated, concrete ",(0,s.jsx)(n.code,{children:"Cursor.Region"}),", emits this concrete region as the\nnext ",(0,s.jsx)(n.code,{children:"yield"}),"ed value in the asynchronous list of regions, and possibly issues\na request to save this region to process state by its name."]}),"\n",(0,s.jsx)(n.p,{children:"This pointer evaluation process will be described later."}),"\n",(0,s.jsx)(n.h2,{id:"processing-collections",children:"Processing collections"}),"\n",(0,s.jsx)(n.p,{children:"The recursive cases are fairly straightforward following this architecture."}),"\n",(0,s.jsx)(n.h3,{id:"groups",children:"Groups"}),"\n",(0,s.jsx)(n.p,{children:"The simplest collection, a group of other pointers, yields no regions of its\nown, but instead pushes each of its child pointers for evaluation later:"}),"\n",(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/process.ts",extract:e=>e.getFunction("processGroup")}),"\n",(0,s.jsx)(n.p,{children:"It's essential that each of the child pointers get evaluated in the order\nthey appear in the list, since later pointers may reference regions named\nearlier, etc."}),"\n",(0,s.jsx)(n.h3,{id:"lists",children:"Lists"}),"\n",(0,s.jsx)(n.p,{children:"List collections are more complex because they dynamically generate a number\nof composed pointers based on a runtime count value and introducing a\nvariable identifier for use inside the dynamic composed pointer evaluation."}),"\n",(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/process.ts",extract:e=>e.getFunction("processList")}),"\n",(0,s.jsx)(n.p,{children:"Note how, because each dynamic child pointer is evaluated based on the\nnext incremented index value, the memos for updating this variable and\nevaluation the child pointer must be interspersed."}),"\n",(0,s.jsx)(n.h3,{id:"conditionals",children:"Conditionals"}),"\n",(0,s.jsx)(n.p,{children:"Conditional pointers evaluate to a child pointer given that some runtime\ncondition evaluates to a nonzero value, optionally evaluating to a different\npointer when that conditional fails."}),"\n",(0,s.jsxs)(n.p,{children:["Evaluating a conditional thus becomes a simple matter of evaluating the\n",(0,s.jsx)(n.code,{children:'"if"'})," clause and issuing a memo for dereferencing the ",(0,s.jsx)(n.code,{children:'"then"'})," pointer or\nthe ",(0,s.jsx)(n.code,{children:'"else"'})," pointer if it is specified:"]}),"\n",(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/process.ts",extract:e=>e.getFunction("processConditional")}),"\n",(0,s.jsx)(n.h3,{id:"scopes",children:"Scopes"}),"\n",(0,s.jsx)(n.p,{children:"Finally, the last kind of collection defined by this schema is for defining\na scope of variables by identifier by specifying the expression values for\neach of those variables."}),"\n",(0,s.jsxs)(n.p,{children:["Since this schema takes advantage of how JSON objects are ordered lists of\nkey/value pairs, variables specified later may reference variables specified\nearlier. The only trickiness in implementing ",(0,s.jsx)(n.code,{children:"processScope"})," is ensuring that\nvariable values are available immediately."]}),"\n",(0,s.jsx)(i.Z,{packageName:"@ethdebug/pointers",sourcePath:"src/dereference/process.ts",extract:e=>e.getFunction("processScope")})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},48313:e=>{function n(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}n.keys=()=>[],n.resolve=n,n.id=48313,e.exports=n},61376:(e,n,t)=>{"use strict";t.d(n,{Z:()=>g});var s=t(84560),r=t.n(s),i=t(20477),o=t(42408);var c=t(2784),a=t(27718),l=t(52322);function d(e){let{code:n,links:t,...s}=e;const i=(0,c.useRef)(null),[o,a]=(0,c.useState)(null);return(0,c.useEffect)((()=>{function e(){if(i.current){const e=i.current.querySelector("pre > code");if(e){const n=Array.from(e.childNodes).flatMap((e=>h(e,t)));a((0,l.jsx)("pre",{className:e.parentElement?.className,children:(0,l.jsx)("code",{className:e.className,children:n})}))}}}e();const n=new MutationObserver(e);return i.current&&n.observe(i.current,{childList:!0,subtree:!0}),()=>n.disconnect()}),[n,t]),o||(0,l.jsx)("div",{ref:i,children:(0,l.jsx)(r(),{...s,children:n})})}function h(e,n){return e.nodeType===Node.TEXT_NODE?function(e,n){const t=[];let s=e.textContent||"",r=0;for(const[i,o]of Object.entries(n)){let e=s.indexOf(i,r);for(;-1!==e;)e>r&&t.push(s.slice(r,e)),t.push((0,l.jsx)(a.Z,{to:o,className:"linked-code-block-link",children:i},`${i}-${e}`)),r=e+i.length,e=s.indexOf(i,r)}r<s.length&&t.push(s.slice(r));return t}(e,n):e.nodeType===Node.ELEMENT_NODE?function(e,n){const t=e.tagName.toLowerCase(),s={key:p++,className:e.className};e.style&&e.style.cssText&&(s.style=function(e){const n={};for(const t of e.split(";"))if(t){const[e,s]=t.split(":");if(e&&s){n[e.trim().replace(/-./g,(e=>e[1].toUpperCase()))]=s.trim()}}return n}(e.style.cssText));if(u.has(t))return c.createElement(t,s);const r=Array.from(e.childNodes).flatMap((e=>h(e,n)));return c.createElement(t,s,r)}(e,n):[]}let p=0;const u=new Set(["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"]);function g(e){let{packageName:n,sourcePath:t,includePackageNameInTitle:s=!1,extract:c,links:a={},...h}=e;const p=function(e){const{packages:n}=(0,o.eZ)("project-code-plugin");if(!(e in n))throw new Error(`Unknown package name ${e}`);const{sourceFiles:t}=n[e],s=new i.IKL({useInMemoryFileSystem:!0});for(const{filePath:r,text:i}of t)s.createSourceFile(r,i,{overwrite:!0});return s}(n),u=p.getSourceFileOrThrow(t),g=c?c(u,p):u,f=g.getFullText().trim(),m=!c,x=s?(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)("strong",{children:n})," ",t]}):t;return Object.keys(a).length>0?(0,l.jsx)(d,{code:f,links:a,language:"typescript",...h}):(0,l.jsx)(r(),{language:"typescript",...m?{title:x,showLineNumbers:!0}:{showLineNumbers:!1},...h,children:g.getFullText().trim()})}},56699:()=>{},68379:()=>{},68382:()=>{},78867:()=>{},21212:()=>{},89854:()=>{},25800:()=>{},93037:()=>{},26996:()=>{}}]);