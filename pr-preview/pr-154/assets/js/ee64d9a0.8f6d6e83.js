"use strict";(self.webpackChunk_ethdebug_format_web=self.webpackChunk_ethdebug_format_web||[]).push([[7316],{80046:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>h});var r=t(52322),i=t(45392);const s={sidebar_position:1},a="Overview",o={id:"program/overview",title:"Overview",description:"This schema and its subschemas remain largely incomplete. Please stay tuned as",source:"@site/spec/program/overview.mdx",sourceDirName:"program",slug:"/program/overview",permalink:"/format/pr-preview/pr-154/spec/program/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/ethdebug/format/tree/main/packages/web/spec/program/overview.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Source range schema",permalink:"/format/pr-preview/pr-154/spec/materials/source-range"},next:{title:"Key concepts",permalink:"/format/pr-preview/pr-154/spec/program/concepts"}},c={},h=[{value:"Reading this schema",id:"reading-this-schema",level:2}];function l(e){const n={a:"a",admonition:"admonition",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"This schema and its subschemas remain largely incomplete. Please stay tuned as\nwork continues here."})}),"\n",(0,r.jsxs)(n.admonition,{title:"Summary",type:"tip",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ethdebug/format/program"})," is a JSON schema for describing compile-time\ninformation about EVM bytecode, organized from the perspective of individual\nmachine instructions."]}),(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.strong,{children:"ethdebug/format"}),', a program record (or "program") represents one block of\nexecutable EVM machine code that a compiler generated for a specific contract.\nThis could be either the contract\'s runtime call bytecode or the bytecode\nto create the contract.']}),(0,r.jsx)(n.p,{children:'A program is structured as a sequence of instruction records ("instructions"),\nwhere each corresponds to a single EVM instruction in the machine code. Each\ninstruction contains information about the high-level language context at that\npoint in the bytecode. This allows debuggers to map low-level machine state\nback to high-level language concepts at any point during execution.'}),(0,r.jsx)(n.p,{children:"Key information that programs contain for a particular instruction might\ninclude:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'the source range or source ranges that are "associated" with the\ninstruction'}),"\n",(0,r.jsx)(n.li,{children:"the collection of known high-level variables at that point in time,\nincluding their types and where to find the bytes with those variables'\nvalues"}),"\n",(0,r.jsx)(n.li,{children:"signals to indicate that the instruction is part of some control flow\noperation, such as calling some function from another."}),"\n"]}),(0,r.jsxs)(n.p,{children:["These program records provide debuggers with a powerful reference resource\nto be consulted while observing a running EVM. At each step of EVM machine\nexecution, debuggers can find the matching ",(0,r.jsx)(n.strong,{children:"ethdebug/format"})," program\ninstruction and use its information to maintain a coherent model of the\nhigh-level world, step-by-step."]})]}),"\n",(0,r.jsxs)(n.p,{children:["This format defines the primary ",(0,r.jsx)(n.strong,{children:"ethdebug/format/program"})," schema as well as\nvarious sub-schemas in the ethdebug/format/program/* namespace."]}),"\n",(0,r.jsxs)(n.p,{children:["JSON values adhering to this schema contain comprehensive information about a\nparticular EVM bytecode object. This includes contract metadata (e.g., reference to the source range where the contract is defined) and, importantly, an\nordered list of ",(0,r.jsx)(n.strong,{children:"ethdebug/format/program/instruction"})," objects."]}),"\n",(0,r.jsx)(n.p,{children:"Each instruction object contains essential details for translating low-level\nmachine state at the time of the instruction back into high-level language\nconcepts. This allows debuggers to provide a meaningful representation of\nprogram state at any point during execution."}),"\n",(0,r.jsx)(n.h2,{id:"reading-this-schema",children:"Reading this schema"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"ethdebug/format/program"})," schema is a root schema that composes other\nrelated schemas in the ethdebug/format/program/* namespace."]}),"\n",(0,r.jsxs)(n.p,{children:["These schemas (like all schemas in this format) are specified as\n",(0,r.jsx)(n.a,{href:"https://json-schema.org",children:"JSON Schema"}),", draft 2020-12."]}),"\n",(0,r.jsx)(n.p,{children:"Please refer to one or more of the following resources in this section, or\nsee the navigation bar for complete contents:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/spec/program/concepts",children:"Key concepts"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/spec/program",children:"Schema"})," (",(0,r.jsx)(n.strong,{children:"ethdebug/format/program"})," schema listing)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/spec/program/instruction",children:"Instruction schema"}),"\n(",(0,r.jsx)(n.strong,{children:"ethdebug/format/program/instruction"})," schema listing)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/spec/program/context",children:"Context schema"}),"\n(",(0,r.jsx)(n.strong,{children:"ethdebug/format/program/context"})," schema listing)"]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);